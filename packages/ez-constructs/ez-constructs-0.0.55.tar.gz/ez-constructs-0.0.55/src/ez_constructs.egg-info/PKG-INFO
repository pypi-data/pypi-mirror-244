Metadata-Version: 2.1
Name: ez-constructs
Version: 0.0.55
Summary: A collection of high level patterns for creating standard resources in every project
Home-page: https://github.com/SavvyTools/ez-constructs.git
Author: Biju Joseph<biju.joseph@semanticbits.com>
License: Apache-2.0
Project-URL: Source, https://github.com/SavvyTools/ez-constructs.git
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: JavaScript
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Typing :: Typed
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved
Requires-Python: ~=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# EZ Constructs

A collection of heaviliy opinionated AWS CDK highlevel constructs.
[construct.dev](https://constructs.dev/packages/ez-constructs/) || [npmjs](https://www.npmjs.com/package/ez-constructs)

## Installation

> The library requires AWS CDK version >= 2.92.0.

` npm install ez-constructs` or ` yarn add ez-constructs`

## Constructs

1. [SecureBucket](src/secure-bucket) - Creates an S3 bucket that is secure, encrypted at rest along with object retention and intelligent transition rules
2. [SimpleCodeBuildProject](src/codebuild-ci) - Creates Codebuild projects the easy way.
3. [SimpleStepFunction](src/stepfunctions) - Creates a simple step function user supplied workflow definition file.
4. [SimpleServerlessSparkJob](src/stepfunctions#simpleserverlesssparkjob) - Creates a step function that can be used to submit a spark job to EMR.
5. [SimpleServerlessApplication](src/emr) - Creates an EMR Serverless Application.

## Libraries

1. Utils - A collection of utility functions
2. CustomSynthesizer - A custom CDK synthesizer that will alter the default service roles that CDK uses.

## Aspects

1. [PermissionsBoundaryAspect](src/aspects) - A custom aspect that can be used to apply a permission boundary to all roles created in the contex.
