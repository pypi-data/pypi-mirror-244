name: Build and Publish

on:
  push:
    branches:
      - actions
    tags:
      - '*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    container:
      image: python:3.11-buster

    steps:
    - name: Determine version from Git tag or set default
      id: versioning
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="0.0.4"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check out code
      uses: actions/checkout@v2

    - name: Extract tag version and update pyproject.toml
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        echo "Extracted version: ${{ env.VERSION }}"
        sed -i "s/^version = .*/version = '${{ env.VERSION }}'/" pyproject.toml

    - name: Install dependencies
      run: |
        pip install build twine

    - name: Set execute permission for build.sh and dist.sh
      run: |
        chmod +x ./scripts/build.sh
        chmod +x ./scripts/dist.sh

    - name: Run build script
      run: bash ./scripts/build.sh

    - name: Run distribution script
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: bash ./scripts/dist.sh

    - name: Create a GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/tessie_api-${{ env.VERSION }}.tar.gz
        asset_content_type: application/gzip
