"""Generated by Sideko (sideko.dev)"""
from __future__ import annotations

import io
import typing
from pydantic import BaseModel as _PydanticBaseModel, Field as _PydanticField, ConfigDict as _PydanticConfigDict

ModelFiles = typing.List[typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]]

class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class Item(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    by: str = _PydanticField(alias="by")
    dead: typing.Optional[bool] = _PydanticField(alias="dead", default=None)
    deleted: typing.Optional[bool] = _PydanticField(alias="deleted", default=None)
    descendants: typing.Optional[int] = _PydanticField(alias="descendants", default=None)
    id: int = _PydanticField(alias="id")
    kids: typing.Optional[typing.List[int]] = _PydanticField(alias="kids", default=None)
    parent: typing.Optional[int] = _PydanticField(alias="parent", default=None)
    parts: typing.Optional[typing.List[int]] = _PydanticField(alias="parts", default=None)
    poll: typing.Optional[int] = _PydanticField(alias="poll", default=None)
    score: typing.Optional[int] = _PydanticField(alias="score", default=None)
    text: typing.Optional[str] = _PydanticField(alias="text", default=None)
    time: int = _PydanticField(alias="time")
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)
    type: str = _PydanticField(alias="type")
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetUpdatesJsonResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    items: typing.Optional[typing.List[int]] = _PydanticField(alias="items", default=None)
    profiles: typing.Optional[typing.List[str]] = _PydanticField(alias="profiles", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class User(_PydanticBaseModel):
    model_config = _PydanticConfigDict(arbitrary_types_allowed=True, populate_by_name=True)
    
    about: typing.Optional[str] = _PydanticField(alias="about", default=None)
    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    karma: typing.Optional[int] = _PydanticField(alias="karma", default=None)
    submitted: typing.Optional[typing.Any] = _PydanticField(alias="submitted", default=None)

    def model_files(self) -> ModelFiles:
        files: ModelFiles = []

        return files

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set() # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


# Rebuild forward refs
Item.model_rebuild()
GetUpdatesJsonResponse.model_rebuild()
User.model_rebuild()
