"""Generated by Sideko (sideko.dev)"""
import abc
import typing
import json
import requests
from pydantic import BaseModel

from .schemas import *

class RequestError(Exception):
    def __init__(self, status_code: int, method: str, url: str, message: str):
        super().__init__(f"received {status_code} from {method.upper()} {url}")
        self.status_code = status_code
        self.method = method
        self.url = url
        try:
            self.data = json.loads(message)
        except:
            self.data = message

class _AuthProvider(abc.ABC):
    @abc.abstractmethod
    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        """Adds relevant auth to request kwargs"""

class _AuthBasic(BaseModel, _AuthProvider):
    username: typing.Optional[str]
    password: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.username is not None and self.password is not None:
            req_kwargs["auth"] = (self.username, self.password)
        
        return req_kwargs

class _AuthBearer(BaseModel, _AuthProvider):
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add bearer header auth val
            headers = req_kwargs.get("headers", {})
            headers["Authorization"] = f"Bearer {self.val}"
            req_kwargs["headers"] = headers

        return req_kwargs

class _AuthKeyQuery(BaseModel, _AuthProvider):
    query_name: str
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add query auth value
            params = req_kwargs.get("params", {})
            params[self.query_name] = self.val
            req_kwargs["params"] = params
    
        return req_kwargs

class _AuthKeyHeader(BaseModel, _AuthProvider):
    header_name: str
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add header auth val
            headers = req_kwargs.get("headers", {})
            headers[self.header_name] = self.val
            req_kwargs["headers"] = headers

        return req_kwargs

class _AuthKeyCookie(BaseModel, _AuthProvider):
    cookie_name: str
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add header auth val
            cookies = req_kwargs.get("cookies", {})
            cookies[self.cookie_name] = self.val
            req_kwargs["cookies"] = cookies

        return req_kwargs

class Client:
    def __init__(self, *, base_url: typing.Optional[str] = None):
        url = base_url or "https://hacker-news.firebaseio.com/v0"
        self.base_url = url        
        self.session = requests.Session()
        
        # register auth providers
        self._auth: typing.Dict[str, _AuthProvider] = {}

    def _cast_list(self, input_list, target_class):
        casted = []
        for el in input_list:
            if isinstance(el, list):
                casted.append(self._cast_list(el, target_class))
            else:
                casted.append(target_class(**el))
        return casted

    def _raise_exception(self, response: requests.models.Response) -> typing.Any:
        method = response.request.method or "unknown"
        raise RequestError(response.status_code, method, response.url, response.text)

    def _to_json_encodable(self, target: typing.Any) -> typing.Any:
        if isinstance(target, list):
            return [self._to_json_encodable(el) for el in target]

        dump_method = getattr(target, "model_api_dump", None)
        if callable(dump_method):
            return target.model_api_dump()

        return target
    
    def _add_auth(self, auth_names: typing.List[str], **req_kwargs) -> typing.Dict:
        for auth_name in auth_names:
            provider = self._auth.get(auth_name, None)
            if provider is not None:
                req_kwargs = provider.add_auth(req_kwargs)
        
        return req_kwargs


    def get_ask_story_ids(self, *, print: typing.Optional[str] = None) -> typing.List[int]:
        """ List the latest Ask HN story IDs. Will return maximum 200 IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/askstories.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_best_story_ids(self, *, print: typing.Optional[str] = None) -> typing.List[int]:
        """ List the best hacker news story IDs. Will return maximum 500 IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/beststories.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_item(self, *, id: int, print: typing.Optional[str] = None) -> Item:
        """ Stories, Comments, Jobs, Ask HNs and even Polls are all considered items, with slightly different structures (see the examples). -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/item/{id}.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        _response = Item(**_response)
        return _response

    def get_job_story_ids(self, *, print: typing.Optional[str] = None) -> typing.List[int]:
        """ List the latest Job story IDs. Will return maximum 200 IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/jobstories.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_max_item_id(self, *, print: typing.Optional[str] = None) -> int:
        """ The current largest item ID. Walking backwards from here allows you to list all items avialable through the API. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/maxitem.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_new_story_ids(self, *, print: typing.Optional[str] = None) -> typing.List[int]:
        """ List the top hacker news story IDs. Will return maximum 500 IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/newstories.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_show_story_ids(self, *, print: typing.Optional[str] = None) -> typing.List[int]:
        """ List the latest Show HN story IDs. Will return maximum 200 IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/showstories.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_top_story_ids(self, *, print: typing.Optional[str] = None) -> typing.List[int]:
        """ List the top hacker news story IDs. Will return maximum 500 IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/topstories.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        return _response

    def get_updates(self, *, print: typing.Optional[str] = None) -> GetUpdatesJsonResponse:
        """ List recently updated item IDs and profile IDs. -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/updates.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        _response = GetUpdatesJsonResponse(**_response)
        return _response

    def get_user(self, *, id: str, print: typing.Optional[str] = None) -> User:
        """ Retrieves user metadata given the user ID (HN username). -  - *Documentation & SDKs generated by Sideko from OpenAPI. Install and try the free beta SDK generator on our [Github](https://github.com/Sideko-Inc/sideko).* -  """
        _endpoint = f"/user/{id}.json"
        _url = f"{self.base_url}{_endpoint}"

        _params = {} #type: dict[str, typing.Any]
        if print is not None:
            _params["print"] = print
        _authed_kwargs = self._add_auth(
            [],
            params=_params
        )
        _raw_response = self.session.get(_url, **_authed_kwargs)
        
        _response = _raw_response.json() if _raw_response.ok else self._raise_exception(_raw_response)
        _response = User(**_response)
        return _response


