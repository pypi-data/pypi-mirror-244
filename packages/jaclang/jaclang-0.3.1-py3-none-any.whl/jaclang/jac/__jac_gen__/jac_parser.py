# The file was automatically generated by Lark v1.1.8
__version__ = "1.1.8"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar,
    Generic,
    Type,
    Tuple,
    List,
    Dict,
    Iterator,
    Collection,
    Callable,
    Optional,
    FrozenSet,
    Any,
    Union,
    Iterable,
    IO,
    TYPE_CHECKING,
    overload,
    Sequence,
    Pattern as REPattern,
    ClassVar,
    Set,
    Mapping,
)




class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg="Got %r, expected one of %s"):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass


T = TypeVar("T")


class UnexpectedInput(LarkError):
    #--

    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: "InteractiveParser"

    def get_context(self, text: str, span: int = 40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit("\n", 1)[-1]
            after = text[pos:end].split("\n", 1)[0]
            return before + after + "\n" + " " * len(before.expandtabs()) + "^\n"
        else:
            before = text[start:pos].rsplit(b"\n", 1)[-1]
            after = text[pos:end].split(b"\n", 1)[0]
            return (
                before + after + b"\n" + b" " * len(before.expandtabs()) + b"^\n"
            ).decode("ascii", "backslashreplace")

    def match_examples(
        self,
        parse_fn: "Callable[[str], Tree]",
        examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
        token_type_match_fallback: bool = False,
        use_accepts: bool = True,
    ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug(
                                "Different accepts with same state[%d]: %s != %s at example [%s][%s]"
                                % (self.state, self.accepts, ut.accepts, i, j)
                            )
                            continue
                        if isinstance(
                            self, (UnexpectedToken, UnexpectedEOF)
                        ) and isinstance(ut, (UnexpectedToken, UnexpectedEOF)):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[
                                    -1
                                ]:
                                    logger.debug(
                                        "Token Type Fallback at example [%s][%s]"
                                        % (i, j)
                                    )
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug(
                                "Same State match at example [%s][%s]" % (i, j)
                            )
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [
                d[t_name].user_repr() if t_name in d else t_name for t_name in expected
            ]
        return "Expected one of: \n\t* %s\n" % "\n\t* ".join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--

    expected: "List[Token]"

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token

        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name

    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(
        self,
        seq,
        lex_pos,
        line,
        column,
        allowed=None,
        considered_tokens=None,
        state=None,
        token_history=None,
        terminals_by_name=None,
        considered_rules=None,
    ):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos : lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)

    def __str__(self):
        message = (
            "No terminal matches '%s' in the current parser context, at line %d col %d"
            % (self.char, self.line, self.column)
        )
        message += "\n\n" + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += "\nPrevious tokens: %s\n" % ", ".join(
                repr(t) for t in self.token_history
            )
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(
        self,
        token,
        expected,
        considered_rules=None,
        state=None,
        interactive_parser=None,
        terminals_by_name=None,
        token_history=None,
    ):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, "line", "?")
        self.column = getattr(token, "column", "?")
        self.pos_in_stream = getattr(token, "start_pos", None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history

    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = (
                self.interactive_parser and self.interactive_parser.accepts()
            )
        return self._accepts

    def __str__(self):
        message = "Unexpected token %r at line %s, column %s.\n%s" % (
            self.token,
            self.line,
            self.column,
            self._format_expected(self.accepts or self.expected),
        )
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message


class VisitError(LarkError):
    #--

    obj: "Union[Tree, Token]"
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass



import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(
    seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None
) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if "__type__" in data:  ##

            class_ = namespace[data["__type__"]]
            return class_.deserialize(data, memo)
        elif "@" in data:
            return memo[data["@"]]
        return {
            key: _deserialize(value, namespace, memo) for key, value in data.items()
        }
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")


class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {"@": memo.memoized.get(self)}

        fields = getattr(self, "__serialize_fields__")
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res["__type__"] = type(self).__name__
        if hasattr(self, "_serialize"):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, "__serialize_namespace__", [])
        namespace = {c.__name__: c for c in namespace}

        fields = getattr(cls, "__serialize_fields__")

        if "@" in data:
            return memo[data["@"]]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, "_deserialize"):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = ("memoized",)

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex

    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r"\\p{[A-Za-z_]+}")


def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, "A", expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError(
                "`regex` module must be installed in order to use Unicode categories.",
                expr,
            )
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]  ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match("") is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)



from collections import OrderedDict


class Meta:
    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: "List[TerminalDef]"
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, "Tree[_Leaf_T]"]


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: "List[Branch[_Leaf_T]]"

    def __init__(
        self, data: str, children: "List[Branch[_Leaf_T]]", meta: Optional[Meta] = None
    ) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return "Tree(%r, %r)" % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f"{indent_str*level}{self._pretty_label()}"
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f"\t{self.children[0]}\n"
        else:
            yield "\n"
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level + 1, indent_str)
                else:
                    yield f"{indent_str*(level+1)}{n}\n"

    def pretty(self, indent_str: str = "  ") -> str:
        #--
        return "".join(self._pretty(0, indent_str))

    def __rich__(self, parent: Optional["rich.tree.Tree"] = None) -> "rich.tree.Tree":
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f"[bold]{self.data}[/bold]")
        else:
            import rich.tree

            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f"[green]{c}[/green]")

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> "Iterator[Tree[_Leaf_T]]":
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [
                c
                for c in reversed(subtree.children)  ##

                if isinstance(c, Tree) and id(c) not in subtrees
            ]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(
        self, pred: "Callable[[Tree[_Leaf_T]], bool]"
    ) -> "Iterator[Tree[_Leaf_T]]":
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> "Iterator[Tree[_Leaf_T]]":
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar("_Return_T")
_Return_V = TypeVar("_Return_V")
_Leaf_T = TypeVar("_Leaf_T")
_Leaf_U = TypeVar("_Leaf_U")
_R = TypeVar("_R")
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]


class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"


Discard = _DiscardType()

##



class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):
            ##

            if name.startswith("_") or (
                name in libmembers and name not in cls.__dict__
            ):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    __visit_tokens__ = True  ##


    def __init__(self, visit_tokens: bool = True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, "visit_wrapper", None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
        self: "Transformer[_Leaf_T, Tree[_Leaf_U]]",
        other: "Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]",
    ) -> "TransformerChain[_Leaf_T, _Return_V]":
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError(
                    "Cannot merge: method '%s' appears more than once" % prefixed_method
                )

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):  ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):
    transformers: "Tuple[Union[Transformer, TransformerChain], ...]"

    def __init__(self, *transformers: "Union[Transformer, TransformerChain]") -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
        self: "TransformerChain[_Leaf_T, Tree[_Leaf_U]]",
        other: "Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]",
    ) -> "TransformerChain[_Leaf_T, _Return_V]":
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--

    def _transform_tree(self, tree):  ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        (result,) = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--

    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##



class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, "visit_wrapper", None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [
            self._visit_tree(child) if isinstance(child, Tree) else child
            for child in tree.children
        ]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]


def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--

    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)

    return inner


##



def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--

    base_func: Callable

    def __init__(
        self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]
    ):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)


def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)


def _vargs_meta(f, _data, children, meta):
    return f(meta, children)


def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(
    inline: bool = False,
    meta: bool = False,
    tree: bool = False,
    wrapper: Optional[Callable] = None,
) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError(
            "Visitor functions cannot combine 'tree' with 'meta' or 'inline'."
        )

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError(
                "Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'."
            )
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)

    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ("name",)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return "%s(%r)" % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = "name", "filter_out"

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return "%s(%r, %r)" % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = ("name",)

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = (
        "keep_all_tokens",
        "expand1",
        "priority",
        "template_source",
        "empty_indices",
    )

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(
        self,
        keep_all_tokens: bool = False,
        expand1: bool = False,
        priority: Optional[int] = None,
        template_source: Optional[str] = None,
        empty_indices: Tuple[bool, ...] = (),
    ) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return "RuleOptions(%r, %r, %r, %r)" % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source,
        )


class Rule(Serialize):
    #--

    __slots__ = ("origin", "expansion", "alias", "options", "order", "_hash")

    __serialize_fields__ = "origin", "expansion", "order", "alias", "options"
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(
        self,
        origin: NonTerminal,
        expansion: Sequence[Symbol],
        order: int = 0,
        alias: Optional[str] = None,
        options: Optional[RuleOptions] = None,
    ):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return "<%s : %s>" % (
            self.origin.name,
            " ".join(x.name for x in self.expansion),
        )

    def __repr__(self):
        return "Rule(%r, %r, %r, %r)" % (
            self.origin,
            self.expansion,
            self.alias,
            self.options,
        )

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False


class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(
        self, value: str, flags: Collection[str] = (), raw: Optional[str] = None
    ) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return (
            type(self) == type(other)
            and self.value == other.value
            and self.flags == other.flags
        )

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = "(?%s:%s)" % (f, value)
        return value


class PatternStr(Pattern):
    __serialize_fields__ = "value", "flags", "raw"

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = "value", "flags", "raw", "_width"

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None

    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = "name", "pattern", "priority"
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(
        self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY
    ) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return "%s(%r, %r)" % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith("__"):  ##

            return self.pattern.raw or self.name
        else:
            return self.name


_T = TypeVar("_T", bound="Token")


class Token(str):
    #--

    __slots__ = (
        "type",
        "start_pos",
        "value",
        "line",
        "column",
        "end_line",
        "end_column",
        "end_pos",
    )

    __match_args__ = ("type", "value")

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]

    @overload
    def __new__(
        cls,
        type: str,
        value: Any,
        start_pos: Optional[int] = None,
        line: Optional[int] = None,
        column: Optional[int] = None,
        end_line: Optional[int] = None,
        end_column: Optional[int] = None,
        end_pos: Optional[int] = None,
    ) -> "Token":
        ...

    @overload
    def __new__(
        cls,
        type_: str,
        value: Any,
        start_pos: Optional[int] = None,
        line: Optional[int] = None,
        column: Optional[int] = None,
        end_line: Optional[int] = None,
        end_column: Optional[int] = None,
        end_pos: Optional[int] = None,
    ) -> "Token":
        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn(
                "`type_` is deprecated use `type` instead", DeprecationWarning
            )

            if "type" in kwargs:
                raise TypeError(
                    "Error: using both 'type' and the deprecated 'type_' as arguments."
                )
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)

    @classmethod
    def _future_new(
        cls,
        type,
        value,
        start_pos=None,
        line=None,
        column=None,
        end_line=None,
        end_column=None,
        end_pos=None,
    ):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(
        self, type: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        ...

    @overload
    def update(
        self, type_: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn(
                "`type_` is deprecated use `type` instead", DeprecationWarning
            )

            if "type" in kwargs:
                raise TypeError(
                    "Error: using both 'type' and the deprecated 'type_' as arguments."
                )
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(
        self, type: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self,
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: "Token") -> _T:
        return cls(
            type_,
            value,
            borrow_t.start_pos,
            borrow_t.line,
            borrow_t.column,
            borrow_t.end_line,
            borrow_t.end_column,
            borrow_t.end_pos,
        )

    def __reduce__(self):
        return (
            self.__class__,
            (self.type, self.value, self.start_pos, self.line, self.column),
        )

    def __repr__(self):
        return "Token(%r, %r)" % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = "char_pos", "line", "column", "line_start_pos", "newline_char"

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return (
            self.char_pos == other.char_pos and self.newline_char == other.newline_char
        )

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = (
                    self.char_pos + token.rindex(self.newline_char) + 1
                )

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)


def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(
                Scanner(
                    unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes
                )
            )

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = "$" if self.match_whole else ""
        mres = []
        while terminals:
            pattern = "|".join(
                "(?P<%s>%s)" % (t.name, t.pattern.to_regexp() + postfix)
                for t in terminals[:max_size]
            )
            if self.use_bytes:
                pattern = pattern.encode("latin-1")
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return (
        "\n" in r or "\\n" in r or "\\s" in r or "[^" in r or ("(?s" in r and "." in r)
    )


class LexerState:
    #--

    __slots__ = "text", "line_ctr", "last_token"

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(
        self,
        text: str,
        line_ctr: Optional[LineCounter] = None,
        last_token: Optional[Token] = None,
    ):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(
            b"\n" if isinstance(text, bytes) else "\n"
        )
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return (
            self.text is other.text
            and self.line_ctr == other.line_ctr
            and self.last_token == other.last_token
        )

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: "Lexer", lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: "Lexer", text: str) -> "LexerThread":
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]


class Lexer(ABC):
    #--

    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(
    terminal_to_regexp: Dict[TerminalDef, str],
    comparator,
    strict_mode,
    max_collisions_to_show=8,
):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(
                    a, b, max_time
                ).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning(
                "%s The lexer will choose between them arbitrarily.\n%s",
                message,
                example,
            )
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: "LexerConf", comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: "LexerConf", comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError(
                        "Lexer does not allow zero-width terminals. (%s: %s)"
                        % (t.name, t.pattern)
                    )
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError(
                    "Ignore terminals are not defined: %s"
                    % (set(conf.ignore) - {t.name for t in terminals})
                )

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError(
                    "interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`."
                )

        ##

        self.newline_types = frozenset(
            t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())
        )
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(
            key=lambda x: (
                -x.priority,
                -x.pattern.max_width,
                -len(x.pattern.value),
                x.name,
            )
        )
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(
            self.terminals, self.g_regex_flags, self.re, self.use_bytes
        )
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(
                    self.callback[type_], f, lambda t: t.type == type_
                )
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(
                    lex_state.text,
                    line_ctr.char_pos,
                    line_ctr.line,
                    line_ctr.column,
                    allowed=allowed,
                    token_history=lex_state.last_token and [lex_state.last_token],
                    state=parser_state,
                    terminals_by_name=self.terminals_by_name,
                )

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(
                    type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column
                )
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError(
                            "Callbacks must return a token (returned %r)" % t
                        )
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(
        self,
        conf: "LexerConf",
        states: Dict[int, Collection[str]],
        always_accept: Collection[str] = (),
    ) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes(
                {t: t.pattern.to_regexp() for t in terminals}
            )
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [
                    terminals_by_name[n] for n in accepts if n in terminals_by_name
                ]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(
        self, lexer_state: LexerState, parser_state: "ParserState"
    ) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = (
                    lexer_state.last_token
                )  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(
                    token,
                    e.allowed,
                    state=parser_state,
                    token_history=[last_token],
                    terminals_by_name=self.root_lexer.terminals_by_name,
                )
            except UnexpectedCharacters:
                raise e  ##





_ParserArgType: "TypeAlias" = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: "TypeAlias" = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]


class LexerConf(Serialize):
    __serialize_fields__ = (
        "terminals",
        "ignore",
        "g_regex_flags",
        "use_bytes",
        "lexer_type",
    )
    __serialize_namespace__ = (TerminalDef,)

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: "Optional[PostLex]"
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(
        self,
        terminals: Collection[TerminalDef],
        re_module: ModuleType,
        ignore: Collection[str] = (),
        postlex: "Optional[PostLex]" = None,
        callbacks: Optional[Dict[str, _LexerCallback]] = None,
        g_regex_flags: int = 0,
        skip_validation: bool = False,
        use_bytes: bool = False,
        strict: bool = False,
    ):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = "rules", "start", "parser_type"

    rules: List["Rule"]
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(
        self, rules: List["Rule"], callbacks: ParserCallbacks, start: List[str]
    ):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start



from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, "line"):
                    ##

                    res_meta.line = getattr(
                        first_meta, "container_line", first_meta.line
                    )
                    res_meta.column = getattr(
                        first_meta, "container_column", first_meta.column
                    )
                    res_meta.start_pos = getattr(
                        first_meta, "container_start_pos", first_meta.start_pos
                    )
                    res_meta.empty = False

                res_meta.container_line = getattr(
                    first_meta, "container_line", first_meta.line
                )
                res_meta.container_column = getattr(
                    first_meta, "container_column", first_meta.column
                )
                res_meta.container_start_pos = getattr(
                    first_meta, "container_start_pos", first_meta.start_pos
                )

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, "end_line"):
                    res_meta.end_line = getattr(
                        last_meta, "container_end_line", last_meta.end_line
                    )
                    res_meta.end_column = getattr(
                        last_meta, "container_end_column", last_meta.end_column
                    )
                    res_meta.end_pos = getattr(
                        last_meta, "container_end_pos", last_meta.end_pos
                    )
                    res_meta.empty = False

                res_meta.container_end_line = getattr(
                    last_meta, "container_end_line", last_meta.end_line
                )
                res_meta.container_end_column = getattr(
                    last_meta, "container_end_column", last_meta.end_column
                )
                res_meta.container_end_pos = getattr(
                    last_meta, "container_end_pos", last_meta.end_pos
                )

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, "__lark_meta__"):
                return c.__lark_meta__()


def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError("Invalid option for propagate_positions: %r" % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:  ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--

    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:  ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith("_")


def maybe_create_child_filter(
    expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]
):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = "".join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split("0")]
        assert len(empty_indices) == len(expansion) + 1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion) + 1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if (
        _empty_indices
        or len(to_include) < len(expansion)
        or any(to_expand for i, to_expand, _ in to_include)
    ):
        if _empty_indices or ambiguous:
            return partial(
                ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add
            )
        else:
            ##

            return partial(
                ChildFilterLALR_NoPlaceholders, [(i, x) for i, x, _ in to_include]
            )


class AmbiguousExpander:
    #--

    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, "data") and t.data == "_ambig"

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data("_ambig")

        if not ambiguous:
            return self.node_builder(children)

        expand = [
            child.children if i in ambiguous else (child,)
            for i, child in enumerate(children)
        ]
        return self.tree_class(
            "_ambig", [self.node_builder(list(f)) for f in product(*expand)]
        )


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [
        i
        for i, sym in enumerate(expansion)
        if keep_all_tokens
        or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))
    ]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, "data") and child.data == "_iambig"

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class(
                            "_inter", grandchild.children + children[1:]
                        )
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class("_ambig", processed_nodes)

        return self.node_builder(children)


def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)

    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)

    return f


class ParseTreeBuilder:
    def __init__(
        self,
        rules,
        tree_class,
        propagate_positions=False,
        ambiguous=False,
        maybe_placeholders=False,
    ):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(
                filter(
                    None,
                    [
                        (expand_single_child and not rule.alias) and ExpandSingleChild,
                        maybe_create_child_filter(
                            rule.expansion,
                            keep_all_tokens,
                            self.ambiguous,
                            options.empty_indices if self.maybe_placeholders else None,
                        ),
                        propagate_positions,
                        self.ambiguous
                        and maybe_create_ambiguous_expander(
                            self.tree_class, rule.expansion, keep_all_tokens
                        ),
                        self.ambiguous
                        and partial(AmbiguousIntermediateExpander, self.tree_class),
                    ],
                )
            )

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, "__default__", None)
        if default_handler:

            def default_callback(data, children):
                return default_handler(data, children, None)

        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:
            user_callback_name = (
                rule.alias or rule.options.template_source or rule.origin.name
            )
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, "visit_wrapper", None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks





class Action:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return str(self)


Shift = Action("Shift")
Reduce = Action("Reduce")

StateT = TypeVar("StateT")


class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {
                tokens.get(token): (
                    (1, arg.serialize(memo)) if action is Reduce else (0, arg)
                )
                for token, (action, arg) in actions.items()
            }
            for state, actions in self.states.items()
        }

        return {
            "tokens": tokens.reversed(),
            "states": states,
            "start_states": self.start_states,
            "end_states": self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data["tokens"]
        states = {
            state: {
                tokens[token]: (
                    (Reduce, Rule.deserialize(arg, memo))
                    if action == 1
                    else (Shift, arg)
                )
                for token, (action, arg) in actions.items()
            }
            for state, actions in data["states"].items()
        }
        return cls(states, data["start_states"], data["end_states"])


class ParseTable(ParseTableBase["State"]):
    #--

    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict["State", int] = {s: i for i, s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {
                k: (v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                for k, v in la.items()
            }
            int_states[state_to_idx[s]] = la

        start_states = {
            start: state_to_idx[s] for start, s in parse_table.start_states.items()
        }
        end_states = {
            start: state_to_idx[s] for start, s in parse_table.end_states.items()
        }
        return cls(int_states, start_states, end_states)





class ParseConf(Generic[StateT]):
    __slots__ = (
        "parse_table",
        "callbacks",
        "start",
        "start_state",
        "end_state",
        "states",
    )

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(
        self,
        parse_table: ParseTableBase[StateT],
        callbacks: ParserCallbacks,
        start: str,
    ):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState(Generic[StateT]):
    __slots__ = "parse_conf", "lexer", "state_stack", "value_stack"

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(
        self,
        parse_conf: ParseConf[StateT],
        lexer: LexerThread,
        state_stack=None,
        value_stack=None,
    ):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return (
            len(self.state_stack) == len(other.state_stack)
            and self.position == other.position
        )

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer,  ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self) -> "ParserState[StateT]":
        return copy(self)

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(
                    token, expected, state=self, interactive_parser=None
                )

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(
                    token
                    if token.type not in callbacks
                    else callbacks[token.type](token)
                )
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]





class LALR_Parser(Serialize):
    def __init__(
        self, parser_conf: ParserConf, debug: bool = False, strict: bool = False
    ):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p : p + 1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (
                        isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == "$END"
                        and e.interactive_parser == e2.interactive_parser
                    ):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(
        self,
        parse_table: ParseTableBase,
        callbacks: ParserCallbacks,
        debug: bool = False,
    ):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(
        self,
        lexer: LexerThread,
        start: str,
        value_stack=None,
        state_stack=None,
        start_interactive=False,
    ):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)

    def parse_from_state(self, state: ParserState, last_token: Optional[Token] = None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = (
                Token.new_borrow_pos("$END", "", token)
                if token
                else Token("$END", "", 0, 1, 1)
            )
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print("%d)" % i, s)
                print("")

            raise





class InteractiveParser:
    #--

    def __init__(self, parser, parser_state, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn(
            "lexer_state will be removed in subsequent releases. Use lexer_thread instead.",
            DeprecationWarning,
        )
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == "$END")

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())

    def feed_eof(self, last_token=None):
        #--
        eof = (
            Token.new_borrow_pos("$END", "", last_token)
            if last_token is not None
            else self.lexer_thread._Token("$END", "", 0, 1, 1)
        )
        return self.feed_token(eof)

    def __copy__(self):
        #--
        return type(self)(
            self.parser,
            copy(self.parser_state),
            copy(self.lexer_thread),
        )

    def copy(self):
        return copy(self)

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return (
            self.parser_state == other.parser_state
            and self.lexer_thread == other.lexer_thread
        )

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append("\t- %s -> %r" % (k, v))
        out.append("stack size: %s" % len(self.parser_state.state_stack))
        return "\n".join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[
            self.parser_state.position
        ]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper():  ##

                new_cursor = copy(self)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ""))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(
            self.parser_state, last_token=self.lexer_thread.state.last_token
        )


class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)





def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, "__future_interface__", False)
    if future_interface:
        return lexer_class
    else:

        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)

            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)

        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data["parser_conf"], memo)
    cls = (options and options._plugins.get("LALR_Parser")) or LALR_Parser
    parser = cls.deserialize(data["parser"], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: "Dict[str, Callable[[LexerConf, Any, Any], Any]]" = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = "lexer_conf", "parser_conf", "parser"

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(
        self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None
    ):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert (
                create_parser is not None
            ), "{} is not supported in standalone mode".format(parser_conf.parser_type)
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ("dynamic", "dynamic_complete"):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                "basic": create_basic_lexer,
                "contextual": create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(
                lexer_conf, self.parser, lexer_conf.postlex, options
            )
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError(
                    "Lark initialized with more than 1 possible start rule. Must specify which start rule to parse",
                    start_decls,
                )
            (start,) = start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError(
                "Unknown start rule %s. Must be one of %r"
                % (start, self.parser_conf.start)
            )
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get("LexerThread")) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {"on_error": on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str] = None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != "lalr":
            raise ConfigurationError(
                "parse_interactive() currently only works with parser='lalr' "
            )
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ("lalr", "earley", "cyk"))
    if not isinstance(lexer, type):  ##

        expected = {
            "lalr": ("basic", "contextual"),
            "earley": ("basic", "dynamic", "dynamic_complete"),
            "cyk": ("basic",),
        }[parser]
        assert_config(
            lexer,
            expected,
            "Parser %r does not support lexer %%r, expected one of %%s" % parser,
        )


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result


class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)


def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get("BasicLexer")) or BasicLexer
    return cls(lexer_conf)


def create_contextual_lexer(
    lexer_conf: LexerConf, parser, postlex, options
) -> ContextualLexer:
    cls = (options and options._plugins.get("ContextualLexer")) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {
        idx: list(t.keys()) for idx, t in parse_table.states.items()
    }
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)


def create_lalr_parser(
    lexer_conf: LexerConf, parser_conf: ParserConf, options=None
) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get("LALR_Parser")) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)


_parser_creators["lalr"] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()


class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: "Optional[Transformer]"
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: "List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]"
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        "debug": False,
        "strict": False,
        "keep_all_tokens": False,
        "tree_class": None,
        "cache": False,
        "postlex": None,
        "parser": "earley",
        "lexer": "auto",
        "transformer": None,
        "start": "start",
        "priority": "auto",
        "ambiguity": "auto",
        "regex": False,
        "propagate_positions": False,
        "lexer_callbacks": {},
        "maybe_placeholders": True,
        "edit_terminals": None,
        "g_regex_flags": 0,
        "use_bytes": False,
        "ordered_sets": True,
        "import_paths": [],
        "source_path": None,
        "_plugins": {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in (
                    "cache",
                    "use_bytes",
                    "propagate_positions",
                ):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options["start"], str):
            options["start"] = [options["start"]]

        self.__dict__["options"] = options

        assert_config(self.parser, ("earley", "lalr", "cyk", None))

        if self.parser == "earley" and self.transformer:
            raise ConfigurationError(
                "Cannot specify an embedded transformer when using the Earley algorithm. "
                "Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)"
            )

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__["options"][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(
            name, self.options.keys(), "%r isn't a valid option. Expected one of: %s"
        )
        self.options[name] = value

    def serialize(self, memo=None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(
        cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]
    ) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {
    "postlex",
    "transformer",
    "lexer_callbacks",
    "use_bytes",
    "debug",
    "g_regex_flags",
    "regex",
    "propagate_positions",
    "tree_class",
    "_plugins",
}

_VALID_PRIORITY_OPTIONS = ("auto", "normal", "invert", None)
_VALID_AMBIGUITY_OPTIONS = ("auto", "resolve", "explicit", "forest")


_T = TypeVar("_T", bound="Lark")


class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: "Grammar"
    options: LarkOptions
    lexer: Lexer
    parser: "ParsingFrontend"
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: "Union[Grammar, str, IO[str]]", **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError(
                    "`regex` module must be installed if calling `Lark(regex=True)`."
                )
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = "<string>"
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError(
                        "Grammar must be ascii only, when use_bytes=True"
                    )

            if self.options.cache:
                if self.options.parser != "lalr":
                    raise ConfigurationError(
                        "cache only works with parser='lalr' for now"
                    )

                unhashable = (
                    "transformer",
                    "postlex",
                    "lexer_callbacks",
                    "edit_terminals",
                    "_plugins",
                )
                options_str = "".join(
                    k + str(v) for k, v in options.items() if k not in unhashable
                )
                from . import __version__

                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = (
                        tempfile.gettempdir()
                        + "/.lark_cache_%s_%s_%s_%s.tmp"
                        % (username, cache_sha256, *sys.version_info[:2])
                    )

                old_options = self.options
                try:
                    with FS.open(cache_fn, "rb") as f:
                        logger.debug("Loading grammar from cache: %s", cache_fn)
                        ##

                        for name in set(options) - _LOAD_ALLOWED_OPTIONS:
                            del options[name]
                        file_sha256 = f.readline().rstrip(b"\n")
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode(
                            "utf8"
                        ) and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except (
                    Exception
                ):  ##

                    logger.exception(
                        "Failed to load Lark from cache: %r. We will try to carry on.",
                        cache_fn,
                    )

                    ##

                    ##

                    self.options = old_options

            ##

            self.grammar, used_files = load_grammar(
                grammar,
                self.source_path,
                self.options.import_paths,
                self.options.keep_all_tokens,
            )
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar

        if self.options.lexer == "auto":
            if self.options.parser == "lalr":
                self.options.lexer = "contextual"
            elif self.options.parser == "earley":
                if self.options.postlex is not None:
                    logger.info(
                        "postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                        "Consider using lalr with contextual instead of earley"
                    )
                    self.options.lexer = "basic"
                else:
                    self.options.lexer = "dynamic"
            elif self.options.parser == "cyk":
                self.options.lexer = "basic"
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(
                lexer, Lexer
            )  ##

        else:
            assert_config(lexer, ("basic", "contextual", "dynamic", "dynamic_complete"))
            if self.options.postlex is not None and "dynamic" in lexer:
                raise ConfigurationError(
                    "Can't use postlex with a dynamic lexer. Use basic or contextual instead"
                )

        if self.options.ambiguity == "auto":
            if self.options.parser == "earley":
                self.options.ambiguity = "resolve"
        else:
            assert_config(
                self.options.parser,
                ("earley", "cyk"),
                "%r doesn't support disambiguation. Use one of these parsers instead: %s",
            )

        if self.options.priority == "auto":
            self.options.priority = "normal"

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError(
                "invalid priority option: %r. Must be one of %r"
                % (self.options.priority, _VALID_PRIORITY_OPTIONS)
            )
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError(
                "invalid ambiguity option: %r. Must be one of %r"
                % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS)
            )

        if self.options.parser is None:
            terminals_to_keep = "*"
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(
            self.options.start, terminals_to_keep
        )

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == "invert":
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
            self.terminals,
            re_module,
            self.ignore_tokens,
            self.options.postlex,
            self.options.lexer_callbacks,
            self.options.g_regex_flags,
            use_bytes=self.options.use_bytes,
            strict=self.options.strict,
        )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug("Saving grammar to cache: %s", cache_fn)
            try:
                with FS.open(cache_fn, "wb") as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode("utf8") + b"\n")
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = "parser", "rules", "options"

    def _build_lexer(self, dont_ignore: bool = False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy

            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != "forest":
            self._parse_tree_builder = ParseTreeBuilder(
                self.rules,
                self.options.tree_class or Tree,
                self.options.propagate_positions,
                self.options.parser != "lalr" and self.options.ambiguity == "explicit",
                self.options.maybe_placeholders,
            )
            self._callbacks = self._parse_tree_builder.create_callback(
                self.options.transformer
            )
        self._callbacks.update(
            _get_lexer_callbacks(self.options.transformer, self.terminals)
        )

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options,
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != "lalr":
            raise NotImplementedError(
                "Lark.save() is only implemented for the LALR(1) parser."
            )
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {
                n: v for n, v in data["options"].items() if n not in exclude_options
            }
        pickle.dump({"data": data, "memo": m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(
        self,
        data: Dict[str, Any],
        memo: Dict[int, Union[TerminalDef, Rule]],
        options: LarkOptions,
    ) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data["lexer_conf"], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d["memo"]
        data = d["data"]

        assert memo_json
        memo = SerializeMemoizer.deserialize(
            memo_json, {"Rule": Rule, "TerminalDef": TerminalDef}, {}
        )
        options = dict(data["options"])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError(
                "Some options are not allowed when loading a Parser: {}".format(
                    set(kwargs) - _LOAD_ALLOWED_OPTIONS
                )
            )
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data["rules"]]
        self.source_path = "<deserialized>"
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(
            data["parser"], memo, self.options
        )
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data["parser"],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({"data": data, "memo": memo}, **kwargs)

    @classmethod
    def open(
        cls: Type[_T], grammar_filename: str, rel_to: Optional[str] = None, **options
    ) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding="utf8") as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(
        cls: Type[_T],
        package: str,
        grammar_path: str,
        search_paths: "Sequence[str]" = [""],
        **options
    ) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault("source_path", full_path)
        options.setdefault("import_paths", [])
        options["import_paths"].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return "Lark(open(%r), parser=%r, lexer=%r, ...)" % (
            self.source_path,
            self.options.parser,
            self.options.lexer,
        )

    def lex(self, text: str, dont_ignore: bool = False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, "lexer") or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(
        self, text: Optional[str] = None, start: Optional[str] = None
    ) -> "InteractiveParser":
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(
        self,
        text: str,
        start: Optional[str] = None,
        on_error: "Optional[Callable[[UnexpectedInput], bool]]" = None,
    ) -> "ParseTree":
        #--
        return self.parser.parse(text, start=start, on_error=on_error)





class DedentError(LarkError):
    pass


class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit("\n", 1)[1]  ##

        indent = indent_str.count(" ") + indent_str.count("\t") * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError(
                    "Unexpected dedent to column %s. Expected dedent to %s"
                    % (indent, self.indent_level[-1])
                )

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, "")

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = "_NEWLINE"
    OPEN_PAREN_types = ["LPAR", "LSQB", "LBRACE"]
    CLOSE_PAREN_types = ["RPAR", "RSQB", "RBRACE"]
    INDENT_type = "_INDENT"
    DEDENT_type = "_DEDENT"
    tab_len = 8



import pickle, zlib, base64
DATA = (
b'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F22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iF22iN9YmVmAA/F70Je1QGXQMGg3VQNugHVAtlAGdgHZDe6A6qAvyQaegfVA3tB8KQi1QKnQWqoYOQLnQISgEnYMOS3m0iVb5RsDjBDlCP0YRjmkF5IRSoJHQDCgNKoUyoVnQbGgV5IKaodVQIbQGmgRZoXVQEbQBckMl0FRoI5QObYLmQq1QNTQP2gIVQ1uhZdBCqA0aIeXRKqMn0TajG92WKE6/L6Gp+RJah5jGQacgH5Qh5dEmqb9Rs6nG3q1mUxaoI10dRRe+L0n0PWPhezdyWTfqbDcGqW6ktG4MS92owd2owd3Ic93Ic93Ic93Ic90YzrqR7rpRybuR9bpR17sxnHWjrnejrsdUCU2CLFA9NBkqgpZCU6CpkBsqgYZBqVA6NBwqhpZBuZADWg7pUAM0DZoOJUIroEYoCWqCkiEnNAMqhTKgmdAsaDa0EsqCmqFV0GqoEMqD1kBrISs0AloHrYc2QC3QHGgjVAVtguZCm6FWqBqaB22B5kMLoK1QNpQD5UMLoTaoQMqjTbbKNX7fFT/xGBIkEiWSJJIlUiSGSaRKpEmkSwyXyJB4QSJTIksiWyJHIlfiRYk8iXyJAolxEuMlyiQmSIyUKJeokJgoUSkxSWKyxBSJqRIOiWkS0yWcEjMkZkp8WmKWxGyJORKfkaiSmCtRLTFPYr7EAomFEiMkFknUSNRKLJZwSdRJaBJLJOoliiSWSrglSiSKJZZJRCSWS+gSDRIrJBolmiRKJVZKNEusklgtUSixRmKtxDqJ9RIbJFokNkpsktgs0SqxRWKrxGcl2gQ82hTr4PLbawlq+e1Uq/wsjL9ACv0LJNSYtkHjIB90CsqQ8mgOq/z8l7es8pu9hf74LUTPt9Afv4X++C0E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FpLrLCTXWUius5BcZyG5zkJyNbUO6oFqoPlQPNQO7YRyoV6oD+qACqGFUD+UAtVD6dAA1AANQo1QEzQE5UHD0AaoGRqBOqECqEvKp+/HIuV3IjV8NnQMmgMdh0qhNdAe6HHoBLQXqoZaoH3QSSgDOgU9CO2HnoAegQ5AbdBpyA+dgc5CY9BBqB0KQiGoCxqFzkE+qA9Khc5DF6BG6BB0GNKgI1AOdBG6BB2FnoSegsalfPoBtUyRYRT6NfFqieIhFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoyFPoylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYylPYys7QfjHR29YZocxL84i3SjhoXBfF+89Eg7ZE3TxqNfOkxlVttYijWYwjXYwKoNweYD+cppzFjTOMbpjFjTGPGmMaMMY0ZYxqzwjTmgWlU/mlU/mlU/mnU+mnU82nU82nU82nU82nU82nU82lU8GlU6WnU5WnU5WlU4mlU4mlU4mnU3mnU3mn8qqZRbadRX6dRX6dRX6fNX+oh/FIvRb7EA62G5kD3QWugBCgZckNzoTSoGmqBMqG10DyoFWqDdGgdVAPNh+KgdsgL5ULroQXQQqgDKoRSoFQoHZoB5UEbIA1aBG2EOqEuaDFUC9mgTdBmKBHaAiVBS6A6qArKgJZCy6Dl0FYoC9oGbYe6IRfkgHqgHVA8VADthHZBvVAftALqh+qhAagB2g0NQo1QEzQErYRWQcNQNmSHcqBmaARySvn0w5ECqBnDOTXS7eL042pe/I5xER9ZMTgSfazC520qVz4c+froMkd0ESu2yhFbi4kuWsUWWGKrV7e8vDi2/BFb44gtWkUXO2JLRbesesTWrmILRLFFGbVA9B31597yWD6ffhTxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuALxuMKMx4+gs0+hs0+hs0+hs0+hs0+hs0+hs0+hs0+hs0+hs0+hs0+he0+he0+he0+he0+he0+h006hQ0+hs0+hQ0+hQ0+hQ0+hQ0+hQ0+hQ0+hC0+hC0+hC0+hC0+hC0+hC0+hC0+hC0+hm06hm06hm06hm06hm06hm06hm06hm06hm06hm06hm06hm06hm06hm06hm06Z3fRR661vzQ8uQqZehPC+yJy7jkW+IXpf8Cl8w6dwf/YpTMqfMr/9MQyLSgyLSgyLSgyLSgyLSgyLSgyLSgyLSgyLSgyLSgyLSswBlRgklRgklRgklRgklRgklZgDKjEsKjFkKjGcKjFkKjFkKjFkKjFkKjFkKjFkKjEHVGIAVWIAVWIAVWIAVWIAVWIAVWIAVWIAVWIOqMQcUInBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVYnBVWkOruMqxmkqYEWWBx+P9P0staWl0pSV//RCtbUVVOHpX42PePw3c9yk0X7caKeNL9ijstQ/Gx84YbT/bnygXP0ZScYHPuIXGTKW4l5X0Ux9idqO22fzi9T2RePik+pTXzIu/kF95MvGxXdtfvMQ+3+ri68YF9Pqa76qcpy6SDUuDqtP5RgXCeq8vMqQLvURm3Gx2OYXkXGmcdGvLr5mXHxWXXxd7Qqqi/80Lr6pLmYYF19AivyGcfE5dWC+RP1Ivqeu8tTVr6pPOo2Lj6mLbxoXV9TFdePilLpYYFycUxffMi5Wq4vvqwSsLr5tXPx2NFx/WV1cNS4+ov5BDuPi1xP8N8Ornq/+sr9Xh2sK1NVXbP6bm4vfNdoMv7ohMH4e6hN24+JLCX5zR/ir6uJ7xsUu9alYpo4mZyONG1cfxf5g9HTbr0e6ygnUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWLUxWKzLp5EZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy9BZy8xO/upn6UzStEjSW//5hfqwEzwp35GyTxXVHybTyvdoWeU3uqdMp6IbdF93CbG08+bd22nUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLUbDLzYLtx/bkVyNf4oHmQPdBbmgulAZVQ5nQPKgGmg95oQXQQigFSoXSoRnQImgxVAvZoCVQHZQBLYWWQcshB7QCqocaoEaoCVoJrYKyITvUDBVATmg1tAZKgJKhFmgt1Aq1QTq0DoqD2qFcaD3UARVCedAGSIM2Qp1QF7QJ2gwlQlugJKgK2gplQdug7VA35IJ6oB1QPLQT2gX1Qn1QPzQA7YYGoSFoGMqBRqR8+pkf8TkQbxpUo5H2p/kG5G/+6Ji3yJ+35UEx6iES1T/ycxvuwOfB3MHPafgpPvclgMxciumyFKW/FAWvFAWvFFNpKSaJUgSOUgSOUky6pYgfpYgfpZhqSlE2SxFNSjE9l2J6LkWBLUVJLcWEVYoCW4oCW4oCW4oCW4ooVIooVIpyW4qprRTFtxQTXSmKbymKbymmvVJMe6WIV6Uo06UIW6WIJqUIW6Uo6KWILaUo6KUIMaUIMaUo9qWYkEtR+ksxPZcixJRiIijF9FyKgFOKybrUnDLOorMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXobMXmZ19DFvgn8YW+KexBf5pbIF/2lxMCb7xNmCxCkOXf5htwMjOYesq//t/P/DO3wWMbFm2XvP/yNuBvxjpI6E76rmO6kFmx6KL1+/+Gd8/gw94fC8+1zHyUEr92+p77+Bkfwc82fFcZJCqRw5mqLqxRf3YPhj5zPnoZ1q/bXwiXZUGl1+9Gi9Ob4kOliq/+RKZFPWv+SdVcCML8RfwLj+fEFO9iQQJm0SiRJJEskSKRKpEmkS6xAyJDImZEpkSWRLZEnYJTeIeCYdEjoRTYoHENYmrEpMS1wV8xuiTC77+yJQ/B1oD7YHuh9zQXOgBaC9UDbVA+6AHof3QAagNegiqgfKhg1A7NArlQj6oEEqF8qBD0GFIg45AndDD0L3QUegRqAt6FDoGPQYdh0qhx6ET0EmoCsqATkFPQKehcsgF+aEzUAA6C41BQSgEnYP6oHroPHQBaoTKoBzoInQJKoCehJ6CxqEUKAxdhp6GnoGehZ6DnocmoBegF6Er0EvQy9ArUCaUDKVB2VA6lAA5IRuUCCVBWZAdckj59EtYSXBGvqQWSoA2QZuhJVAy5IbmQnVQGlQNtUBVUCa0DFoObYW2Qa3QdqgbckHroB6oBpoPxUPt0E4oF+qF+qAOqBBaCPVDKVA9lA4NQA3QINQINUFDUB40DG2AmqERqBMqgLqkfPqT6PoOdH0Hur4DXd+Bru9A13eg6zvQ9R3o+g50fQe6vgNd34Gu70DXd6DrO9D1Hej6DnR9B7q+A13fga7vQNd3oOs70PUd6PoOdH0Hur4DXd+Bru9A13eg6zvQ9R3o+g50fQe6vgNd34Gu70DXd6DrO9D1Hej6DnR9B7q+A13fga7vQNd3oOs70PUd6PoOdH0Hur4DXd+Bru9A13eYXf+pSNf/R+uDcZFHgr4GfQFqlPLp45HHJeaoG7APy7u5N30DVnUT9+cJ/pt3+8ZdrfGpoP8NXioZu9m++VasYS7h/eD6zDt4NL5aSblXfckK4+J76g/ZaFz8ns3/RgsxsdWW6EtGrcUW47/T+MxnsJgXW8OLrRbeuroSXUuJrdPdupayy7j4NBbjbl1CiS3FxBblomfnYsuP0dWV2GLQbHXHq/4bdhsXCQn+m8ssW4wPXFEf8KrVpgT/zfWW2OpdbK0utq4VXe+MLSvGVmKii6iLjA9sVF9668H92MJUbAkmukgTW4JpMz6Q5n+DpZhVxgf+zi+WZKxFLb1K9aNH/OYi1MexJLPW+MzrfrHuFV2a0X9O/R4fVV+sltrqVH/8H+rPafSLZRprMUafrT4z4jdXYBPU1zapj3zUuPCoP2ctFmrUmseo+qKV6nMvvc2CzC3Pbosts1orMvoc9XfN80cWglt3+t9gicZamdHvU18Z8L/BEs19xsUz6luiy6m60XYY3zJXfcscv1iyefsFmuhCXnRhzVo01avVn1Xuv7lautJoP+m/uUgarQnRxdLYSmhs3TO6Zq7PU3/WLxkXNeqHeFZ9UWzhM7Z6Hls0j65zfsNo/9z4pvnqmz6A1czY+uYctX6mvju2iu5Rvyb1kehypu5V3/9r6qtji5SxJe7YamVslTK6OqkvUN/WgHXKtz9WoC9U/9Tf8UfWplo/YXxgifpAv//m+uQPLj7qi9RXLPWLbYjocqS+WP03lKgvnmd8TbZfrEv+4HLkD65C1qo/ddAvth4yjA+M+SNnf1tfib55zj/4xfLkD65KGkPJ+Mg/+99qeTK2ERHbf7hlVTK2s/B94wPf8otthNXGB77rF8uSt64+rjcubFh0jG0M7DAuUtWnfnCR0dwguEd96uZy4+U33Dd6j71ozHxpV3N0Nfbttotiv5xYgf8JbBeZr8i7V/033vkvH/uFSAB6OtI3VE36XfXJaBCJ7rRES2C+8QVh5BEVLf5M/V3GNKwPqYsi4+L3rblb/zubGM2t96r+qmpUmaoW6lPl6j9eXVQYF2vURaVx8ccJYgze3OmILaFHb2OmsYwwjWWEaSwjTOM2xlQqlAalQ5lQFpQN2SENckA5kFPKpz+DRfzfEzcXJhIkbBKJEkkSCySSJVIkUiXSJK5JpEvMkJgpkSlxVSJLIlvCLjEpoUlcl3BI5Eg4BXz6s9bLFMyfdiYesZNpbq8/F/mS6BrhA5FfzzHoNLRfyqc/b70g3tygUfsyf6z6rtqp8UbK8ETslRJPx/vNSeke9fEXIh+P7hS8iod3vYrHfL2KJ0K9iqcpvYrzA6/iIVyv4jTBq3g2lqlSSIMuQsehvVAGdBAahfZDp6ED0HkoBB2FLkn59BdjL5+aEd3a/bq6+CvjIlsVk782LpaqyvNZ46I9wW9mqsQE/81tm+X4a5bjx7jc/GuuYMS+Jkfsa3LEviZH7GtyxL4mR+xrcpC+Jgfpa3KQviYH6WtyXL4mx+Vr4rdiYqZEpkSWRLaEXUKTuEfCIZEj4ZRYIHFN4qrEpMR1idkSHonVEnMk7pNYI+GWmCtRLdEisVZinkSrRJuELrFOokZivkS7hFciV2K9xEKJDolCiTyJDRKLJDZKdEp0SSyWqJXYJLFZYovEEok6iSqJpRLLJJZLbJXYJrFdolvCJdEjsUOiQGKnxC6JXok+iRUS/RL1EgMSDRK7JQYlGiWaJIYkVkqskhiWaJYYEfDpL1kzVlxrfmTOidM/E5nhXo58PPoioNexBvi6OUu+EvmS6DLhy1gCfhlLpKZKoXuhQqgMckFuqBwqgPKh2dAcaA20B7ofmgs9AO2FqqEWaB/0ILQfOgC1QQ9BNdBBqB0ahXxQKnQIOgxp0BGoE3oYOgo9AnVBj0LHoMeg49Dj0AnoJJQBnYKegE5DfugMFIDOQmNQEApB56A+qB46D12AGqEc6CJ0CXoSegoah8LQZehp6BnoWeg56HloAnoBehG6Ar0EvQy9AiVANigRSoKSoTQoHcqEsqBsyA45ICe0GKqFNkGboSVQHbQMWg5th1qhbVA31APNh+KhnVAv1AEthPqhAagBGoSaoCFoGNoANUMjUj79Ks6R1WKyqcVkU4vJphaTTS2mulpMPbWYemox9dRi6qnF1FOLqacWU08tpp5aTD21mHpqMfXUYuoxlQ8dhNqhUSgX8kGFUCqUBx2CDkMadATqhB6G7oWOQo9AXdCj0DHoMeg4VAo9Dp2ATkJVUAZ0CnoCOg2VQy7ID52BAtBZaAwKQiHoHNQH1UPnoQtQI1QG5UAXoUtQAfQk9BQ0DoWhy9DT0DPQs9Bz0PPQBPQC9CJ0BXoJehl6BUqAbFAilAQlQ2lQOpQJZUHZkB1yQE4pn34tUn73Grcxr9j85lvB/3Vkt/466rIvsvzjgeZA90FuaC6UBlVDmdA8qAaaD3mhBdBCKAVKhdKhGdAiaDFUC9mgJVAdlAEthZZByyEHtAKqhxqgRqgJWgmtgrIhO9QMOaECaDW0BkqAkqEWaC3UCrVBOrQOioPaoVxoPdQBFUJ50AZIgzZCnVAXtAnaDCVCW6AkqAraCmVB26DtUDfkgnqgHVA8tBPaBfVCfVA/NADthgahIWgYyoFGpHz6JA4WfitBDvRvoeSb2gRthpZAyZAbmgvVQWlQNdQCVUGZ0DJoObQV2ga1QtuhbsgFrYN6oBpoPhQPtUM7oVyoF+qDOqBCaCHUD6VA9VA6NAA1QINQI9QEDUF50DC0AWqGRqBOqADqkvLpH5BvnaDPUvvo5xP8b/AmCu/mvRPUSbi/xAGyN38ThdjG/Zu+m4LuUv91z+FIQ+xcSezZbTcPIf585J92xvhTkv3qdiBOP2OesDN/AP8aqQTHoDnQcagUWgPtgfZCLVAGdAraDx2A2qDTkB86Cx2EQtAodA7qg1Kh81AjdAjSoCPQRegSdFTKp09FfpNtxm+wQPWDTaof/E30+MxvJogfwR7cTu4x+/gvRHekW1/1mzvVH7Wpj/9i7B26qhP8N9+hy6f/EuYDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDO+YDuzlWfjnS9UeNsbLA+OTnjfY+f+Q8U+vP3ax6ra+KURaBT/+VNzmHoI4fLFB1N3YgIXb8QB1IOGjz/1DnEH418tdETxt8SH2FTSJRIkkiWSJNIlPiqkSWhEMiTiJeYoFEikSqxDWJdIkZEjMlsiXsEpMSmsR1iRwJp4BP/7XYZudfG58zimLr36Am/nqsWH5eFsvId9SpL/iNO+qRDLfnSQzqtPmzNv/P6CMZ7vxHMdx9AMNbPoDhg8gxLuQYF3KMCznGhRzjQo5xIce4kGNcyDEu5BgXcowLOcaFHONCjnEhx7iQY1zIMS7kGBdyjAs5xoUc40KOcSHHuJBjXMgxLuQYF3KMCznGhRzjQo5xIce4kGNcyDEu5BgXcowLOcaFHONCjnEhx7iQY1zIMS7kGBdyjAs5xoUc40KOcSHHuJBjXMgxLuQYF3KMCznGhRzjQo5xmTnmQ+/T2ehvE/x3Z6O7s9F7cTb6zciQjC6j9GL5pRfLBb1YjOnFckEvlhl6sRjTizuGXvOO4cPY3frDyJd4oNXQHOg+aA2UACVDbmgulAZVQy1QJrQWmge1Qm2QDq2DaqD5UBzUDnmhXGg9tABaCHVAhVAKlAqlQzOgPGgDpEGLoI1QJ9QFLYZqIRu0CdoMJUJboCRoCVQHVUEZ0FJoGbQc2gplQdug7VA35IIcUA+0A4qHCqCd0C6oF+qDVkD9UD00ADVAu6FBqBFqgoagldAqaBjKhuxQDtQMjUBOKZ/+W7EX5PTHixr2oBmUfjvyWfU6nq02f+zJaz79I5GPx9Zq1OrNPJv4Zy9FQVyKlZul5l/8Ubxm5HfEr9pEgoRNIlEiSWKBRLJEikSqRJrENYl0iRkSMyUyJa5KZElkS9glJiU0iesSDokcCaeAT/8d+YPVuzGIujE1daModaPwdKPUdGMS60YJ7kYJ7sYk1o2C3I2C3I2iZGomlAllQdmQHdKgeyAHlAM5pXz678rXpLX+pxjWJhZL1EokSGyS2CyxRCJZwi0xV6JOIk2iWqJFokoiU2KZxHKJrRLbJFoltkt0S7gkeiRqJOZLxEu0S+yUyJXoleiT6JAolFgo0S+RIlEvkS4xINEgMSjRJDEkkScxLLFBolliRKJTokCiS8Cn/16kE1uJXO9Qt6Hd0eT9W3jNvXW7q29QX/NFm/9mXI/dF8Vu3m7Z1b25sfo/I3+hurH80wS/eePXqS6iZzq/Ehlqs6Fj0BzoOFQKrYH2QCegvVALtA86CWVAp6AHof3QI9ABqA06DfmhM9BZaAw6CAWhEDQKnYN8UB+UCp2HLkCN0CHoMKRBR6CL0CXoKPQk9JSUT/993ODNSZAdzNQaaA90P+SG5kIPQHuhaqgF2gc9CO2HDkBt0ENQDZQPHYTaoVEoF/JBhVAqlAcdgg5DGnQE6oQehu6FjkKPQF3Qo9Ax6DHoOFQKPQ6dgE5CVVAGdAp6AjoNlUMuyA+dgQLQWWgMCkIh6BzUB9VD56ELUCNUBuVAF6FLUAH0JPQUNA5dhp6BnoOuQC9BYehp6FnoeWgCegF6EXoZegVKgGxQIpQEJUNpUCbkhLIgB5QOZUN2KZ9+40d8N6w3fResN12L/2m+PdatC+zRdfXYQvuPfYH9c8YHJvxvtdCunqze7n/PL7jHFtrf5BlY79sF99g6e2zl/W0X3P1GW+p/w4X3j8kbhDd/5uOt9wDqjzj4NjcDf4D05UX68iJ9eZG+vEhfXqQvL9KXF+nLi/TlRfryIn15kb68SF9epC8v0pcX6cuL9OVF+vIifXmRvrxIX16kLy/Slxfpy4v05UX68iJ9eZG+vEhfXqQvL9KXF+nLi/TlRfryIn15kb68SF9epC8v0pcX6cuL9OVF+vIifXmRvrxIX16kLy/Slxfpy4v05UX68iJ9eZG+vEhfXqQvL9KXF+nLi/TlRfryIn15kb68SF9epC8v0pcX6cuL9OVF+vIifXmRvrxIX16kLy/Slxfpy4v05UX68iJ9eZG+vEhfXqQvL9KXF+nLi/TlRfryIn15kb68SF9epC8v0pcX6cuL9OVF+vIifXmRvrxIX16kLy/Slxfpy4v05UX68iJ9eZG+vGb6+jiO+Hwj8iW1UAK0CdoMLYGSITc0F6qD0qBqqAWqgjKhZdByaCu0DWqFtkPdkAvqgWqg+VA81A7thHKhXqgP6oAKoYVQP5QC1UPp0ADUAA1CjVATNATlQcPQBqgZGoE6oQKoS8qnfyLS2aM1eQSzzAjmgBHUuhHz2/8w8u3RSSot8iWzoWPQY9Ac6DhUCq2B9kD3Q49DJ6C50APQXqgaaoH2QSehDOgU9CC0H3oCOgC1QachP/QQVAOdgQLQWWgcegoagw5C7VAQCkGj0DnIB/VBqVA9dB66ADVCh6DDkAYdgXKgi9AlqBM6Cj0JPQJ1Sfn0P8ITr66hwF9DObyGIWPqXqgQKoNckBsqhwqgfGg2NAdaA+2B7ofmQg9Ae6FqqAXaBz0I7YcOQG3QQ1ANdBBqh0YhH5QKHYIOQxp0BOqEHoaOQo9AXdCj0DHoMeg49Dh0AjoJZUCnoCeg05AfOgMFoLPQGBSEQtA5qA+qh85DF6BGKAe6CF2CnoSegsahMHQZehp6BnoWeg56HpqAXoBehK5AL0EvQ69ACZANSoSSoGQoDUqHMqEsKBuyQw7ICS2GaqFN0GZoCVQHLYOWQ9uhVmgb1A31QPOheGgn1At1QAuhfmgAaoAGoSZoCBqGNkDN0IiUT/9jY1KMrLM97x8/qP+JUkZrnN6QoPinWDl7OrK16YFWQ3Og+6A1UAKUDLmhuVAaVA21QJnQWmge1Aq1QTq0DqqB5kNxUDvkhXKh9dACaCHUARVCKVAqlA7NgPKgDZAGLYI2Qp1QF7QYqoVs0CZoM5QIbYGSoCVQHVQFZUBLoWXQcmgrlAVtg7ZD3ZALckA90A4oHiqAdkK7oF6oD1oB9UP10ADUAO2GBqFGqAkaglZCq6BhKBuyQzlQMzQCOaV8+p+95c5hdHsiuoP49q/RiW4g3rq1+JN7jc6P9NIctfU3qb7p3W0hXjQurqoHJKSpf+Zfyl1F88kef6M+dEe9bkf/ezz744fYR1Qvhvo3vPvGm28o6rvUv/519aF3/1qe6NZXbIvxHWwtlhoXX+KjS+7A3cbb8/Ke/4UFgA8kyEnAVC5UCt0LFUJlkAtyQ+VQAZQPzYbmQGugPdD90FzoAWgvVA21QPugB6H90AGoDXoIqoEOQu3QKOSDUqFD0GFIg45AndDD0FHoEagLehQ6Bj0GHYceh05AJ6EM6BT0BHQa8kNnoAB0FhqDglAIOgf1QfXQeegC1AjlQBehS9CT0FPQOBSGLkNPQ89Az0LPQc9DE9AL0IvQFegl6GXoFSgBskGJUBKUDKVB6VAmlAVlQ3bIATmhxVAttAnaDC2B6qBl0HJoO9QKbYO6oR5oPhQP7YR6oQ5oIdQPDUAN0CDUBA1Bw9AGqBkakfLpn4xMiuo4Von/bZ5S9Sn5JDYVBVvz/G/wHLZYbHg3D2R7B89he9PHr73VQ9eiAc5nhE1zjy1Of1L9IfvUCSJ1EZ1vX4+X//TXsbBh6jhUCq2B9kB7oRboJJQBnYL2QwegNug05IfOQGehg1AIGoXOQX1QKnQeaoQOQRp0BLoIXYKOSvn0v1BLWepJauXxainr07f7DGjI+MBD1nOG7h4G9b+ruzZ1h3Qmwf8j3r6pX/JF9af8pI6Dxk6B3vJOqO/H46C6XfXbSz/Gg6FvcKv2mejonRsZvX8Ze4HwnHhRBk6Z89JfRT77vPHZX7L53/ytM5812lH/G72Fppr9tvrFO2jG3lPzFePib9/mrTQPGxerovfSX1f30l3qJ5aoPndFjWL1bbe+32bsF/20cbFIfWRCdUb1/TMjlSLBqgKR9wO9bFz8h7oIGxcfVF8de5fPF9QfpC6eU78ndfGSmtzURew9PV80Lmapi9ibe75sXOTY5Gh5RlWPRPH78Ol/Hfu5fyY60uZGPvHZyCdyjJ+b7r/5cs6viLRoIlvCLpEgYZNIlEiS0CSSJVIlHBJpEukSTgGf8VuSx9QKEFILELsLEFkLEFkLEFkLELtNuaG5UB2UBlVDLVAVlAktg5ZDW6FtUCu0HeqGXNA6qAeqgeZD8VA7tBPKhXqhPqgDKoQWQv1QClQPpUMDUAM0CDVCTdAQlAcNQxugZmgE6oQKoC4pn/4qnoLwj+K3YSJBwiaRKJEkkSyRIpEqkSaRLjFDIkNipkSmRJZEtoRdQpO4R8IhkSPhlFggcU3iqsSkxHWJ2RIeidUScyTuk1gj4ZaYK1Et0SKxVmKeRKtEm4QusU6iRmK+RLuEVyJXYr3EQokOiUKJPIkNEoskNkp0SnRJLJaoldgksVlii8QSiTqJKomlEssklktsldgmsV2iW8Il0SOxQ6JAYqfELoleiT6JFRL9EvUSAxINErslBiUaJZokhiRWSqySGJZolhgR8Ol/E0s2Py8T5UmzIv4twoCGMKAhDGgIAxrCgIYwoCEMaAgDGsKAhjCgIQxoCAMawoCGMKAhDGgIAxrCgIYwoCEMaAgDGsKAhjCgIQxoCAMawoCGMKAhDGgIAxrCgIYwoCEMaAgDGsKAhjCgIQxoCAMawoCGMKAhDGgIAxrCgIYwoCEMaAgDGsKAhjCgIQxoCAMawoCGMKAhDGgIAxrCgIYwoJld/3N4fPVvqa+wSSRKJEkkS6RJZEpclciScEjEScRLLJBIkUiVuCaRLjFDYqZEtoRdYlJCk7gukSPhFPAZd49y97EZY7UZfdlUKXQvVAiVQS7IDZVDBVA+dBiaDc2B1kB7oPuhudAD0F6oGmqB9kEPQvuhNugA9BBUAx2E2qFRyAelQocgDToCdUIPQ0ehR6Au6FHoGPQYdBx6HDoBnYQyoFPQE9BpyA+dgQLQWWgMCkIh6BzUB9VD56ELUCOUA12ELkFPQk9B41AalAmFoXToRegVyAY9A12BXoIc0ASUDdkhJ5QAXYaSoeeg56EXoEQoCcqCnoaehV6W8ul/H3v3h8gya2zB/Yc+3BXbEogu9Ed3BGLLidEdgVuWkmMbALFFxNiK/a1Hg2J7A7Hl5lu3BN70jFB0ZyC65G6thUYOWbVe8N9ciL5hfGee+qOi+wJvfpootpcWW7mMnQZ7i62DW5av3+hNkt7NinZ0nyG2vXDLEveb7yrcsvgd22aIHUu6Zb8htvgd23h4i1Xw2KLqrSeXYpsS73xd/G23L3z6/1HdW9+ofrTb8F8b7cfqt2fHBsebPkhN71W95PviP9H6L9L71J+fn+CXj1f4h8jAGlZ/n/pXqbX0Dxvtp9XvNrKW//lbn9MZnyjK7RJsnC7BZt4SczPvH9+Hz0p/jz0iXe3Vpag/7e6z0u+IvbrwnOG4yP9+2qcqX7Memh6n/4ZcSVmJYxQrsbW/EocqVppj/AtYhf4Tedv3JyJpmLBJJEokSSRLpEikSqRJpEvMkMiQmCmRKZElkS1hl9Ak7pFwSORIOCUWSFyTuCoxKXFdYraER2K1xByJ+yTWSLgl5kpUS7RIrJWYJ9Eq0SahS6yTqJGYL9Eu4ZXIlVgvsVCiQ6JQIk9ig8QiiY0SnRJdEoslaiU2SWyW2CKxRKJOokpiqcQyieUSWyW2SWyX6JZwSfRI7JAokNgpsUuiV6JPYoVEv0S9xIBEg8RuiUGJRokmiSGJlRKrJIYlmiVGJI4J+PR/wkOwjALb+jn/D/UwrLd4BtY//+DRPb0ywf/eO7v3L3hBYi9Wo3qxGtWL1aherEb1YmWsF2tTvVib6sXaVC/WpnqxNtWLtalerE31Ym3KVCt0AGqDHoJqoHzoINQOjUK5kA8qhFKhPOgQdBjSoCNQJ/QwdC90FHoE6oIehY5Bj0HHoVLocegEdBKqgjKgU9AT0GmoHHJBfugMFIDOQmNQPBSEQtA5qA+qh85DF6BGqAzKgS5Cl6AC6EnoKWgcCkOXoaehZ6Bnoeeg56EJ6AXoRegK9BL0MvQKlADZoEQoCUqG0qB0KBNyQllQNmSHHFI+/V+tDVXzg9k4xpxtJvxpaxIyJ73flxP/78tZM4INErUSvRIJEt0SyRJpEukSgxJNEoslNkkskXBL1ElUSSyTWC6xXaJVYpuES6JHYr5EnES8RK5Eh0ShxEKJfokBiQaJRokhiTyJZokRiQIBn69K/7dIV4mWiDd8NcK/4y1GEvByaFMJkA1KhJKgZCgFSoXSoHRoBpQBzYQyoSwoG7JDGnQP5IByICc0G/JAq6E50H3QGsgNzYWqoRZoLTQPaoXaIB1aB9VA86F2yAvlQuuhBdBCqAMqhPKgDdB1aBG0EeqEuqDFUC20CdoMbYGWQHVQFbQUugotg5ZDW6Ft0HaoG3JBPdAOaCe0C+qF+qAVUD90DaqHBqAGaDc0CDVCTdAQtBJaBQ1Dk1AzNAIVSPn019W5e/Uq/YnIufv/uLvu/tNed7+73H5HLLf/0Kvs6hH46/23fbX9i+YLY8xB+0dq0B7Uv4S3V9qqNu/ajIvNaih9zNq5bf2G/3atJX0ZwcuJ4OVE8HIieDkRvJwIXk4ELyeClxPBy4ng5UTwciJ4ORG8nAheTgQvJ4KXE8HLieDlRPByIng5EbycCF5OBC8nQoQTU4sTE6kT5dyJoOBEfHMivjkR35yIb07ENyfimxPxzYn45kR8cyK+ORHfnIhvTsQ3J+KbE/HNifjmRHxzIr45Ed+ciG9OxDcn4psTgc2JwOZEYHMisDkR2JyIaE5ENCcimhMRzYmI5kREcyKiORHRnIhoTkQ0JyKaExHNiYjmRChzIpQ5EcqcCGVOhDInQpkTocyJUOZEKHMibjgR0ZyIaE5ENCcimhMRzYmI5kQocyKUORHKnAhlToQyJ0KZE6HMiVDmRChzIpQ5EcqciGFOxDCnGby+gmO3HxV100SiRJJEskSaRKbEVYksCYdEnES8xAKJFIlUiWsS6RIzJGZKZEvYJSYlNInrEjkSTgGfEcDklkEAWwYBbBkEsGUQwJZBAFsGAWwZBLBlEMCWQQBbBgFsGQSwZRDAlkEAWwYBbBIEsEkQwCZBAJsEAWwSBLBJEMAmQQCbBAFsEgSwSRDAJkEAmwQBbBIEsEkQwCZBAJsEAWwSBLBJEMAmQQCbBAFsEgSwSRDAJkEAmwQBrCcFsEkQwCZBAJsEAWwSBLBJEMAmQQCbBAFsEgSwSRDAJkEAmwQBbBIEsEkQwCZBAJsEAWwSBLBJEMAmQQDbAgFsCwSwLRDAtkAA2wIBbAsEsC0QwLZAANsCAWwLBLAtEMC2QADbAgFsCwSwLRDAtoCpFCgMXYaehp6BnoWeg56HJqAXoBehK9BL0MvQK1AmlAylQdlQOpQAOSEblAglQVmQHXJI+fSvYhv6tuw+q1vqP/gJb0P/31tvuOw/xhuur0WfyjsWeSrv1/HitG9Gfs61UAK0CdoMLYGSITc0F6qD0qBqqAWqgjKhZdByaCu0DWqFtkPdkAtaB/VANdB8KB5qh3ZCuVAv1Ad1QIXQQqgfSoHqoXRoAGqABqFGqAkagvKgYWgD1AyNQJ1QAdQl5dO/gR3Ej4mfuIlhiQ0StRK9EgkS3RLJEmkS6RKDEk0SiyU2SSyRcEvUSVRJLJNYLrFdolVim4RLokdivkScRLxErkSHRKHEQol+iQGJBolGiSGJPIlmiRGJAgGf/k3cTv22mNBMJEokSSRLpElkSlyVyJJwSMRJxEsskEiRSJW4JpEuMUNipkS2hF1iUkKTuC6RI+EU8Onfivxg1Zz4yzb/G0zh6jk3FxLe0Qynr1Pz5V/ICTo6Pd6c+74d+fuiNxGfxGKVqWNQo5RP/w5edNmEOagJNboJSb8J9xlNqMpNyLBNmFmaMHM2Ib83ob6ZyocOQ7OhOdAaaA90PzQXegDaC1VDLdA+6EFoP9QGHYAegmqgg1A7NAr5oFToEKRBR6BO6GHoKPQI1AU9Ch2DHoOOQ49DJ6CTUAZ0CnoCOg35oTNQADoLjUFBKASdg/qgeug8dAFqhHKgi9Al6EnoKWgcSoMyoTCUDr0IvQLZoGegK9BLkAOagLIhO+SEEqDLUDL0HPQ89AKUCCVBWdDT0LPQy1I+/bt4Tcfn5ST4efEPMWGTSJRIkkiWSJFIlUiTSJeYIZEhMVMiUyJLIlvCLqFJ3CPhkMiRcEoskLgmcVViUuK6xGwJj8RqiTkS90mskXBLzJWolmiRWCsxT6JVok1Cl1gnUSMxX6JdwiuRK7FeYqFEh0ShRJ7EBolFEhslOiW6JBZL1EpsktgssUViiUSdRJXEUollEssltkpsk9gu0S3hkuiR2CFRILFTYpdEr0SfxAqJfol6iQGJBondEoMSjRJNEkMSKyVWSQxLNEuMCPj070VqXpY6nJEQKQlxralG+69G6/HfXNqaNNqPG+208YV7VCr+Z+MDJ4xUXKiWk1YZH/h34zPlCZHyF9f6kUhNjNOPY2HrdbVapb4kzrjYZ/OLhawvGhefVJ/6knHxD+ojXzYuvmvzmwdU/ltdfMW4mFZf81W1xpUQKaFx+mGVzYtVNv/d+EixitMT1KkYtcDmskUKdZy+2OYX62kzjYt+dfE14+Kz6uLrxsWr6uI/jYtv2iJlN07/ApbYvmFcfE79ZXnqL/tVW6QYxukfUxffNC6u2CLVLU4/ZYuUxjj9nLr4lnGxWl18X91ZqItvGxe/rS6+Y1x82RaplnH6RxIidTdO/3V1EV3P0/PVX/b36sGmBerqKzb/zYMz3zXajEiFN34etkh1j9O/pL62RP1WrvnN80lfVX/g94yLXeprYuuN0VVF43bHuPqo+qLYqZpoLf+1SB/5fqSPtBifrFDfGE11/xS5hTkCzYbOQWugPmgP5IfOQsegNigVOgQ1QgehOVAIGoWOQ6XQXug8lAHthw5ApyENughdgo5K+fT/wkbizHgxwVqaA90HuaG5UBpUDWVC86AaaD7khRZAC6EUKBVKh2ZAi6DFUC1kg5ZAdVAGtBS6Ci2DlkMOaAV0DaqHGqBGaCbUBK2EVkHZkB1qhgogJ7QaSoDWQMlQC7QWaoXaIB1aB8VB7VAutB7qgAqhPGgDpEH3QNehjVAn1AVtgjZDiVAStAWqgrZCWdA2aDvUDbmgHmgHFA/thHZBvVAf1A8NQLuhQWgIGoYmoRxoRMpnxJBjqrDH6Wttamvr/ymeNfihCOMS5U5XboIsLbm4Eza1CdoMLYGSITc0F6qD0qBqqAWqgjKhZdByaCu0DWqFtkPdkAtaB/VANdB8KB5qh3ZCuVAv1Ad1QIXQQqgfSoHqoXRoAGqABqFGqAkagvKgYWgD1AyNQJ1QAdQl5dPjI10/+h9Yi0pfi3hSa46khMRbnm91Jd7/9of2oyfnb3ms1S1H9KMH53/8j7WKnRH/wcdYRc+I3/Kwqjc/K/7DPJrqDR5IFTux/xYHym/HE6lufRLVT+4BVG9/7vzmfczNJ07ZEu++NuQOeCbTJ9T33n2RyHvzRSK3+cUhie/DIan6+JjtvTc2b8+QXGd85vLdofleH5p6hhonuTY1SJMig3SP4T9Tf3x07e/zkVB3BJoNrYH6ID90FjoGtUGp0CGoEToIzYFC0Ch0HCqF9kLnoQxoP3QAOg1p0EXoEnRUyqcnR34vGcav8GrkhxbX+oD6cMq7q6lvXjrvvl/cj6GUqlniefUXvidizvvxbeJ+gm8Ol5p420+R357D46pvX8Z95FucIveFMg6O9j40utP4/9HdB8ePje8ps8XF6V+IPxhK371v4Ac/PsN20Df8kVDW+t6HDo7sG2p+6MF9o8aXjfuGf69nvEpVstapg5HmF8zmF83ml8zml83mV8zmV83m18zm183mN8zmg2bzIbP5TbP5sNn8ltn8ttl8xGw+aja/Yza/aza/Zzb/02x+32xumM3HzOYPzObjZvMJs/lDs/kjs/ljs/kTs/lTs/kzs/lfZvNJs/mU2fy52fyF2XzabD5jNn9pNn9lNn9tNp81m/9tNq+azd+Yzd+azefM5u/M5u/N5v+YzT+YzefN5h/N5jWz+YLZ/JPZ/LPZ/IvZ/KvZTJvNv5nNv5vN62bzH2bzRbP5ktl82Wy+Yjb/aTZfNZv/azZfM5uvm803zOabZvMts/m22XzHbL5rNt8zm++bzX+ZzX+bzf+LNHpcvNnGW22C1dqsNtFqk6w22WpTrDbVatOsNt1qZ1hthtXOtNpMq82y2myrtVutZrX3WK3DanOs1mm1s6zWZbW5VptntflWW2C1hVbrttoiqy222hKrvddqS622zGrLrbbCaiuttspqf85q/4fVzrZaj9XOsdr7rHau1VZb7TyrrbHa+VbrtdoFVrvQahdZ7WKrrbXaJVZbZ7VLrXaZ1S632hVWW2+1DVbbaLVNVrvSaldZbbPVrrbaNVbbYrVrrbbVatusVrfadVbbbrXrrbbDajdY7Uar7bTaLqvdZLWbrXaL1W612m1Wu91qu622x2p3WO1Oq91ltb1W22e1/VY7YLW7rXbQaoesdthqR6x2j9Xeb7UPWO1eq91ntQ9a7X6rPWC1D1ntQasdtVqf1R6y2sNWe8RqH7bao1b7iNU+arXHrPYxqz1utY9b7QmrPWm1p6z2Cas9bbV+qz1jtQGrPWu1Y1YbtNqQ1Z6z2vNWe8FqL1rtJat90mqfstpxqw1b7WWrfdpqn7HaZ632Oat93monrPYFq33Raq9Y7UtW+7LVvmK1V632mtVet9pJq/2A1f681U5Z7S9Y7S9a7S9Z7S9b7a9Y7a/+/xbsM8yJKgrjeHaz2Q4o2AsWULBh74oVQcC1d9fxZnJJhkwy48xEWRt2iVwVdcDee6ftsvTee++9996bs9n/p9/c87zPvefMx4O9sQ/2xX7YH6uxBgdgLQ7EQTgYh+BQHIbDcQSOxFE4GsfgWByH43ECTsRJOBmn4FSchtNxBs7EWTgb5+BcnIfzcQEuxEW4GJfgUlyGy3EFrsRVuBrX4Fpch+txA27ETbgZt+BW3IbbcQfuxF24G/fgXtyH+/EAHsRDeBiP4FE8hscxlF9vHuZjGAswgoVYhMVYgqVYhuXYABtiIzwBT8TG2ARPwpPxFDwVT8PT8Qw8E8/Cs7EpnoPn4nl4PjbD5ngBXogtsCVehBfjJXgpXoat8HK8Aq/Eq/BqvAavxevwerwBb8Sb8Ga8BW/F1ngb3o534J14F96NbfAebIvt8F5sjx2wI96HFXg/PoAP4kP4MD6Cj+Jj+Dg+gU/iU/g0PoOV+Cxq+BwKjKKOMZTYCeOYQAM7YxJNTGEaLbTxeXTQRQ8z+AK+iF2wCl/Cl/EVfBVfw674Or6Bb+Jb+Da+g+/ie9gNs/g+dkeFH+CH+BH2wI/xE/wUfeyJvfAz/By/wC/xK/wav8Fv8Tv8Hn/AH/En/Bl/wV/xN/wd/8A/8S/8G//Bf/E/7I19sC/2w/5YjTU4AGtxIA7CwTgEh+IwHI4jcCSOwtE4BsfiOByPE3AiTsLJOAWn4jScjjNwJs7C2TgH5+I8nI8LcCEuwsW4BJfiMlyOK3AlrsLVuAbX4jpcjxtwI27CzbgFt+I23I47cCfuwt24B/fiPtyPB/AgHsLDeASP4jE8jqFwvXmYj2EswAgWYhEWYwmWYhmWY4OwK1WRZXuGla7bgLVUkZiMZuJ+VhW6nmPoXvDVKCmlrQnT1DwrKYNcVpV6jpSabgrX9StURBd6QgblIttyPVN28SsSeZ1bhEMhFQlO0vETtarMc0Ta7WQ5qeBckVu1VdZv3IQqth3DcgyvyleF6SAhTF+ViFTUiGdyxQKR8SxfRRwZDy7Pqia2Y9kiLjypBS8a9d0HjeYe0/Sg1ajQk3UDqcYpURUNYqbQZcIyY9KpSzaUMcPTPOmkjLQwgxkS1R1CiZqsKrecICJjmis91++myo2UbTmeZgsv4fqVvipzrYyjy1whGL04uDkTN3I/r25rWNBROEk/0+p/zceSQA=='
)
DATA = pickle.loads(zlib.decompress(base64.b64decode(DATA)))
MEMO = (
b''
)
MEMO = pickle.loads(zlib.decompress(base64.b64decode(MEMO)))
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
