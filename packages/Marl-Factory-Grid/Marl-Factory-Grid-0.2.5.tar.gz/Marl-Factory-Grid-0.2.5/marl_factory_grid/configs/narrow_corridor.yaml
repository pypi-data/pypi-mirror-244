General:
  # Your Seed
  env_seed: 69
  # Individual vs global rewards
  individual_rewards: true
  # The level.txt file to load from marl_factory_grid/levels
  level_name: narrow_corridor
  # View Radius; 0 = full observatbility
  pomdp_r: 0
  # print all messages and events
  verbose: true
  # Run tests
  tests: false

Agents:
  # Agents are identified by their name 
  Wolfgang:
    # The available actions for this particular agent
    Actions:
    # Able to do nothing
    - Noop
    # Able to move in all 8 directions
    - Move8
    # Stuff the agent can observe (per 2d slice)
    #   use "Combined" if you want to merge multiple slices into one
    Observations:
    # He sees walls
    - Walls
    # he sees other agent, "karl-Heinz" in this setting would be fine, too
    - Other
    # He can see Destinations, that are assigned to him (hence the singular) 
    - Destination
    # Avaiable Spawn Positions as list
    Positions:
      - (2, 1)
      - (2, 5)
    # It is okay to collide with other agents, so that 
    #   they end up on the same position
    is_blocking_pos: true
  # See Above....
  Karl-Heinz:
    Actions:
      - Noop
      - Move8
    Observations:
      - Walls
      - Other
      - Destination
    Positions:
      - (2, 1)
      - (2, 5)
    is_blocking_pos: true

# Other noteworthy Entitites
Entities:
  # The destiantions or positional targets to reach
  Destinations:
    # Let them spawn on closed doors and agent positions
    ignore_blocking: true
    # We need a special spawn rule...
    spawnrule:
      # ...which assigns the destinations per agent
      SpawnDestinationsPerAgent:
        # we use this parameter
        coords_or_quantity:
          # to enable and assign special positions per agent
          Wolfgang:
              - (2, 1)
              - (2, 5)
          Karl-Heinz:
              - (2, 1)
              - (2, 5)
    # Whether you want to provide a numeric Position observation.
    # GlobalPositions:
    #   normalized: false

# Define the env. dynamics
Rules:
  # Utilities
  #  This rule Checks for Collision, also it assigns the (negative) reward
  WatchCollisions:
    reward: -0.1
    reward_at_done: -1
    done_at_collisions: false
  # Done Conditions
  #   Load any of the rules, to check for done conditions.
  DoneAtDestinationReach:
    reward_at_done: 1
    # We want to give rewards only, when all targets have been reached.
    condition: "all"
  DoneAtMaxStepsReached:
    max_steps: 200
