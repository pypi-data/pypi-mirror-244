# coding: utf-8

"""
    Hangar API

    This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from hangar_api.models.pinned_status import PinnedStatus
from hangar_api.models.platform_version_download import PlatformVersionDownload
from hangar_api.models.plugin_dependency import PluginDependency
from hangar_api.models.project_channel import ProjectChannel
from hangar_api.models.review_state import ReviewState
from hangar_api.models.version_stats import VersionStats
from hangar_api.models.visibility import Visibility
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Version(BaseModel):
    """
    Version
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    name: Optional[StrictStr] = None
    visibility: Optional[Visibility] = None
    description: Optional[StrictStr] = None
    stats: Optional[VersionStats] = None
    author: Optional[StrictStr] = None
    review_state: Optional[ReviewState] = Field(default=None, alias="reviewState")
    channel: Optional[ProjectChannel] = None
    pinned_status: Optional[PinnedStatus] = Field(default=None, alias="pinnedStatus")
    downloads: Optional[Dict[str, PlatformVersionDownload]] = None
    plugin_dependencies: Optional[Dict[str, List[PluginDependency]]] = Field(default=None, alias="pluginDependencies")
    platform_dependencies: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="platformDependencies")
    platform_dependencies_formatted: Optional[Dict[str, StrictStr]] = Field(default=None, alias="platformDependenciesFormatted")
    __properties: ClassVar[List[str]] = ["createdAt", "name", "visibility", "description", "stats", "author", "reviewState", "channel", "pinnedStatus", "downloads", "pluginDependencies", "platformDependencies", "platformDependenciesFormatted"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in downloads (dict)
        _field_dict = {}
        if self.downloads:
            for _key in self.downloads:
                if self.downloads[_key]:
                    _field_dict[_key] = self.downloads[_key].to_dict()
            _dict['downloads'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in plugin_dependencies (dict of array)
        _field_dict_of_array = {}
        if self.plugin_dependencies:
            for _key in self.plugin_dependencies:
                if self.plugin_dependencies[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.plugin_dependencies[_key]
                    ]
            _dict['pluginDependencies'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "name": obj.get("name"),
            "visibility": obj.get("visibility"),
            "description": obj.get("description"),
            "stats": VersionStats.from_dict(obj.get("stats")) if obj.get("stats") is not None else None,
            "author": obj.get("author"),
            "reviewState": obj.get("reviewState"),
            "channel": ProjectChannel.from_dict(obj.get("channel")) if obj.get("channel") is not None else None,
            "pinnedStatus": obj.get("pinnedStatus"),
            "downloads": dict(
                (_k, PlatformVersionDownload.from_dict(_v))
                for _k, _v in obj.get("downloads").items()
            )
            if obj.get("downloads") is not None
            else None,
            "pluginDependencies": dict(
                (_k,
                        [PluginDependency.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("pluginDependencies").items()
            ),
            "platformDependencies": obj.get("platformDependencies"),
            "platformDependenciesFormatted": obj.get("platformDependenciesFormatted")
        })
        return _obj


