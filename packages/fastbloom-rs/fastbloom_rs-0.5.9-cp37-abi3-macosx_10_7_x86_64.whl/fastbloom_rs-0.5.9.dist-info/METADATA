Metadata-Version: 2.1
Name: fastbloom_rs
Version: 0.5.9
Classifier: Programming Language :: Python
Requires-Dist: pytest <= 7.1.1; extra == 'test'
Requires-Dist: pybloom_live; extra == 'test'
Provides-Extra: test
Summary: Some fast bloom filter implemented by Rust for Python and Rust! 10x faster than pybloom!
Keywords: bloom-filter,bloom,filter,bloomfilter,probabilistic data structure,counting-bloom-filter
Home-Page: https://github.com/yankun1992/fastbloom
Author: Yan Kun
Author-email: 1939810907@qq.com
Maintainer-email: Yan Kun <1939810907@qq.com>
License:                                  Apache License
	                           Version 2.0, January 2004
	                        http://www.apache.org/licenses/
	
	   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
	
	   1. Definitions.
	
	      "License" shall mean the terms and conditions for use, reproduction,
	      and distribution as defined by Sections 1 through 9 of this document.
	
	      "Licensor" shall mean the copyright owner or entity authorized by
	      the copyright owner that is granting the License.
	
	      "Legal Entity" shall mean the union of the acting entity and all
	      other entities that control, are controlled by, or are under common
	      control with that entity. For the purposes of this definition,
	      "control" means (i) the power, direct or indirect, to cause the
	      direction or management of such entity, whether by contract or
	      otherwise, or (ii) ownership of fifty percent (50%) or more of the
	      outstanding shares, or (iii) beneficial ownership of such entity.
	
	      "You" (or "Your") shall mean an individual or Legal Entity
	      exercising permissions granted by this License.
	
	      "Source" form shall mean the preferred form for making modifications,
	      including but not limited to software source code, documentation
	      source, and configuration files.
	
	      "Object" form shall mean any form resulting from mechanical
	      transformation or translation of a Source form, including but
	      not limited to compiled object code, generated documentation,
	      and conversions to other media types.
	
	      "Work" shall mean the work of authorship, whether in Source or
	      Object form, made available under the License, as indicated by a
	      copyright notice that is included in or attached to the work
	      (an example is provided in the Appendix below).
	
	      "Derivative Works" shall mean any work, whether in Source or Object
	      form, that is based on (or derived from) the Work and for which the
	      editorial revisions, annotations, elaborations, or other modifications
	      represent, as a whole, an original work of authorship. For the purposes
	      of this License, Derivative Works shall not include works that remain
	      separable from, or merely link (or bind by name) to the interfaces of,
	      the Work and Derivative Works thereof.
	
	      "Contribution" shall mean any work of authorship, including
	      the original version of the Work and any modifications or additions
	      to that Work or Derivative Works thereof, that is intentionally
	      submitted to Licensor for inclusion in the Work by the copyright owner
	      or by an individual or Legal Entity authorized to submit on behalf of
	      the copyright owner. For the purposes of this definition, "submitted"
	      means any form of electronic, verbal, or written communication sent
	      to the Licensor or its representatives, including but not limited to
	      communication on electronic mailing lists, source code control systems,
	      and issue tracking systems that are managed by, or on behalf of, the
	      Licensor for the purpose of discussing and improving the Work, but
	      excluding communication that is conspicuously marked or otherwise
	      designated in writing by the copyright owner as "Not a Contribution."
	
	      "Contributor" shall mean Licensor and any individual or Legal Entity
	      on behalf of whom a Contribution has been received by Licensor and
	      subsequently incorporated within the Work.
	
	   2. Grant of Copyright License. Subject to the terms and conditions of
	      this License, each Contributor hereby grants to You a perpetual,
	      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
	      copyright license to reproduce, prepare Derivative Works of,
	      publicly display, publicly perform, sublicense, and distribute the
	      Work and such Derivative Works in Source or Object form.
	
	   3. Grant of Patent License. Subject to the terms and conditions of
	      this License, each Contributor hereby grants to You a perpetual,
	      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
	      (except as stated in this section) patent license to make, have made,
	      use, offer to sell, sell, import, and otherwise transfer the Work,
	      where such license applies only to those patent claims licensable
	      by such Contributor that are necessarily infringed by their
	      Contribution(s) alone or by combination of their Contribution(s)
	      with the Work to which such Contribution(s) was submitted. If You
	      institute patent litigation against any entity (including a
	      cross-claim or counterclaim in a lawsuit) alleging that the Work
	      or a Contribution incorporated within the Work constitutes direct
	      or contributory patent infringement, then any patent licenses
	      granted to You under this License for that Work shall terminate
	      as of the date such litigation is filed.
	
	   4. Redistribution. You may reproduce and distribute copies of the
	      Work or Derivative Works thereof in any medium, with or without
	      modifications, and in Source or Object form, provided that You
	      meet the following conditions:
	
	      (a) You must give any other recipients of the Work or
	          Derivative Works a copy of this License; and
	
	      (b) You must cause any modified files to carry prominent notices
	          stating that You changed the files; and
	
	      (c) You must retain, in the Source form of any Derivative Works
	          that You distribute, all copyright, patent, trademark, and
	          attribution notices from the Source form of the Work,
	          excluding those notices that do not pertain to any part of
	          the Derivative Works; and
	
	      (d) If the Work includes a "NOTICE" text file as part of its
	          distribution, then any Derivative Works that You distribute must
	          include a readable copy of the attribution notices contained
	          within such NOTICE file, excluding those notices that do not
	          pertain to any part of the Derivative Works, in at least one
	          of the following places: within a NOTICE text file distributed
	          as part of the Derivative Works; within the Source form or
	          documentation, if provided along with the Derivative Works; or,
	          within a display generated by the Derivative Works, if and
	          wherever such third-party notices normally appear. The contents
	          of the NOTICE file are for informational purposes only and
	          do not modify the License. You may add Your own attribution
	          notices within Derivative Works that You distribute, alongside
	          or as an addendum to the NOTICE text from the Work, provided
	          that such additional attribution notices cannot be construed
	          as modifying the License.
	
	      You may add Your own copyright statement to Your modifications and
	      may provide additional or different license terms and conditions
	      for use, reproduction, or distribution of Your modifications, or
	      for any such Derivative Works as a whole, provided Your use,
	      reproduction, and distribution of the Work otherwise complies with
	      the conditions stated in this License.
	
	   5. Submission of Contributions. Unless You explicitly state otherwise,
	      any Contribution intentionally submitted for inclusion in the Work
	      by You to the Licensor shall be under the terms and conditions of
	      this License, without any additional terms or conditions.
	      Notwithstanding the above, nothing herein shall supersede or modify
	      the terms of any separate license agreement you may have executed
	      with Licensor regarding such Contributions.
	
	   6. Trademarks. This License does not grant permission to use the trade
	      names, trademarks, service marks, or product names of the Licensor,
	      except as required for reasonable and customary use in describing the
	      origin of the Work and reproducing the content of the NOTICE file.
	
	   7. Disclaimer of Warranty. Unless required by applicable law or
	      agreed to in writing, Licensor provides the Work (and each
	      Contributor provides its Contributions) on an "AS IS" BASIS,
	      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
	      implied, including, without limitation, any warranties or conditions
	      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
	      PARTICULAR PURPOSE. You are solely responsible for determining the
	      appropriateness of using or redistributing the Work and assume any
	      risks associated with Your exercise of permissions under this License.
	
	   8. Limitation of Liability. In no event and under no legal theory,
	      whether in tort (including negligence), contract, or otherwise,
	      unless required by applicable law (such as deliberate and grossly
	      negligent acts) or agreed to in writing, shall any Contributor be
	      liable to You for damages, including any direct, indirect, special,
	      incidental, or consequential damages of any character arising as a
	      result of this License or out of the use or inability to use the
	      Work (including but not limited to damages for loss of goodwill,
	      work stoppage, computer failure or malfunction, or any and all
	      other commercial damages or losses), even if such Contributor
	      has been advised of the possibility of such damages.
	
	   9. Accepting Warranty or Additional Liability. While redistributing
	      the Work or Derivative Works thereof, You may choose to offer,
	      and charge a fee for, acceptance of support, warranty, indemnity,
	      or other liability obligations and/or rights consistent with this
	      License. However, in accepting such obligations, You may act only
	      on Your own behalf and on Your sole responsibility, not on behalf
	      of any other Contributor, and only if You agree to indemnify,
	      defend, and hold each Contributor harmless for any liability
	      incurred by, or claims asserted against, such Contributor by reason
	      of your accepting any such warranty or additional liability.
	
	   END OF TERMS AND CONDITIONS
	
	   APPENDIX: How to apply the Apache License to your work.
	
	      To apply the Apache License to your work, attach the following
	      boilerplate notice, with the fields enclosed by brackets "[]"
	      replaced with your own identifying information. (Don't include
	      the brackets!)  The text should be enclosed in the appropriate
	      comment syntax for the file format. We also recommend that a
	      file or class name and description of purpose be included on the
	      same "printed page" as the copyright notice for easier
	      identification within third-party archives.
	
	   Copyright 2022 Yan Kun <1939810907@qq.com>
	
	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at
	
	       http://www.apache.org/licenses/LICENSE-2.0
	
	   Unless required by applicable law or agreed to in writing, software
	   distributed under the License is distributed on an "AS IS" BASIS,
	   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	   See the License for the specific language governing permissions and
	   limitations under the License.
	
Requires-Python: >=3.7
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: documentation, https://github.com/yankun1992/fastbloom/blob/main/README.md
Project-URL: homepage, https://github.com/yankun1992/fastbloom
Project-URL: repository, https://github.com/yankun1992/fastbloom

<h1>fastbloom</h1>

[![OSCS Status](https://www.oscs1024.com/platform/badge/yankun1992/fastbloom.svg?size=small)](https://www.oscs1024.com/project/yankun1992/fastbloom?ref=badge_small)
[![docs.rs](https://img.shields.io/docsrs/fastbloom-rs/latest)](https://docs.rs/fastbloom-rs)
[![Test Rust](https://github.com/yankun1992/fastbloom/actions/workflows/test_rust.yml/badge.svg)](https://github.com/yankun1992/fastbloom/actions/workflows/test_rust.yml)
[![Test Python](https://github.com/yankun1992/fastbloom/actions/workflows/test_python.yml/badge.svg)](https://github.com/yankun1992/fastbloom/actions/workflows/test_python.yml)
[![Benchmark](https://github.com/yankun1992/fastbloom/actions/workflows/benchmark.yml/badge.svg)](https://github.com/yankun1992/fastbloom/actions/workflows/benchmark.yml)
[![Crates Latest Release](https://img.shields.io/crates/v/fastbloom-rs)](https://crates.io/crates/fastbloom-rs)
[![PyPI Latest Release](https://img.shields.io/pypi/v/fastbloom-rs)](https://pypi.org/project/fastbloom-rs/)
![Sonatype Nexus (Snapshots)](https://img.shields.io/nexus/s/io.github.yankun1992/fastbloom?server=https%3A%2F%2Fs01.oss.sonatype.org)

A fast [bloom filter](#BloomFilter) | [counting bloom filter](#countingbloomfilter) implemented by Rust for Rust and
Python!

Language: [简体中文](./docs/README.zh_cn.md)

- [setup](#setup)
    - [Python](#python)
        - [requirements](#requirements)
        - [install](#install)
    - [Rust](#rust)
    - [Java](#java)
- [Examples](#examples)
    - [BloomFilter](#bloomfilter)
        - [Python](#python-1)
        - [Rust](#rust-1)
    - [CountingBloomFilter](#countingbloomfilter)
        - [Python](#python-2)
        - [Rust](#rust-2)
- [benchmark](#benchmark)
    - [computer info](#computer-info)
    - [add one str to bloom filter](#add-one-str-to-bloom-filter)
    - [add one million to bloom filter](#add-one-million-to-bloom-filter)
    - [check one contains in bloom filter](#check-one-contains-in-bloom-filter)
    - [check one not contains in bloom filter](#check-one-not-contains-in-bloom-filter)
    - [add one str to counting bloom filter](#add-one-str-to-counting-bloom-filter)
    - [add one million to counting bloom filter](#add-one-million-to-counting-bloom-filter)

# setup

## Python

### requirements

```
Python >= 3.7
```

### install

Install the latest fastbloom version with:

```bash
pip install fastbloom-rs
```

## Rust

```toml
fastbloom-rs = "{latest}"
```

## Java
maven
```xml
<dependency>
    <groupId>io.github.yankun1992</groupId>
    <artifactId>fastbloom</artifactId>
    <version>{latest-version}</version>
</dependency>
```

# Examples

## BloomFilter

A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton Howard
Bloom in 1970, that is used to test whether an element is a member of a set. False positive
matches are possible, but false negatives are not.

**Reference**: Bloom, B. H. (1970). Space/time trade-offs in hash coding with allowable errors.
Communications of the ACM, 13(7), 422-426.
[Full text article](http://crystal.uta.edu/~mcguigan/cse6350/papers/Bloom.pdf)

### Python

basic usage

```python
from fastbloom_rs import BloomFilter

bloom = BloomFilter(100_000_000, 0.01)

bloom.add_str('hello')
bloom.add_bytes(b'world')
bloom.add_int(9527)

assert bloom.contains('hello')
assert bloom.contains(b'world')
assert bloom.contains(9527)

assert not bloom.contains('hello world')
```

build bloom filter from bytes or list

```python
from fastbloom_rs import BloomFilter

bloom = BloomFilter(100_000_000, 0.01)
bloom.add_str('hello')
assert bloom.contains('hello')

bloom2 = BloomFilter.from_bytes(bloom.get_bytes(), bloom.hashes())
assert bloom2.contains('hello')

bloom3 = BloomFilter.from_int_array(bloom.get_int_array(), bloom.hashes())
assert bloom3.contains('hello')

```

there are some bulk api for python to reduce ffi cost between python and rust

```python
bloom = BloomFilter(100_000_000, 0.01)
inserts = [1, 2, 3, 4, 5, 6, 7, 9, 18, 68, 90, 100]
checks = [1, 2, 3, 4, 5, 6, 7, 9, 18, 68, 90, 100, 190, 290, 390]
results = [True, True, True, True, True, True, True, True, True, True, True, True, False, False, False]

bloom.add_int_batch(inserts)
contains = bloom.contains_int_batch(checks)
assert contains == results

bloom.add_str_batch(list(map(lambda x: str(x), inserts)))
assert bloom.contains_str_batch(list(map(lambda x: str(x), checks))) == results

bloom.add_bytes_batch(list(map(lambda x: bytes(x), inserts)))
assert bloom.contains_bytes_batch(list(map(lambda x: bytes(x), checks))) == results
```

more examples at [py_tests](py_tests/test_bloom.py).

### Rust

```rust
use fastbloom_rs::{BloomFilter, FilterBuilder};

let mut bloom = FilterBuilder::new(100_000_000, 0.01).build_bloom_filter();

bloom.add(b"helloworld");
assert_eq!(bloom.contains(b"helloworld"), true);
assert_eq!(bloom.contains(b"helloworld!"), false);
```

more examples at [docs.rs](https://docs.rs/fastbloom-rs)

## CountingBloomFilter

A Counting Bloom filter works in a similar manner as a regular Bloom filter; however, it is
able to keep track of insertions and deletions. In a counting Bloom filter, each entry in the
Bloom filter is a small counter associated with a basic Bloom filter bit.

**Reference**: F. Bonomi, M. Mitzenmacher, R. Panigrahy, S. Singh, and G. Varghese, “An Improved
Construction for Counting Bloom Filters,” in 14th Annual European Symposium on
Algorithms, LNCS 4168, 2006

### Python

```python
from fastbloom_rs import CountingBloomFilter

cbf = CountingBloomFilter(1000_000, 0.01)
cbf.add('hello')
cbf.add('hello')
assert 'hello' in cbf
cbf.remove('hello')
assert 'hello' in cbf  # because 'hello' added twice. 
# If add same element larger than 15 times, then remove 15 times the filter will not contain the element.
cbf.remove('hello')
assert 'hello' not in cbf
```

A CountingBloomFilter has a four bits counter to save hash index, so when insert an
element repeatedly, the counter will spill over quickly. So, you can set
`enable_repeat_insert` to `False` to check whether the element has added.
if it has added, it will not add again. `enable_repeat_insert` default set to `True`.

```python
from fastbloom_rs import CountingBloomFilter

cbf = CountingBloomFilter(1000_000, 0.01, False)
cbf.add('hello')
cbf.add('hello')  # because enable_repeat_insert=False, this addition will not take effect. 
assert 'hello' in cbf
cbf.remove('hello')
assert 'hello' not in cbf 
```

more examples at [py_tests](py_tests/test_counting_bloom_filter.py).

### Rust

```rust
use fastbloom_rs::{CountingBloomFilter, FilterBuilder};

let mut builder = FilterBuilder::new(100_000, 0.01);
let mut cbf = builder.build_counting_bloom_filter();
cbf.add(b"helloworld");
assert_eq!(bloom.contains(b"helloworld"), true);
```

# benchmark

## computer info

| CPU                                    | Memory | OS         |
|----------------------------------------|--------|------------|
| AMD Ryzen 7 5800U with Radeon Graphics | 16G    | Windows 10 |

## add one str to bloom filter

Benchmark insert one str to bloom filter:

```text
bloom_add_test          time:   [41.168 ns 41.199 ns 41.233 ns]
                        change: [-0.4891% -0.0259% +0.3417%] (p = 0.91 > 0.05)
                        No change in performance detected.
Found 13 outliers among 100 measurements (13.00%)
  1 (1.00%) high mild
  12 (12.00%) high severe
```

## add one million to bloom filter

Benchmark loop insert `(1..1_000_000).map(|n| { n.to_string() })` to bloom filter:

```text
bloom_add_all_test      time:   [236.24 ms 236.86 ms 237.55 ms]
                        change: [-3.4346% -2.9050% -2.3524%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
```

## check one contains in bloom filter

```text
bloom_contains_test     time:   [42.065 ns 42.102 ns 42.156 ns]
                        change: [-0.7830% -0.5901% -0.4029%] (p = 0.00 < 0.05)
                        Change within noise threshold.
Found 15 outliers among 100 measurements (15.00%)
  1 (1.00%) low mild
  5 (5.00%) high mild
  9 (9.00%) high severe
```

## check one not contains in bloom filter

```text
bloom_not_contains_test time:   [22.695 ns 22.727 ns 22.773 ns]
                        change: [-3.1948% -2.9695% -2.7268%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 12 outliers among 100 measurements (12.00%)
  4 (4.00%) high mild
  8 (8.00%) high severe
```

## add one str to counting bloom filter

```text
counting_bloom_add_test time:   [60.822 ns 60.861 ns 60.912 ns]
                        change: [+0.2427% +0.3772% +0.5579%] (p = 0.00 < 0.05)
                        Change within noise threshold.
Found 10 outliers among 100 measurements (10.00%)
  1 (1.00%) low severe
  4 (4.00%) low mild
  1 (1.00%) high mild
  4 (4.00%) high severe
```

## add one million to counting bloom filter

Benchmark loop insert `(1..1_000_000).map(|n| { n.to_string() })` to counting bloom filter:

```text
counting_bloom_add_million_test
                        time:   [272.48 ms 272.58 ms 272.68 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
```
