[tool.poetry]
name = "drug-suggestor"
version = "0.0.0"
description = "Suggest Drugs based on symptoms or images or description"
authors = ["Vamsidhar Reddy <r.vamsireddy93@gmail.com>"]
readme = [
    "README.md"
]
packages = [
    {include = "drug_suggestor", from = "src"}
]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
pydantic = "^2.4.2"
langchain = "^0.0.345"

[tool.poetry.group.ci.dependencies]
commitizen = "^3.12.0"
pre-commit = "^3.5.0"

[tool.poetry.group.lint.dependencies]
pylint = "^3.0.2"
usort = "^1.0.7"
mypy = "^1.7.0"
ruff = "^0.1.6"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
coverage = "^7.3.2"
vulture = "^2.10"

[tool.poetry.group.dev.dependencies]
jupyterlab = "^4.0.9"

[tool.poetry.group.server.dependencies]
fastapi = "^0.104.1"
uvicorn = "^0.24.0.post1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.0"
version_provider = "commitizen"
version_scheme = "pep440"
version_files = [
    "pyproject.toml:version",
    "src/drug_suggestor/__version__.py",
]
update_changelog_on_bump = true
tag_format = "v$version"
annotated_tag = true
bump_message = "bump: version $current_version â†’ $new_version"
major_version_zero = true

[tool.commitizen.customize]
bump_pattern = '^(feat|fix|ci|docs|style|test|build|perf|refactor)'
bump_map = { feat = "MINOR", fix = "PATCH", docs = "PATCH", style = "PATCH", test = "PATCH", ci = "PATCH", build = "PATCH", perf = "PATCH", refactor = "PATCH" }

[tool.codespell]
skip = 'poetry.lock'
count = ''
quiet-level = 3

[tool.usort]
excludes=[
    "docs/",
    "__pycache__/",
]

[tool.usort.known]
first_party=["drug_suggestor"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
plugins = [
    "pydantic.mypy"
    ]

python_version = "3.9"
ignore_missing_imports = true
disallow_untyped_defs = true
show_error_codes = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disable_error_code = [
    "no-any-return",
    "no-untyped-def",
    "type-arg",
    "union-attr",
    "import-untyped",
    "attr-defined",
    "assignment",
    "index",
    "name-defined",
    "arg-type",
    'valid-type']

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-v"
testpaths = [
    "tests",
    "integration",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast (deselect with '-m \"not fast\"')",
    "normal: marks tests as normal (deselect with '-m \"not normal\"')",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.vulture]
exclude = ["docs/", "tests/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["visit_*", "do_*"]
make_whitelist = true
min_confidence = 80
paths = ["src/drug_suggestor/"]
sort_by_size = true
verbose = true
