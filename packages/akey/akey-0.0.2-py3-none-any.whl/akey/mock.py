# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_mock.ipynb.

# %% auto 0
__all__ = ['mock_adata']

# %% ../nbs/00_mock.ipynb 6
import io, itertools, warnings
from pathlib import Path
from contextlib import redirect_stderr

# %% ../nbs/00_mock.ipynb 8
from typing import Any, NamedTuple, Optional

# %% ../nbs/00_mock.ipynb 11
try: import pandas as pd, numpy as np
except ImportError: warnings.warn("Some packages are not installed")

# %% ../nbs/00_mock.ipynb 12
try: from sklearn.datasets import make_blobs
except ImportError: warnings.warn("Some packages are not installed")

# %% ../nbs/00_mock.ipynb 14
try: import anndata as ad, scanpy as sc
except ImportError: warnings.warn("Some packages are not installed")

# %% ../nbs/00_mock.ipynb 15
try: import phate
except ImportError: warnings.warn("Some packages are not installed")

# %% ../nbs/00_mock.ipynb 17
from nlit import (GENE_SYMBOL, X_PHATE)

# %% ../nbs/00_mock.ipynb 19
#| export


# %% ../nbs/00_mock.ipynb 21
def mock_adata(
    cons: tuple[str, ...] = ('wt', 'ko', ),
    days: tuple[int, ...] = (1, 5, 10, ),
    reps: tuple[int, ...] = (1, 2),    
    cells: int = 100,
    feats: int = 10,

    path: Path = Path('../data'),
    file: str = 'adata.h5ad',
    
    cluster_key: str = 'cluster',
    resolution: float = 0.5,
    seed: int = 3,
    save: bool = False,
):
    '''
    Mock AnnData object with `scanpy` and `phate` for testing.

    Parameters
    ----------
    cons : tuple, default: ('wt', 'ko', )
        Conditions of this "experiment".

    days : tuple, default: (1, 5, 10, )
        Days of this "experiment".

    reps : tuple, default: (1, 2)
        Replicates for each condition of this "experiment".

    cells : int, default: 100
        Number of cells per sample.

    feats : int, default: 10
        Number of features per cell (i.e. genes).

    path : Path, default: '../data'
        Path to save the data.

    file : str, default: 'adata.h5ad'
        The filename to save the data.

    cluster_key : str, default: 'cluster'
        Key for storing clusters.

    resolution : float, default: 0.5
        Resolution for clustering.

    seed : int, default: 3
        Random seed.

    save : bool, default: False
        Whether to save the data.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> adata
    AnnData object with n_obs x n_vars = 1200 x 10
        obs: 'barcodes', 'con', 'day', 'rep', 'cxr', 'cxt', 'sample_idx', 'cluster'
        var: 'gene_symbol'
        uns: 'dendrogram_cxr', 'leiden', 'neighbors', 'n_pcs'
        obsm: 'X_phate'
        obsp: 'connectivities', 'distances'
        layers: 'squared'

    '''
    
    np.random.seed(seed)

    genes = list(map(lambda i: f'gene_{i}', range(1, feats + 1)))
    total_conds = len(days) * len(cons)
    total_samps = total_conds * len(reps)
    total_cells = total_samps * cells

    barcodes = list(map(lambda i: f'cell_{i}', range(1, total_cells + 1)))

    resdir = Path(path)
    if save: resdir.mkdir(exist_ok=True, parents=True)
    datafile = (resdir / file)
    skip = datafile.exists()

    n_pcs = (feats / 2)
    params = dict(
        cons=cons, days=days, reps=reps, cells=cells, feats=feats, path=path, file=file,
        clstkey=cluster_key, resolution=resolution, seed=seed,
        genes=genes, total_cells=total_cells, barcodes=barcodes,
        datafile=datafile, skip=skip, n_pcs=n_pcs,
    )

    if skip:
        adata = ad.read_h5ad(datafile)
        return adata, params
    
    X, y = make_blobs(
        n_samples = total_cells,
        n_features = feats,
        centers = np.random.randn(total_samps, feats),
        random_state=seed
    )

    samp_dict = dict(list(enumerate(itertools.product(cons, days, reps))))
    cons_dict = {k: v[0] for k, v in samp_dict.items()}
    days_dict = {k: v[1] for k, v in samp_dict.items()}
    reps_dict = {k: v[2] for k, v in samp_dict.items()}
    cxrs_dict = {k: ''.join((v[0], str(v[2]))) for k, v in samp_dict.items()}
    cxts_dict = {k: ''.join((v[0], '_d', str(v[1]))) for k, v in samp_dict.items()}
    sample_idx = pd.Series(y, name='sample_idx').astype('category')

    with redirect_stderr(io.StringIO()):
        pop = phate.PHATE(3)
        phy = pop.fit_transform(X)

    df = pd.DataFrame(X, columns=genes, index=barcodes).assign(
        barcodes = barcodes,
        con=sample_idx.replace(cons_dict).values,
        day=sample_idx.replace(days_dict).values,
        rep=sample_idx.replace(reps_dict).values,
        cxr=sample_idx.replace(cxrs_dict).values,
        cxt=sample_idx.replace(cxts_dict).values,
        sample_idx=sample_idx.values,
    )

    adata = ad.AnnData(
        df.loc[:, df.columns.isin(genes)],
        obs=df.loc[:, ~df.columns.isin(genes)],
        var=pd.Series(df.columns[df.columns.isin(genes)], index=genes, name=GENE_SYMBOL).to_frame(),
        obsm={X_PHATE: phy},
    )
    adata.var_names_make_unique()

    sc.pp.neighbors(adata, n_neighbors=10)
    sc.tl.dendrogram(adata, groupby='cxr', use_rep=X_PHATE)

    sc.tl.leiden(adata, key_added=cluster_key, resolution=resolution, random_state=seed)

    adata.uns['n_pcs'] = n_pcs
    adata.layers['squared'] = adata.X ** 2

    if save: adata.write(datafile)
    return adata, params
