# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
import boto3 # type: ignore
from botocore.auth import SigV4Auth # type: ignore
from botocore.awsrequest import AWSRequest # type: ignore

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import CohereAWSEnvironment
from .resources.bedrock.client import AsyncBedrockClient, BedrockClient
from .resources.sagemaker.client import AsyncSagemakerClient, SagemakerClient


class CohereAWS:
    def __init__(
        self,
        *,
        aws_secret_key: typing.Optional[str] = None,
        aws_access_key: typing.Optional[str] = None,
        aws_region: typing.Optional[str] = None,
        aws_session_token: typing.Optional[str] = None,
        timeout: typing.Optional[float] = 60,
    ):

        self._client_wrapper = SyncClientWrapper(
            environment=get_environment(aws_region=aws_region),
            httpx_client=httpx.Client(timeout=timeout),
            headers={},
        )
        self.bedrock = BedrockClient(client_wrapper=self._client_wrapper)
        self.sagemaker = SagemakerClient(client_wrapper=self._client_wrapper)


class AsyncCohereAWS:
    def __init__(
        self,
        *,
        aws_secret_key: typing.Optional[str] = None,
        aws_access_key: typing.Optional[str] = None,
        aws_region: typing.Optional[str] = "us-east-1",
        aws_session_token: typing.Optional[str] = None,
        timeout: typing.Optional[float] = 60,
    ):
        self._client_wrapper = AsyncClientWrapper(
            environment=get_environment(aws_region=aws_region),
            httpx_client=httpx.AsyncClient(timeout=timeout),
            headers={},
        )
        self.bedrock = AsyncBedrockClient(client_wrapper=self._client_wrapper)
        self.sagemaker = AsyncSagemakerClient(client_wrapper=self._client_wrapper)


def get_environment(
        *,
        aws_region: typing.Optional[str] = "us-east-1"
        ) -> CohereAWSEnvironment:
    return CohereAWSEnvironment(
        sagemaker=f"https://api.sagemaker.{aws_region}.amazonaws.com",
        bedrock=f"https://bedrock.{aws_region}.amazonaws.com"
    )


def get_auth_headers(
    *,
    method: str,
    url: str,
    headers: httpx.Headers,
    aws_access_key: typing.Optional[str] = None,
    aws_secret_key: typing.Optional[str] = None,
    aws_session_token: typing.Optional[str] = None,
    region: typing.Optional[str] = None,
    data: typing.Optional[str] = None,
) -> typing.Dict[str, str]:
    session = boto3.Session(
        region_name=region,
        aws_access_key_id=aws_access_key,
        aws_secret_access_key=aws_secret_key,
        aws_session_token=aws_session_token,
    )
    headers = headers.copy()
    del headers["connection"]

    request = AWSRequest(method=method.upper(), url=url, headers=headers, data=data)
    credentials = session.get_credentials()

    signer = SigV4Auth(credentials, "bedrock", session.region_name)
    signer.add_auth(request)

    prepped = request.prepare()

    return dict(prepped.headers)