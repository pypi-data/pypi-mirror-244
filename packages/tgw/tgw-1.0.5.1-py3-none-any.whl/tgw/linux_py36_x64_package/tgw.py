# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, 'libtgw_python36')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('libtgw_python36')
    libtgw_python36 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('libtgw_python36', [dirname(__file__)])
        except ImportError:
            import libtgw_python36
            return libtgw_python36
        try:
            _mod = imp.load_module('libtgw_python36', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    libtgw_python36 = swig_import_helper()
    del swig_import_helper
else:
    import libtgw_python36
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return libtgw_python36.SwigPyIterator_value(self)

    def incr(self, n=1):
        return libtgw_python36.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return libtgw_python36.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return libtgw_python36.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return libtgw_python36.SwigPyIterator_equal(self, x)

    def copy(self):
        return libtgw_python36.SwigPyIterator_copy(self)

    def next(self):
        return libtgw_python36.SwigPyIterator_next(self)

    def __next__(self):
        return libtgw_python36.SwigPyIterator___next__(self)

    def previous(self):
        return libtgw_python36.SwigPyIterator_previous(self)

    def advance(self, n):
        return libtgw_python36.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return libtgw_python36.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return libtgw_python36.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return libtgw_python36.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return libtgw_python36.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return libtgw_python36.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return libtgw_python36.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = libtgw_python36.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ConstField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstField, name)
    __repr__ = _swig_repr
    kIPMaxLen = libtgw_python36.ConstField_kIPMaxLen
    kUMSItemLen = libtgw_python36.ConstField_kUMSItemLen
    kUsernameLen = libtgw_python36.ConstField_kUsernameLen
    kPasswordLen = libtgw_python36.ConstField_kPasswordLen
    kSecurityCodeLen = libtgw_python36.ConstField_kSecurityCodeLen
    kHistorySecurityCodeLen = libtgw_python36.ConstField_kHistorySecurityCodeLen
    kPushSecurityCodeLen = libtgw_python36.ConstField_kPushSecurityCodeLen
    kSecurityNameLen = libtgw_python36.ConstField_kSecurityNameLen
    kTradingPhaseCodeLen = libtgw_python36.ConstField_kTradingPhaseCodeLen
    kExChangeInstIDLen = libtgw_python36.ConstField_kExChangeInstIDLen
    kPositionLevelLen = libtgw_python36.ConstField_kPositionLevelLen
    kMDStreamIDLen = libtgw_python36.ConstField_kMDStreamIDLen
    kSecurityStatusLen = libtgw_python36.ConstField_kSecurityStatusLen
    kSecuritySymbolLen = libtgw_python36.ConstField_kSecuritySymbolLen
    kSecurityEnglishNameLen = libtgw_python36.ConstField_kSecurityEnglishNameLen
    kSecurityTypeLen = libtgw_python36.ConstField_kSecurityTypeLen
    kCurrencyLen = libtgw_python36.ConstField_kCurrencyLen
    kVolumeTradeLen = libtgw_python36.ConstField_kVolumeTradeLen
    kValueTradeLen = libtgw_python36.ConstField_kValueTradeLen
    kFutureSecurityCodeLen = libtgw_python36.ConstField_kFutureSecurityCodeLen
    kMDStreamIDMaxLen = libtgw_python36.ConstField_kMDStreamIDMaxLen
    kDataPermission = libtgw_python36.ConstField_kDataPermission
    kTokenMaxLen = libtgw_python36.ConstField_kTokenMaxLen
    kQuerySecurityCodeLen = libtgw_python36.ConstField_kQuerySecurityCodeLen
    kTradingStatusLen = libtgw_python36.ConstField_kTradingStatusLen
    kSymbolLen = libtgw_python36.ConstField_kSymbolLen
    kSecurityAbbreviationLen = libtgw_python36.ConstField_kSecurityAbbreviationLen
    kMaxTypesLen = libtgw_python36.ConstField_kMaxTypesLen
    kTypesLen = libtgw_python36.ConstField_kTypesLen
    kCodeTableSecurityStatusMaxLen = libtgw_python36.ConstField_kCodeTableSecurityStatusMaxLen
    RegularShare = libtgw_python36.ConstField_RegularShare
    kConsSecurityCodeLen = libtgw_python36.ConstField_kConsSecurityCodeLen
    kSymbolETFLen = libtgw_python36.ConstField_kSymbolETFLen
    KUnderlyingSecurityID = libtgw_python36.ConstField_KUnderlyingSecurityID
    KReserved = libtgw_python36.ConstField_KReserved
    kManagmentETFLen = libtgw_python36.ConstField_kManagmentETFLen
    KUnderlyingSecurityIDSource = libtgw_python36.ConstField_KUnderlyingSecurityIDSource
    AllCashAmount = libtgw_python36.ConstField_AllCashAmount
    AllCashAremiumRate = libtgw_python36.ConstField_AllCashAremiumRate
    AllCashDiscountRate = libtgw_python36.ConstField_AllCashDiscountRate
    DefaultMaxOBSubNum = libtgw_python36.ConstField_DefaultMaxOBSubNum
    DefaultMaxOBSnapshotSubNum = libtgw_python36.ConstField_DefaultMaxOBSnapshotSubNum
    DefaultMaxOBOrderQueueSize = libtgw_python36.ConstField_DefaultMaxOBOrderQueueSize
    DefaultMaxOBEntrySize = libtgw_python36.ConstField_DefaultMaxOBEntrySize
    DefaultMaxOBDeliverIntervalMs = libtgw_python36.ConstField_DefaultMaxOBDeliverIntervalMs
    DefaultMinOBSnapshotDeliverIntervalMs = libtgw_python36.ConstField_DefaultMinOBSnapshotDeliverIntervalMs
    kDetailLen = libtgw_python36.ConstField_kDetailLen
    kHKExOrderSnapshotLevelLen = libtgw_python36.ConstField_kHKExOrderSnapshotLevelLen

    def __init__(self):
        this = libtgw_python36.new_ConstField()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ConstField
    __del__ = lambda self: None
ConstField_swigregister = libtgw_python36.ConstField_swigregister
ConstField_swigregister(ConstField)

class MarketType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketType, name)
    __repr__ = _swig_repr
    kNone = libtgw_python36.MarketType_kNone
    kNEEQ = libtgw_python36.MarketType_kNEEQ
    kSHFE = libtgw_python36.MarketType_kSHFE
    kCFFEX = libtgw_python36.MarketType_kCFFEX
    kDCE = libtgw_python36.MarketType_kDCE
    kCZCE = libtgw_python36.MarketType_kCZCE
    kINE = libtgw_python36.MarketType_kINE
    kSSE = libtgw_python36.MarketType_kSSE
    kSZSE = libtgw_python36.MarketType_kSZSE
    kHKEx = libtgw_python36.MarketType_kHKEx
    kBK = libtgw_python36.MarketType_kBK
    kMax = libtgw_python36.MarketType_kMax

    def __init__(self):
        this = libtgw_python36.new_MarketType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MarketType
    __del__ = lambda self: None
MarketType_swigregister = libtgw_python36.MarketType_swigregister
MarketType_swigregister(MarketType)

class LogLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevel, name)
    __repr__ = _swig_repr
    kTrace = libtgw_python36.LogLevel_kTrace
    kDebug = libtgw_python36.LogLevel_kDebug
    kInfo = libtgw_python36.LogLevel_kInfo
    kWarn = libtgw_python36.LogLevel_kWarn
    kError = libtgw_python36.LogLevel_kError
    kFatal = libtgw_python36.LogLevel_kFatal

    def __init__(self):
        this = libtgw_python36.new_LogLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_LogLevel
    __del__ = lambda self: None
LogLevel_swigregister = libtgw_python36.LogLevel_swigregister
LogLevel_swigregister(LogLevel)

class EventLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventLevel, name)
    __repr__ = _swig_repr
    kInfo = libtgw_python36.EventLevel_kInfo
    kWarn = libtgw_python36.EventLevel_kWarn
    kError = libtgw_python36.EventLevel_kError

    def __init__(self):
        this = libtgw_python36.new_EventLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_EventLevel
    __del__ = lambda self: None
EventLevel_swigregister = libtgw_python36.EventLevel_swigregister
EventLevel_swigregister(EventLevel)

class ErrorCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorCode, name)
    __repr__ = _swig_repr
    kFailure = libtgw_python36.ErrorCode_kFailure
    kUnInited = libtgw_python36.ErrorCode_kUnInited
    kNullSpi = libtgw_python36.ErrorCode_kNullSpi
    kParamIllegal = libtgw_python36.ErrorCode_kParamIllegal
    kNetError = libtgw_python36.ErrorCode_kNetError
    kPermissionError = libtgw_python36.ErrorCode_kPermissionError
    kLogonFailed = libtgw_python36.ErrorCode_kLogonFailed
    kAllocateMemoryFailed = libtgw_python36.ErrorCode_kAllocateMemoryFailed
    kChannelError = libtgw_python36.ErrorCode_kChannelError
    kOverLoad = libtgw_python36.ErrorCode_kOverLoad
    kLogoned = libtgw_python36.ErrorCode_kLogoned
    kHqsError = libtgw_python36.ErrorCode_kHqsError
    kNonQueryTimePeriod = libtgw_python36.ErrorCode_kNonQueryTimePeriod
    kDbAndCodeTableNoCode = libtgw_python36.ErrorCode_kDbAndCodeTableNoCode
    kIllegalMode = libtgw_python36.ErrorCode_kIllegalMode
    kThreadBusy = libtgw_python36.ErrorCode_kThreadBusy
    kParseDataError = libtgw_python36.ErrorCode_kParseDataError
    kTimeout = libtgw_python36.ErrorCode_kTimeout
    kFlowOverLimit = libtgw_python36.ErrorCode_kFlowOverLimit
    kCodeTableCacheNotAvailable = libtgw_python36.ErrorCode_kCodeTableCacheNotAvailable
    kOverMaxSubLimit = libtgw_python36.ErrorCode_kOverMaxSubLimit
    kLostConnection = libtgw_python36.ErrorCode_kLostConnection
    kOverMaxQueryLimit = libtgw_python36.ErrorCode_kOverMaxQueryLimit
    kFunctionIdNull = libtgw_python36.ErrorCode_kFunctionIdNull
    kDataEmpty = libtgw_python36.ErrorCode_kDataEmpty
    kUserNotExist = libtgw_python36.ErrorCode_kUserNotExist
    kVerifyFailure = libtgw_python36.ErrorCode_kVerifyFailure
    kApiInterfaceUsing = libtgw_python36.ErrorCode_kApiInterfaceUsing
    kTaskIdRepeat = libtgw_python36.ErrorCode_kTaskIdRepeat
    kSuccess = libtgw_python36.ErrorCode_kSuccess

    def __init__(self):
        this = libtgw_python36.new_ErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ErrorCode
    __del__ = lambda self: None
ErrorCode_swigregister = libtgw_python36.ErrorCode_swigregister
ErrorCode_swigregister(ErrorCode)

class EventCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventCode, name)
    __repr__ = _swig_repr
    kUMSConnectSuccess = libtgw_python36.EventCode_kUMSConnectSuccess
    kUMSConnectFailed = libtgw_python36.EventCode_kUMSConnectFailed
    kUMSLogonSuccess = libtgw_python36.EventCode_kUMSLogonSuccess
    kUMSLogonFailed = libtgw_python36.EventCode_kUMSLogonFailed
    kUMSHeartbeatTimeout = libtgw_python36.EventCode_kUMSHeartbeatTimeout
    kChannelTCPInitSuccess = libtgw_python36.EventCode_kChannelTCPInitSuccess
    kChannelTCPInitFailed = libtgw_python36.EventCode_kChannelTCPInitFailed
    kChannelTCPConnectSuccess = libtgw_python36.EventCode_kChannelTCPConnectSuccess
    kChannelTCPConnectFailed = libtgw_python36.EventCode_kChannelTCPConnectFailed
    kChannelTCPLogonSuccess = libtgw_python36.EventCode_kChannelTCPLogonSuccess
    kChannelTCPLogonFailed = libtgw_python36.EventCode_kChannelTCPLogonFailed
    kChannelTCPSessionClosed = libtgw_python36.EventCode_kChannelTCPSessionClosed
    kChannelTCPHeartbeatTimeout = libtgw_python36.EventCode_kChannelTCPHeartbeatTimeout
    kOrderBookRejonConnectFailed = libtgw_python36.EventCode_kOrderBookRejonConnectFailed
    kIncompleteData = libtgw_python36.EventCode_kIncompleteData
    kDerivedDataLogonSuccess = libtgw_python36.EventCode_kDerivedDataLogonSuccess
    kDerivedDataLogonFailed = libtgw_python36.EventCode_kDerivedDataLogonFailed

    def __init__(self):
        this = libtgw_python36.new_EventCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_EventCode
    __del__ = lambda self: None
EventCode_swigregister = libtgw_python36.EventCode_swigregister
EventCode_swigregister(EventCode)

class ApiMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiMode, name)
    __repr__ = _swig_repr
    kColocationMode = libtgw_python36.ApiMode_kColocationMode
    kInternetMode = libtgw_python36.ApiMode_kInternetMode

    def __init__(self):
        this = libtgw_python36.new_ApiMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ApiMode
    __del__ = lambda self: None
ApiMode_swigregister = libtgw_python36.ApiMode_swigregister
ApiMode_swigregister(ApiMode)

class ColocatChannelMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColocatChannelMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColocatChannelMode, name)
    __repr__ = _swig_repr
    kTCP = libtgw_python36.ColocatChannelMode_kTCP
    kQTCP = libtgw_python36.ColocatChannelMode_kQTCP
    kRTCP = libtgw_python36.ColocatChannelMode_kRTCP

    def __init__(self):
        this = libtgw_python36.new_ColocatChannelMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ColocatChannelMode
    __del__ = lambda self: None
ColocatChannelMode_swigregister = libtgw_python36.ColocatChannelMode_swigregister
ColocatChannelMode_swigregister(ColocatChannelMode)

class SubscribeDataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeDataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeDataType, name)
    __repr__ = _swig_repr
    kNone = libtgw_python36.SubscribeDataType_kNone
    k1MinKline = libtgw_python36.SubscribeDataType_k1MinKline
    k3MinKline = libtgw_python36.SubscribeDataType_k3MinKline
    k5MinKline = libtgw_python36.SubscribeDataType_k5MinKline
    k10MinKline = libtgw_python36.SubscribeDataType_k10MinKline
    k15MinKline = libtgw_python36.SubscribeDataType_k15MinKline
    k30MinKline = libtgw_python36.SubscribeDataType_k30MinKline
    k60MinKline = libtgw_python36.SubscribeDataType_k60MinKline
    k120MinKline = libtgw_python36.SubscribeDataType_k120MinKline
    kSnapshotDerive = libtgw_python36.SubscribeDataType_kSnapshotDerive
    kSnapshot = libtgw_python36.SubscribeDataType_kSnapshot
    kOptionSnapshot = libtgw_python36.SubscribeDataType_kOptionSnapshot
    kHKTSnapshot = libtgw_python36.SubscribeDataType_kHKTSnapshot
    kIndexSnapshot = libtgw_python36.SubscribeDataType_kIndexSnapshot
    kAfterHourFixedPriceSnapshot = libtgw_python36.SubscribeDataType_kAfterHourFixedPriceSnapshot
    kCSIIndexSnapshot = libtgw_python36.SubscribeDataType_kCSIIndexSnapshot
    kCnIndexSnapshot = libtgw_python36.SubscribeDataType_kCnIndexSnapshot
    kHKTRealtimeLimit = libtgw_python36.SubscribeDataType_kHKTRealtimeLimit
    kHKTProductStatus = libtgw_python36.SubscribeDataType_kHKTProductStatus
    kHKTVCM = libtgw_python36.SubscribeDataType_kHKTVCM
    kFutureSnapshot = libtgw_python36.SubscribeDataType_kFutureSnapshot

    def __init__(self):
        this = libtgw_python36.new_SubscribeDataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeDataType
    __del__ = lambda self: None
SubscribeDataType_swigregister = libtgw_python36.SubscribeDataType_swigregister
SubscribeDataType_swigregister(SubscribeDataType)

class MDDatatype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDDatatype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDDatatype, name)
    __repr__ = _swig_repr
    k1KLine = libtgw_python36.MDDatatype_k1KLine
    k3KLine = libtgw_python36.MDDatatype_k3KLine
    k5KLine = libtgw_python36.MDDatatype_k5KLine
    k10KLine = libtgw_python36.MDDatatype_k10KLine
    k15KLine = libtgw_python36.MDDatatype_k15KLine
    k30KLine = libtgw_python36.MDDatatype_k30KLine
    k60KLine = libtgw_python36.MDDatatype_k60KLine
    k120KLine = libtgw_python36.MDDatatype_k120KLine
    kDayKline = libtgw_python36.MDDatatype_kDayKline
    kWeekKline = libtgw_python36.MDDatatype_kWeekKline
    kMonthKline = libtgw_python36.MDDatatype_kMonthKline
    kSeasonKline = libtgw_python36.MDDatatype_kSeasonKline
    kYearKline = libtgw_python36.MDDatatype_kYearKline
    kTickExecution = libtgw_python36.MDDatatype_kTickExecution
    kSnapshot = libtgw_python36.MDDatatype_kSnapshot

    def __init__(self):
        this = libtgw_python36.new_MDDatatype()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDDatatype
    __del__ = lambda self: None
MDDatatype_swigregister = libtgw_python36.MDDatatype_swigregister
MDDatatype_swigregister(MDDatatype)

class VarietyCategory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarietyCategory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarietyCategory, name)
    __repr__ = _swig_repr
    kNone = libtgw_python36.VarietyCategory_kNone
    kStock = libtgw_python36.VarietyCategory_kStock
    kFund = libtgw_python36.VarietyCategory_kFund
    kBond = libtgw_python36.VarietyCategory_kBond
    kOption = libtgw_python36.VarietyCategory_kOption
    kIndex = libtgw_python36.VarietyCategory_kIndex
    kHKT = libtgw_python36.VarietyCategory_kHKT
    kFutureOption = libtgw_python36.VarietyCategory_kFutureOption
    kCFETSRMB = libtgw_python36.VarietyCategory_kCFETSRMB
    kHKEx = libtgw_python36.VarietyCategory_kHKEx
    kOthers = libtgw_python36.VarietyCategory_kOthers

    def __init__(self):
        this = libtgw_python36.new_VarietyCategory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_VarietyCategory
    __del__ = lambda self: None
VarietyCategory_swigregister = libtgw_python36.VarietyCategory_swigregister
VarietyCategory_swigregister(VarietyCategory)

class HistoryTaskStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryTaskStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryTaskStatus, name)
    __repr__ = _swig_repr
    kSuccess = libtgw_python36.HistoryTaskStatus_kSuccess
    kFailed = libtgw_python36.HistoryTaskStatus_kFailed
    kTaskCancel = libtgw_python36.HistoryTaskStatus_kTaskCancel
    kTaskWaiting = libtgw_python36.HistoryTaskStatus_kTaskWaiting
    kTaskTimeOut = libtgw_python36.HistoryTaskStatus_kTaskTimeOut

    def __init__(self):
        this = libtgw_python36.new_HistoryTaskStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_HistoryTaskStatus
    __del__ = lambda self: None
HistoryTaskStatus_swigregister = libtgw_python36.HistoryTaskStatus_swigregister
HistoryTaskStatus_swigregister(HistoryTaskStatus)

class ColocationDataPermission(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColocationDataPermission, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColocationDataPermission, name)
    __repr__ = _swig_repr
    k1MinKline = libtgw_python36.ColocationDataPermission_k1MinKline
    k3MinKline = libtgw_python36.ColocationDataPermission_k3MinKline
    k5MinKline = libtgw_python36.ColocationDataPermission_k5MinKline
    k10MinKline = libtgw_python36.ColocationDataPermission_k10MinKline
    k15MinKline = libtgw_python36.ColocationDataPermission_k15MinKline
    k30MinKline = libtgw_python36.ColocationDataPermission_k30MinKline
    k60MinKline = libtgw_python36.ColocationDataPermission_k60MinKline
    k120MinKline = libtgw_python36.ColocationDataPermission_k120MinKline
    kDayKline = libtgw_python36.ColocationDataPermission_kDayKline
    kWeekKline = libtgw_python36.ColocationDataPermission_kWeekKline
    kMonthKline = libtgw_python36.ColocationDataPermission_kMonthKline
    kSeasonKline = libtgw_python36.ColocationDataPermission_kSeasonKline
    kYearKline = libtgw_python36.ColocationDataPermission_kYearKline
    kSnapshotDerive = libtgw_python36.ColocationDataPermission_kSnapshotDerive
    kTick = libtgw_python36.ColocationDataPermission_kTick
    kOrderQueue = libtgw_python36.ColocationDataPermission_kOrderQueue
    kStockSnapshotL2 = libtgw_python36.ColocationDataPermission_kStockSnapshotL2
    kIndexSnapshotL2 = libtgw_python36.ColocationDataPermission_kIndexSnapshotL2
    kOptionSnapshot = libtgw_python36.ColocationDataPermission_kOptionSnapshot
    kHKTSnapshot = libtgw_python36.ColocationDataPermission_kHKTSnapshot
    kFutureTickL1 = libtgw_python36.ColocationDataPermission_kFutureTickL1
    kFutureTickL2 = libtgw_python36.ColocationDataPermission_kFutureTickL2
    kCodeTable = libtgw_python36.ColocationDataPermission_kCodeTable
    kSecurityInfo = libtgw_python36.ColocationDataPermission_kSecurityInfo
    kExFactorTable = libtgw_python36.ColocationDataPermission_kExFactorTable
    kStockSnapshotL1 = libtgw_python36.ColocationDataPermission_kStockSnapshotL1
    kIndexSnapshotL1 = libtgw_python36.ColocationDataPermission_kIndexSnapshotL1

    def __init__(self):
        this = libtgw_python36.new_ColocationDataPermission()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ColocationDataPermission
    __del__ = lambda self: None
ColocationDataPermission_swigregister = libtgw_python36.ColocationDataPermission_swigregister
ColocationDataPermission_swigregister(ColocationDataPermission)

class InternetDataPermission(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternetDataPermission, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternetDataPermission, name)
    __repr__ = _swig_repr
    kSnapshotDerive = libtgw_python36.InternetDataPermission_kSnapshotDerive
    kStockSnapshot = libtgw_python36.InternetDataPermission_kStockSnapshot
    kIndexSnapshot = libtgw_python36.InternetDataPermission_kIndexSnapshot
    kHKTSnapshot = libtgw_python36.InternetDataPermission_kHKTSnapshot
    kOptionSnapshot = libtgw_python36.InternetDataPermission_kOptionSnapshot
    kFutureSnapshot = libtgw_python36.InternetDataPermission_kFutureSnapshot
    kCSIIndexSnapshot = libtgw_python36.InternetDataPermission_kCSIIndexSnapshot
    kAfterHourFixedPriceSnapshot = libtgw_python36.InternetDataPermission_kAfterHourFixedPriceSnapshot
    k1MinKline = libtgw_python36.InternetDataPermission_k1MinKline
    k3MinKline = libtgw_python36.InternetDataPermission_k3MinKline
    k5MinKline = libtgw_python36.InternetDataPermission_k5MinKline
    k10MinKline = libtgw_python36.InternetDataPermission_k10MinKline
    k15MinKline = libtgw_python36.InternetDataPermission_k15MinKline
    k30MinKline = libtgw_python36.InternetDataPermission_k30MinKline
    k60MinKline = libtgw_python36.InternetDataPermission_k60MinKline
    k120MinKline = libtgw_python36.InternetDataPermission_k120MinKline
    kDayKline = libtgw_python36.InternetDataPermission_kDayKline
    kWeekKline = libtgw_python36.InternetDataPermission_kWeekKline
    kMonthKline = libtgw_python36.InternetDataPermission_kMonthKline
    kSeasonKline = libtgw_python36.InternetDataPermission_kSeasonKline
    kYearKline = libtgw_python36.InternetDataPermission_kYearKline
    kHKExSnapshot = libtgw_python36.InternetDataPermission_kHKExSnapshot
    kHKExTickExcution = libtgw_python36.InternetDataPermission_kHKExTickExcution
    kExFactor = libtgw_python36.InternetDataPermission_kExFactor
    kCodeTable = libtgw_python36.InternetDataPermission_kCodeTable
    kSecurityInfo = libtgw_python36.InternetDataPermission_kSecurityInfo

    def __init__(self):
        this = libtgw_python36.new_InternetDataPermission()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_InternetDataPermission
    __del__ = lambda self: None
InternetDataPermission_swigregister = libtgw_python36.InternetDataPermission_swigregister
InternetDataPermission_swigregister(InternetDataPermission)

class SubscribeOrderBookDataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeOrderBookDataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeOrderBookDataType, name)
    __repr__ = _swig_repr
    kNone = libtgw_python36.SubscribeOrderBookDataType_kNone
    kOrderBook = libtgw_python36.SubscribeOrderBookDataType_kOrderBook
    kOrderBookSnapshot = libtgw_python36.SubscribeOrderBookDataType_kOrderBookSnapshot

    def __init__(self):
        this = libtgw_python36.new_SubscribeOrderBookDataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeOrderBookDataType
    __del__ = lambda self: None
SubscribeOrderBookDataType_swigregister = libtgw_python36.SubscribeOrderBookDataType_swigregister
SubscribeOrderBookDataType_swigregister(SubscribeOrderBookDataType)

class OrderBookType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderBookType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderBookType, name)
    __repr__ = _swig_repr
    kNone = libtgw_python36.OrderBookType_kNone
    kServerOrderBook = libtgw_python36.OrderBookType_kServerOrderBook

    def __init__(self):
        this = libtgw_python36.new_OrderBookType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_OrderBookType
    __del__ = lambda self: None
OrderBookType_swigregister = libtgw_python36.OrderBookType_swigregister
OrderBookType_swigregister(OrderBookType)

class SubscribeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeType, name)
    __repr__ = _swig_repr
    kSet = libtgw_python36.SubscribeType_kSet
    kAdd = libtgw_python36.SubscribeType_kAdd
    kDel = libtgw_python36.SubscribeType_kDel
    kCancelAll = libtgw_python36.SubscribeType_kCancelAll

    def __init__(self):
        this = libtgw_python36.new_SubscribeType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeType
    __del__ = lambda self: None
SubscribeType_swigregister = libtgw_python36.SubscribeType_swigregister
SubscribeType_swigregister(SubscribeType)

class SubscribeDerivedDataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeDerivedDataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeDerivedDataType, name)
    __repr__ = _swig_repr
    kOrderBook = libtgw_python36.SubscribeDerivedDataType_kOrderBook
    kOrderBookSnapshot = libtgw_python36.SubscribeDerivedDataType_kOrderBookSnapshot

    def __init__(self):
        this = libtgw_python36.new_SubscribeDerivedDataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeDerivedDataType
    __del__ = lambda self: None
SubscribeDerivedDataType_swigregister = libtgw_python36.SubscribeDerivedDataType_swigregister
SubscribeDerivedDataType_swigregister(SubscribeDerivedDataType)

class ColocaCfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColocaCfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColocaCfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel_mode"] = libtgw_python36.ColocaCfg_channel_mode_set
    __swig_getmethods__["channel_mode"] = libtgw_python36.ColocaCfg_channel_mode_get
    if _newclass:
        channel_mode = _swig_property(libtgw_python36.ColocaCfg_channel_mode_get, libtgw_python36.ColocaCfg_channel_mode_set)
    __swig_setmethods__["qtcp_channel_thread"] = libtgw_python36.ColocaCfg_qtcp_channel_thread_set
    __swig_getmethods__["qtcp_channel_thread"] = libtgw_python36.ColocaCfg_qtcp_channel_thread_get
    if _newclass:
        qtcp_channel_thread = _swig_property(libtgw_python36.ColocaCfg_qtcp_channel_thread_get, libtgw_python36.ColocaCfg_qtcp_channel_thread_set)
    __swig_setmethods__["qtcp_req_time_out"] = libtgw_python36.ColocaCfg_qtcp_req_time_out_set
    __swig_getmethods__["qtcp_req_time_out"] = libtgw_python36.ColocaCfg_qtcp_req_time_out_get
    if _newclass:
        qtcp_req_time_out = _swig_property(libtgw_python36.ColocaCfg_qtcp_req_time_out_get, libtgw_python36.ColocaCfg_qtcp_req_time_out_set)
    __swig_setmethods__["qtcp_max_req_cnt"] = libtgw_python36.ColocaCfg_qtcp_max_req_cnt_set
    __swig_getmethods__["qtcp_max_req_cnt"] = libtgw_python36.ColocaCfg_qtcp_max_req_cnt_get
    if _newclass:
        qtcp_max_req_cnt = _swig_property(libtgw_python36.ColocaCfg_qtcp_max_req_cnt_get, libtgw_python36.ColocaCfg_qtcp_max_req_cnt_set)
    __swig_setmethods__["enable_order_book"] = libtgw_python36.ColocaCfg_enable_order_book_set
    __swig_getmethods__["enable_order_book"] = libtgw_python36.ColocaCfg_enable_order_book_get
    if _newclass:
        enable_order_book = _swig_property(libtgw_python36.ColocaCfg_enable_order_book_get, libtgw_python36.ColocaCfg_enable_order_book_set)
    __swig_setmethods__["entry_size"] = libtgw_python36.ColocaCfg_entry_size_set
    __swig_getmethods__["entry_size"] = libtgw_python36.ColocaCfg_entry_size_get
    if _newclass:
        entry_size = _swig_property(libtgw_python36.ColocaCfg_entry_size_get, libtgw_python36.ColocaCfg_entry_size_set)
    __swig_setmethods__["order_queue_size"] = libtgw_python36.ColocaCfg_order_queue_size_set
    __swig_getmethods__["order_queue_size"] = libtgw_python36.ColocaCfg_order_queue_size_get
    if _newclass:
        order_queue_size = _swig_property(libtgw_python36.ColocaCfg_order_queue_size_get, libtgw_python36.ColocaCfg_order_queue_size_set)
    __swig_setmethods__["order_book_deliver_interval_microsecond"] = libtgw_python36.ColocaCfg_order_book_deliver_interval_microsecond_set
    __swig_getmethods__["order_book_deliver_interval_microsecond"] = libtgw_python36.ColocaCfg_order_book_deliver_interval_microsecond_get
    if _newclass:
        order_book_deliver_interval_microsecond = _swig_property(libtgw_python36.ColocaCfg_order_book_deliver_interval_microsecond_get, libtgw_python36.ColocaCfg_order_book_deliver_interval_microsecond_set)

    def __init__(self):
        this = libtgw_python36.new_ColocaCfg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ColocaCfg
    __del__ = lambda self: None
ColocaCfg_swigregister = libtgw_python36.ColocaCfg_swigregister
ColocaCfg_swigregister(ColocaCfg)

class Cfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["server_vip"] = libtgw_python36.Cfg_server_vip_set
    __swig_getmethods__["server_vip"] = libtgw_python36.Cfg_server_vip_get
    if _newclass:
        server_vip = _swig_property(libtgw_python36.Cfg_server_vip_get, libtgw_python36.Cfg_server_vip_set)
    __swig_setmethods__["server_port"] = libtgw_python36.Cfg_server_port_set
    __swig_getmethods__["server_port"] = libtgw_python36.Cfg_server_port_get
    if _newclass:
        server_port = _swig_property(libtgw_python36.Cfg_server_port_get, libtgw_python36.Cfg_server_port_set)
    __swig_setmethods__["username"] = libtgw_python36.Cfg_username_set
    __swig_getmethods__["username"] = libtgw_python36.Cfg_username_get
    if _newclass:
        username = _swig_property(libtgw_python36.Cfg_username_get, libtgw_python36.Cfg_username_set)
    __swig_setmethods__["password"] = libtgw_python36.Cfg_password_set
    __swig_getmethods__["password"] = libtgw_python36.Cfg_password_get
    if _newclass:
        password = _swig_property(libtgw_python36.Cfg_password_get, libtgw_python36.Cfg_password_set)
    __swig_setmethods__["coloca_cfg"] = libtgw_python36.Cfg_coloca_cfg_set
    __swig_getmethods__["coloca_cfg"] = libtgw_python36.Cfg_coloca_cfg_get
    if _newclass:
        coloca_cfg = _swig_property(libtgw_python36.Cfg_coloca_cfg_get, libtgw_python36.Cfg_coloca_cfg_set)

    def __init__(self):
        this = libtgw_python36.new_Cfg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_Cfg
    __del__ = lambda self: None
Cfg_swigregister = libtgw_python36.Cfg_swigregister
Cfg_swigregister(Cfg)

class UpdatePassWordReq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdatePassWordReq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UpdatePassWordReq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["username"] = libtgw_python36.UpdatePassWordReq_username_set
    __swig_getmethods__["username"] = libtgw_python36.UpdatePassWordReq_username_get
    if _newclass:
        username = _swig_property(libtgw_python36.UpdatePassWordReq_username_get, libtgw_python36.UpdatePassWordReq_username_set)
    __swig_setmethods__["old_password"] = libtgw_python36.UpdatePassWordReq_old_password_set
    __swig_getmethods__["old_password"] = libtgw_python36.UpdatePassWordReq_old_password_get
    if _newclass:
        old_password = _swig_property(libtgw_python36.UpdatePassWordReq_old_password_get, libtgw_python36.UpdatePassWordReq_old_password_set)
    __swig_setmethods__["new_password"] = libtgw_python36.UpdatePassWordReq_new_password_set
    __swig_getmethods__["new_password"] = libtgw_python36.UpdatePassWordReq_new_password_get
    if _newclass:
        new_password = _swig_property(libtgw_python36.UpdatePassWordReq_new_password_get, libtgw_python36.UpdatePassWordReq_new_password_set)

    def __init__(self):
        this = libtgw_python36.new_UpdatePassWordReq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_UpdatePassWordReq
    __del__ = lambda self: None
UpdatePassWordReq_swigregister = libtgw_python36.UpdatePassWordReq_swigregister
UpdatePassWordReq_swigregister(UpdatePassWordReq)

class SubscribeItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python36.SubscribeItem_market_set
    __swig_getmethods__["market"] = libtgw_python36.SubscribeItem_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.SubscribeItem_market_get, libtgw_python36.SubscribeItem_market_set)
    __swig_setmethods__["flag"] = libtgw_python36.SubscribeItem_flag_set
    __swig_getmethods__["flag"] = libtgw_python36.SubscribeItem_flag_get
    if _newclass:
        flag = _swig_property(libtgw_python36.SubscribeItem_flag_get, libtgw_python36.SubscribeItem_flag_set)
    __swig_setmethods__["security_code"] = libtgw_python36.SubscribeItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.SubscribeItem_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.SubscribeItem_security_code_get, libtgw_python36.SubscribeItem_security_code_set)
    __swig_setmethods__["category_type"] = libtgw_python36.SubscribeItem_category_type_set
    __swig_getmethods__["category_type"] = libtgw_python36.SubscribeItem_category_type_get
    if _newclass:
        category_type = _swig_property(libtgw_python36.SubscribeItem_category_type_get, libtgw_python36.SubscribeItem_category_type_set)

    def __init__(self):
        this = libtgw_python36.new_SubscribeItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeItem
    __del__ = lambda self: None
SubscribeItem_swigregister = libtgw_python36.SubscribeItem_swigregister
SubscribeItem_swigregister(SubscribeItem)

class SubFactorItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubFactorItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubFactorItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["factor_type"] = libtgw_python36.SubFactorItem_factor_type_set
    __swig_getmethods__["factor_type"] = libtgw_python36.SubFactorItem_factor_type_get
    if _newclass:
        factor_type = _swig_property(libtgw_python36.SubFactorItem_factor_type_get, libtgw_python36.SubFactorItem_factor_type_set)
    __swig_setmethods__["factor_sub_type"] = libtgw_python36.SubFactorItem_factor_sub_type_set
    __swig_getmethods__["factor_sub_type"] = libtgw_python36.SubFactorItem_factor_sub_type_get
    if _newclass:
        factor_sub_type = _swig_property(libtgw_python36.SubFactorItem_factor_sub_type_get, libtgw_python36.SubFactorItem_factor_sub_type_set)
    __swig_setmethods__["factor_name"] = libtgw_python36.SubFactorItem_factor_name_set
    __swig_getmethods__["factor_name"] = libtgw_python36.SubFactorItem_factor_name_get
    if _newclass:
        factor_name = _swig_property(libtgw_python36.SubFactorItem_factor_name_get, libtgw_python36.SubFactorItem_factor_name_set)
    __swig_setmethods__["security_code"] = libtgw_python36.SubFactorItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.SubFactorItem_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.SubFactorItem_security_code_get, libtgw_python36.SubFactorItem_security_code_set)
    __swig_setmethods__["market"] = libtgw_python36.SubFactorItem_market_set
    __swig_getmethods__["market"] = libtgw_python36.SubFactorItem_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.SubFactorItem_market_get, libtgw_python36.SubFactorItem_market_set)
    __swig_setmethods__["category"] = libtgw_python36.SubFactorItem_category_set
    __swig_getmethods__["category"] = libtgw_python36.SubFactorItem_category_get
    if _newclass:
        category = _swig_property(libtgw_python36.SubFactorItem_category_get, libtgw_python36.SubFactorItem_category_set)

    def __init__(self):
        this = libtgw_python36.new_SubFactorItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubFactorItem
    __del__ = lambda self: None
SubFactorItem_swigregister = libtgw_python36.SubFactorItem_swigregister
SubFactorItem_swigregister(SubFactorItem)

class SubscribeOrderBookItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeOrderBookItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeOrderBookItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python36.SubscribeOrderBookItem_market_set
    __swig_getmethods__["market"] = libtgw_python36.SubscribeOrderBookItem_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.SubscribeOrderBookItem_market_get, libtgw_python36.SubscribeOrderBookItem_market_set)
    __swig_setmethods__["flag"] = libtgw_python36.SubscribeOrderBookItem_flag_set
    __swig_getmethods__["flag"] = libtgw_python36.SubscribeOrderBookItem_flag_get
    if _newclass:
        flag = _swig_property(libtgw_python36.SubscribeOrderBookItem_flag_get, libtgw_python36.SubscribeOrderBookItem_flag_set)
    __swig_setmethods__["security_code"] = libtgw_python36.SubscribeOrderBookItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.SubscribeOrderBookItem_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.SubscribeOrderBookItem_security_code_get, libtgw_python36.SubscribeOrderBookItem_security_code_set)

    def __init__(self):
        this = libtgw_python36.new_SubscribeOrderBookItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeOrderBookItem
    __del__ = lambda self: None
SubscribeOrderBookItem_swigregister = libtgw_python36.SubscribeOrderBookItem_swigregister
SubscribeOrderBookItem_swigregister(SubscribeOrderBookItem)

class SubscribeDerivedDataItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeDerivedDataItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeDerivedDataItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python36.SubscribeDerivedDataItem_market_set
    __swig_getmethods__["market"] = libtgw_python36.SubscribeDerivedDataItem_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.SubscribeDerivedDataItem_market_get, libtgw_python36.SubscribeDerivedDataItem_market_set)
    __swig_setmethods__["security_code"] = libtgw_python36.SubscribeDerivedDataItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.SubscribeDerivedDataItem_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.SubscribeDerivedDataItem_security_code_get, libtgw_python36.SubscribeDerivedDataItem_security_code_set)

    def __init__(self):
        this = libtgw_python36.new_SubscribeDerivedDataItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubscribeDerivedDataItem
    __del__ = lambda self: None
SubscribeDerivedDataItem_swigregister = libtgw_python36.SubscribeDerivedDataItem_swigregister
SubscribeDerivedDataItem_swigregister(SubscribeDerivedDataItem)

class ReqKline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqKline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqKline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.ReqKline_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.ReqKline_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.ReqKline_security_code_get, libtgw_python36.ReqKline_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python36.ReqKline_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.ReqKline_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.ReqKline_market_type_get, libtgw_python36.ReqKline_market_type_set)
    __swig_setmethods__["cq_flag"] = libtgw_python36.ReqKline_cq_flag_set
    __swig_getmethods__["cq_flag"] = libtgw_python36.ReqKline_cq_flag_get
    if _newclass:
        cq_flag = _swig_property(libtgw_python36.ReqKline_cq_flag_get, libtgw_python36.ReqKline_cq_flag_set)
    __swig_setmethods__["cq_date"] = libtgw_python36.ReqKline_cq_date_set
    __swig_getmethods__["cq_date"] = libtgw_python36.ReqKline_cq_date_get
    if _newclass:
        cq_date = _swig_property(libtgw_python36.ReqKline_cq_date_get, libtgw_python36.ReqKline_cq_date_set)
    __swig_setmethods__["qj_flag"] = libtgw_python36.ReqKline_qj_flag_set
    __swig_getmethods__["qj_flag"] = libtgw_python36.ReqKline_qj_flag_get
    if _newclass:
        qj_flag = _swig_property(libtgw_python36.ReqKline_qj_flag_get, libtgw_python36.ReqKline_qj_flag_set)
    __swig_setmethods__["cyc_type"] = libtgw_python36.ReqKline_cyc_type_set
    __swig_getmethods__["cyc_type"] = libtgw_python36.ReqKline_cyc_type_get
    if _newclass:
        cyc_type = _swig_property(libtgw_python36.ReqKline_cyc_type_get, libtgw_python36.ReqKline_cyc_type_set)
    __swig_setmethods__["cyc_def"] = libtgw_python36.ReqKline_cyc_def_set
    __swig_getmethods__["cyc_def"] = libtgw_python36.ReqKline_cyc_def_get
    if _newclass:
        cyc_def = _swig_property(libtgw_python36.ReqKline_cyc_def_get, libtgw_python36.ReqKline_cyc_def_set)
    __swig_setmethods__["auto_complete"] = libtgw_python36.ReqKline_auto_complete_set
    __swig_getmethods__["auto_complete"] = libtgw_python36.ReqKline_auto_complete_get
    if _newclass:
        auto_complete = _swig_property(libtgw_python36.ReqKline_auto_complete_get, libtgw_python36.ReqKline_auto_complete_set)
    __swig_setmethods__["begin_date"] = libtgw_python36.ReqKline_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python36.ReqKline_begin_date_get
    if _newclass:
        begin_date = _swig_property(libtgw_python36.ReqKline_begin_date_get, libtgw_python36.ReqKline_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python36.ReqKline_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python36.ReqKline_end_date_get
    if _newclass:
        end_date = _swig_property(libtgw_python36.ReqKline_end_date_get, libtgw_python36.ReqKline_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python36.ReqKline_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python36.ReqKline_begin_time_get
    if _newclass:
        begin_time = _swig_property(libtgw_python36.ReqKline_begin_time_get, libtgw_python36.ReqKline_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python36.ReqKline_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python36.ReqKline_end_time_get
    if _newclass:
        end_time = _swig_property(libtgw_python36.ReqKline_end_time_get, libtgw_python36.ReqKline_end_time_set)

    def __init__(self):
        this = libtgw_python36.new_ReqKline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ReqKline
    __del__ = lambda self: None
ReqKline_swigregister = libtgw_python36.ReqKline_swigregister
ReqKline_swigregister(ReqKline)

class ReqDefault(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqDefault, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqDefault, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.ReqDefault_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.ReqDefault_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.ReqDefault_security_code_get, libtgw_python36.ReqDefault_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python36.ReqDefault_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.ReqDefault_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.ReqDefault_market_type_get, libtgw_python36.ReqDefault_market_type_set)
    __swig_setmethods__["date"] = libtgw_python36.ReqDefault_date_set
    __swig_getmethods__["date"] = libtgw_python36.ReqDefault_date_get
    if _newclass:
        date = _swig_property(libtgw_python36.ReqDefault_date_get, libtgw_python36.ReqDefault_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python36.ReqDefault_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python36.ReqDefault_begin_time_get
    if _newclass:
        begin_time = _swig_property(libtgw_python36.ReqDefault_begin_time_get, libtgw_python36.ReqDefault_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python36.ReqDefault_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python36.ReqDefault_end_time_get
    if _newclass:
        end_time = _swig_property(libtgw_python36.ReqDefault_end_time_get, libtgw_python36.ReqDefault_end_time_set)
    __swig_setmethods__["data_type"] = libtgw_python36.ReqDefault_data_type_set
    __swig_getmethods__["data_type"] = libtgw_python36.ReqDefault_data_type_get
    if _newclass:
        data_type = _swig_property(libtgw_python36.ReqDefault_data_type_get, libtgw_python36.ReqDefault_data_type_set)

    def __init__(self):
        this = libtgw_python36.new_ReqDefault()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ReqDefault
    __del__ = lambda self: None
ReqDefault_swigregister = libtgw_python36.ReqDefault_swigregister
ReqDefault_swigregister(ReqDefault)

class ReqHistoryItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqHistoryItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqHistoryItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python36.ReqHistoryItem_market_set
    __swig_getmethods__["market"] = libtgw_python36.ReqHistoryItem_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.ReqHistoryItem_market_get, libtgw_python36.ReqHistoryItem_market_set)
    __swig_setmethods__["security_code"] = libtgw_python36.ReqHistoryItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.ReqHistoryItem_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.ReqHistoryItem_security_code_get, libtgw_python36.ReqHistoryItem_security_code_set)

    def __init__(self):
        this = libtgw_python36.new_ReqHistoryItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ReqHistoryItem
    __del__ = lambda self: None
ReqHistoryItem_swigregister = libtgw_python36.ReqHistoryItem_swigregister
ReqHistoryItem_swigregister(ReqHistoryItem)

class SubCodeTableItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubCodeTableItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubCodeTableItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python36.SubCodeTableItem_market_set
    __swig_getmethods__["market"] = libtgw_python36.SubCodeTableItem_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.SubCodeTableItem_market_get, libtgw_python36.SubCodeTableItem_market_set)
    __swig_setmethods__["security_code"] = libtgw_python36.SubCodeTableItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.SubCodeTableItem_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.SubCodeTableItem_security_code_get, libtgw_python36.SubCodeTableItem_security_code_set)

    def __init__(self):
        this = libtgw_python36.new_SubCodeTableItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_SubCodeTableItem
    __del__ = lambda self: None
SubCodeTableItem_swigregister = libtgw_python36.SubCodeTableItem_swigregister
SubCodeTableItem_swigregister(SubCodeTableItem)

class ReqFactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqFactor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python36.ReqFactor_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.ReqFactor_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.ReqFactor_task_id_get, libtgw_python36.ReqFactor_task_id_set)
    __swig_setmethods__["factor_type"] = libtgw_python36.ReqFactor_factor_type_set
    __swig_getmethods__["factor_type"] = libtgw_python36.ReqFactor_factor_type_get
    if _newclass:
        factor_type = _swig_property(libtgw_python36.ReqFactor_factor_type_get, libtgw_python36.ReqFactor_factor_type_set)
    __swig_setmethods__["factor_sub_type"] = libtgw_python36.ReqFactor_factor_sub_type_set
    __swig_getmethods__["factor_sub_type"] = libtgw_python36.ReqFactor_factor_sub_type_get
    if _newclass:
        factor_sub_type = _swig_property(libtgw_python36.ReqFactor_factor_sub_type_get, libtgw_python36.ReqFactor_factor_sub_type_set)
    __swig_setmethods__["factor_name"] = libtgw_python36.ReqFactor_factor_name_set
    __swig_getmethods__["factor_name"] = libtgw_python36.ReqFactor_factor_name_get
    if _newclass:
        factor_name = _swig_property(libtgw_python36.ReqFactor_factor_name_get, libtgw_python36.ReqFactor_factor_name_set)
    __swig_setmethods__["begin_date"] = libtgw_python36.ReqFactor_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python36.ReqFactor_begin_date_get
    if _newclass:
        begin_date = _swig_property(libtgw_python36.ReqFactor_begin_date_get, libtgw_python36.ReqFactor_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python36.ReqFactor_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python36.ReqFactor_end_date_get
    if _newclass:
        end_date = _swig_property(libtgw_python36.ReqFactor_end_date_get, libtgw_python36.ReqFactor_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python36.ReqFactor_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python36.ReqFactor_begin_time_get
    if _newclass:
        begin_time = _swig_property(libtgw_python36.ReqFactor_begin_time_get, libtgw_python36.ReqFactor_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python36.ReqFactor_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python36.ReqFactor_end_time_get
    if _newclass:
        end_time = _swig_property(libtgw_python36.ReqFactor_end_time_get, libtgw_python36.ReqFactor_end_time_set)
    __swig_setmethods__["security_code"] = libtgw_python36.ReqFactor_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.ReqFactor_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.ReqFactor_security_code_get, libtgw_python36.ReqFactor_security_code_set)
    __swig_setmethods__["market"] = libtgw_python36.ReqFactor_market_set
    __swig_getmethods__["market"] = libtgw_python36.ReqFactor_market_get
    if _newclass:
        market = _swig_property(libtgw_python36.ReqFactor_market_get, libtgw_python36.ReqFactor_market_set)
    __swig_setmethods__["category"] = libtgw_python36.ReqFactor_category_set
    __swig_getmethods__["category"] = libtgw_python36.ReqFactor_category_get
    if _newclass:
        category = _swig_property(libtgw_python36.ReqFactor_category_get, libtgw_python36.ReqFactor_category_set)
    __swig_setmethods__["count"] = libtgw_python36.ReqFactor_count_set
    __swig_getmethods__["count"] = libtgw_python36.ReqFactor_count_get
    if _newclass:
        count = _swig_property(libtgw_python36.ReqFactor_count_get, libtgw_python36.ReqFactor_count_set)
    __swig_setmethods__["key1"] = libtgw_python36.ReqFactor_key1_set
    __swig_getmethods__["key1"] = libtgw_python36.ReqFactor_key1_get
    if _newclass:
        key1 = _swig_property(libtgw_python36.ReqFactor_key1_get, libtgw_python36.ReqFactor_key1_set)
    __swig_setmethods__["key2"] = libtgw_python36.ReqFactor_key2_set
    __swig_getmethods__["key2"] = libtgw_python36.ReqFactor_key2_get
    if _newclass:
        key2 = _swig_property(libtgw_python36.ReqFactor_key2_get, libtgw_python36.ReqFactor_key2_set)

    def __init__(self):
        this = libtgw_python36.new_ReqFactor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ReqFactor
    __del__ = lambda self: None
ReqFactor_swigregister = libtgw_python36.ReqFactor_swigregister
ReqFactor_swigregister(ReqFactor)

class ReqReplayKline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqReplayKline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqReplayKline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cq_flag"] = libtgw_python36.ReqReplayKline_cq_flag_set
    __swig_getmethods__["cq_flag"] = libtgw_python36.ReqReplayKline_cq_flag_get
    if _newclass:
        cq_flag = _swig_property(libtgw_python36.ReqReplayKline_cq_flag_get, libtgw_python36.ReqReplayKline_cq_flag_set)
    __swig_setmethods__["cq_date"] = libtgw_python36.ReqReplayKline_cq_date_set
    __swig_getmethods__["cq_date"] = libtgw_python36.ReqReplayKline_cq_date_get
    if _newclass:
        cq_date = _swig_property(libtgw_python36.ReqReplayKline_cq_date_get, libtgw_python36.ReqReplayKline_cq_date_set)
    __swig_setmethods__["qj_flag"] = libtgw_python36.ReqReplayKline_qj_flag_set
    __swig_getmethods__["qj_flag"] = libtgw_python36.ReqReplayKline_qj_flag_get
    if _newclass:
        qj_flag = _swig_property(libtgw_python36.ReqReplayKline_qj_flag_get, libtgw_python36.ReqReplayKline_qj_flag_set)
    __swig_setmethods__["cyc_type"] = libtgw_python36.ReqReplayKline_cyc_type_set
    __swig_getmethods__["cyc_type"] = libtgw_python36.ReqReplayKline_cyc_type_get
    if _newclass:
        cyc_type = _swig_property(libtgw_python36.ReqReplayKline_cyc_type_get, libtgw_python36.ReqReplayKline_cyc_type_set)
    __swig_setmethods__["cyc_def"] = libtgw_python36.ReqReplayKline_cyc_def_set
    __swig_getmethods__["cyc_def"] = libtgw_python36.ReqReplayKline_cyc_def_get
    if _newclass:
        cyc_def = _swig_property(libtgw_python36.ReqReplayKline_cyc_def_get, libtgw_python36.ReqReplayKline_cyc_def_set)
    __swig_setmethods__["auto_complete"] = libtgw_python36.ReqReplayKline_auto_complete_set
    __swig_getmethods__["auto_complete"] = libtgw_python36.ReqReplayKline_auto_complete_get
    if _newclass:
        auto_complete = _swig_property(libtgw_python36.ReqReplayKline_auto_complete_get, libtgw_python36.ReqReplayKline_auto_complete_set)
    __swig_setmethods__["begin_date"] = libtgw_python36.ReqReplayKline_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python36.ReqReplayKline_begin_date_get
    if _newclass:
        begin_date = _swig_property(libtgw_python36.ReqReplayKline_begin_date_get, libtgw_python36.ReqReplayKline_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python36.ReqReplayKline_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python36.ReqReplayKline_end_date_get
    if _newclass:
        end_date = _swig_property(libtgw_python36.ReqReplayKline_end_date_get, libtgw_python36.ReqReplayKline_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python36.ReqReplayKline_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python36.ReqReplayKline_begin_time_get
    if _newclass:
        begin_time = _swig_property(libtgw_python36.ReqReplayKline_begin_time_get, libtgw_python36.ReqReplayKline_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python36.ReqReplayKline_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python36.ReqReplayKline_end_time_get
    if _newclass:
        end_time = _swig_property(libtgw_python36.ReqReplayKline_end_time_get, libtgw_python36.ReqReplayKline_end_time_set)
    __swig_setmethods__["replay_speed"] = libtgw_python36.ReqReplayKline_replay_speed_set
    __swig_getmethods__["replay_speed"] = libtgw_python36.ReqReplayKline_replay_speed_get
    if _newclass:
        replay_speed = _swig_property(libtgw_python36.ReqReplayKline_replay_speed_get, libtgw_python36.ReqReplayKline_replay_speed_set)
    __swig_setmethods__["task_id"] = libtgw_python36.ReqReplayKline_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.ReqReplayKline_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.ReqReplayKline_task_id_get, libtgw_python36.ReqReplayKline_task_id_set)
    __swig_setmethods__["req_items"] = libtgw_python36.ReqReplayKline_req_items_set
    __swig_getmethods__["req_items"] = libtgw_python36.ReqReplayKline_req_items_get
    if _newclass:
        req_items = _swig_property(libtgw_python36.ReqReplayKline_req_items_get, libtgw_python36.ReqReplayKline_req_items_set)
    __swig_setmethods__["req_item_cnt"] = libtgw_python36.ReqReplayKline_req_item_cnt_set
    __swig_getmethods__["req_item_cnt"] = libtgw_python36.ReqReplayKline_req_item_cnt_get
    if _newclass:
        req_item_cnt = _swig_property(libtgw_python36.ReqReplayKline_req_item_cnt_get, libtgw_python36.ReqReplayKline_req_item_cnt_set)

    def __init__(self):
        this = libtgw_python36.new_ReqReplayKline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ReqReplayKline
    __del__ = lambda self: None
ReqReplayKline_swigregister = libtgw_python36.ReqReplayKline_swigregister
ReqReplayKline_swigregister(ReqReplayKline)

class ReqReplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqReplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqReplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["md_data_type"] = libtgw_python36.ReqReplay_md_data_type_set
    __swig_getmethods__["md_data_type"] = libtgw_python36.ReqReplay_md_data_type_get
    if _newclass:
        md_data_type = _swig_property(libtgw_python36.ReqReplay_md_data_type_get, libtgw_python36.ReqReplay_md_data_type_set)
    __swig_setmethods__["begin_date"] = libtgw_python36.ReqReplay_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python36.ReqReplay_begin_date_get
    if _newclass:
        begin_date = _swig_property(libtgw_python36.ReqReplay_begin_date_get, libtgw_python36.ReqReplay_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python36.ReqReplay_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python36.ReqReplay_end_date_get
    if _newclass:
        end_date = _swig_property(libtgw_python36.ReqReplay_end_date_get, libtgw_python36.ReqReplay_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python36.ReqReplay_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python36.ReqReplay_begin_time_get
    if _newclass:
        begin_time = _swig_property(libtgw_python36.ReqReplay_begin_time_get, libtgw_python36.ReqReplay_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python36.ReqReplay_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python36.ReqReplay_end_time_get
    if _newclass:
        end_time = _swig_property(libtgw_python36.ReqReplay_end_time_get, libtgw_python36.ReqReplay_end_time_set)
    __swig_setmethods__["replay_speed"] = libtgw_python36.ReqReplay_replay_speed_set
    __swig_getmethods__["replay_speed"] = libtgw_python36.ReqReplay_replay_speed_get
    if _newclass:
        replay_speed = _swig_property(libtgw_python36.ReqReplay_replay_speed_get, libtgw_python36.ReqReplay_replay_speed_set)
    __swig_setmethods__["task_id"] = libtgw_python36.ReqReplay_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.ReqReplay_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.ReqReplay_task_id_get, libtgw_python36.ReqReplay_task_id_set)
    __swig_setmethods__["req_items"] = libtgw_python36.ReqReplay_req_items_set
    __swig_getmethods__["req_items"] = libtgw_python36.ReqReplay_req_items_get
    if _newclass:
        req_items = _swig_property(libtgw_python36.ReqReplay_req_items_get, libtgw_python36.ReqReplay_req_items_set)
    __swig_setmethods__["req_item_cnt"] = libtgw_python36.ReqReplay_req_item_cnt_set
    __swig_getmethods__["req_item_cnt"] = libtgw_python36.ReqReplay_req_item_cnt_get
    if _newclass:
        req_item_cnt = _swig_property(libtgw_python36.ReqReplay_req_item_cnt_get, libtgw_python36.ReqReplay_req_item_cnt_set)

    def __init__(self):
        this = libtgw_python36.new_ReqReplay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ReqReplay
    __del__ = lambda self: None
ReqReplay_swigregister = libtgw_python36.ReqReplay_swigregister
ReqReplay_swigregister(ReqReplay)

class LogonResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogonResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogonResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["api_mode"] = libtgw_python36.LogonResponse_api_mode_set
    __swig_getmethods__["api_mode"] = libtgw_python36.LogonResponse_api_mode_get
    if _newclass:
        api_mode = _swig_property(libtgw_python36.LogonResponse_api_mode_get, libtgw_python36.LogonResponse_api_mode_set)
    __swig_setmethods__["logon_msg_len"] = libtgw_python36.LogonResponse_logon_msg_len_set
    __swig_getmethods__["logon_msg_len"] = libtgw_python36.LogonResponse_logon_msg_len_get
    if _newclass:
        logon_msg_len = _swig_property(libtgw_python36.LogonResponse_logon_msg_len_get, libtgw_python36.LogonResponse_logon_msg_len_set)
    __swig_setmethods__["logon_json"] = libtgw_python36.LogonResponse_logon_json_set
    __swig_getmethods__["logon_json"] = libtgw_python36.LogonResponse_logon_json_get
    if _newclass:
        logon_json = _swig_property(libtgw_python36.LogonResponse_logon_json_get, libtgw_python36.LogonResponse_logon_json_set)

    def __init__(self):
        this = libtgw_python36.new_LogonResponse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_LogonResponse
    __del__ = lambda self: None
LogonResponse_swigregister = libtgw_python36.LogonResponse_swigregister
LogonResponse_swigregister(LogonResponse)

class MDKLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDKLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDKLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDKLine_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDKLine_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDKLine_market_type_get, libtgw_python36.MDKLine_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDKLine_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDKLine_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDKLine_security_code_get, libtgw_python36.MDKLine_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDKLine_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDKLine_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDKLine_orig_time_get, libtgw_python36.MDKLine_orig_time_set)
    __swig_setmethods__["kline_time"] = libtgw_python36.MDKLine_kline_time_set
    __swig_getmethods__["kline_time"] = libtgw_python36.MDKLine_kline_time_get
    if _newclass:
        kline_time = _swig_property(libtgw_python36.MDKLine_kline_time_get, libtgw_python36.MDKLine_kline_time_set)
    __swig_setmethods__["open_price"] = libtgw_python36.MDKLine_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python36.MDKLine_open_price_get
    if _newclass:
        open_price = _swig_property(libtgw_python36.MDKLine_open_price_get, libtgw_python36.MDKLine_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDKLine_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDKLine_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDKLine_high_price_get, libtgw_python36.MDKLine_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDKLine_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDKLine_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDKLine_low_price_get, libtgw_python36.MDKLine_low_price_set)
    __swig_setmethods__["close_price"] = libtgw_python36.MDKLine_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python36.MDKLine_close_price_get
    if _newclass:
        close_price = _swig_property(libtgw_python36.MDKLine_close_price_get, libtgw_python36.MDKLine_close_price_set)
    __swig_setmethods__["volume_trade"] = libtgw_python36.MDKLine_volume_trade_set
    __swig_getmethods__["volume_trade"] = libtgw_python36.MDKLine_volume_trade_get
    if _newclass:
        volume_trade = _swig_property(libtgw_python36.MDKLine_volume_trade_get, libtgw_python36.MDKLine_volume_trade_set)
    __swig_setmethods__["value_trade"] = libtgw_python36.MDKLine_value_trade_set
    __swig_getmethods__["value_trade"] = libtgw_python36.MDKLine_value_trade_get
    if _newclass:
        value_trade = _swig_property(libtgw_python36.MDKLine_value_trade_get, libtgw_python36.MDKLine_value_trade_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDKLine_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDKLine_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDKLine_variety_category_get, libtgw_python36.MDKLine_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDKLine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDKLine
    __del__ = lambda self: None
MDKLine_swigregister = libtgw_python36.MDKLine_swigregister
MDKLine_swigregister(MDKLine)

class MDSnapshotDerive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshotDerive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshotDerive, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDSnapshotDerive_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDSnapshotDerive_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDSnapshotDerive_market_type_get, libtgw_python36.MDSnapshotDerive_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDSnapshotDerive_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDSnapshotDerive_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDSnapshotDerive_security_code_get, libtgw_python36.MDSnapshotDerive_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDSnapshotDerive_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDSnapshotDerive_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDSnapshotDerive_orig_time_get, libtgw_python36.MDSnapshotDerive_orig_time_set)
    __swig_setmethods__["average_price"] = libtgw_python36.MDSnapshotDerive_average_price_set
    __swig_getmethods__["average_price"] = libtgw_python36.MDSnapshotDerive_average_price_get
    if _newclass:
        average_price = _swig_property(libtgw_python36.MDSnapshotDerive_average_price_get, libtgw_python36.MDSnapshotDerive_average_price_set)
    __swig_setmethods__["circulation_value"] = libtgw_python36.MDSnapshotDerive_circulation_value_set
    __swig_getmethods__["circulation_value"] = libtgw_python36.MDSnapshotDerive_circulation_value_get
    if _newclass:
        circulation_value = _swig_property(libtgw_python36.MDSnapshotDerive_circulation_value_get, libtgw_python36.MDSnapshotDerive_circulation_value_set)
    __swig_setmethods__["total_value"] = libtgw_python36.MDSnapshotDerive_total_value_set
    __swig_getmethods__["total_value"] = libtgw_python36.MDSnapshotDerive_total_value_get
    if _newclass:
        total_value = _swig_property(libtgw_python36.MDSnapshotDerive_total_value_get, libtgw_python36.MDSnapshotDerive_total_value_set)
    __swig_setmethods__["initiative_buy_volume"] = libtgw_python36.MDSnapshotDerive_initiative_buy_volume_set
    __swig_getmethods__["initiative_buy_volume"] = libtgw_python36.MDSnapshotDerive_initiative_buy_volume_get
    if _newclass:
        initiative_buy_volume = _swig_property(libtgw_python36.MDSnapshotDerive_initiative_buy_volume_get, libtgw_python36.MDSnapshotDerive_initiative_buy_volume_set)
    __swig_setmethods__["initiative_sell_volume"] = libtgw_python36.MDSnapshotDerive_initiative_sell_volume_set
    __swig_getmethods__["initiative_sell_volume"] = libtgw_python36.MDSnapshotDerive_initiative_sell_volume_get
    if _newclass:
        initiative_sell_volume = _swig_property(libtgw_python36.MDSnapshotDerive_initiative_sell_volume_get, libtgw_python36.MDSnapshotDerive_initiative_sell_volume_set)
    __swig_setmethods__["turnover_rate"] = libtgw_python36.MDSnapshotDerive_turnover_rate_set
    __swig_getmethods__["turnover_rate"] = libtgw_python36.MDSnapshotDerive_turnover_rate_get
    if _newclass:
        turnover_rate = _swig_property(libtgw_python36.MDSnapshotDerive_turnover_rate_get, libtgw_python36.MDSnapshotDerive_turnover_rate_set)
    __swig_setmethods__["volume_ratio"] = libtgw_python36.MDSnapshotDerive_volume_ratio_set
    __swig_getmethods__["volume_ratio"] = libtgw_python36.MDSnapshotDerive_volume_ratio_get
    if _newclass:
        volume_ratio = _swig_property(libtgw_python36.MDSnapshotDerive_volume_ratio_get, libtgw_python36.MDSnapshotDerive_volume_ratio_set)
    __swig_setmethods__["ask_bid_ratio"] = libtgw_python36.MDSnapshotDerive_ask_bid_ratio_set
    __swig_getmethods__["ask_bid_ratio"] = libtgw_python36.MDSnapshotDerive_ask_bid_ratio_get
    if _newclass:
        ask_bid_ratio = _swig_property(libtgw_python36.MDSnapshotDerive_ask_bid_ratio_get, libtgw_python36.MDSnapshotDerive_ask_bid_ratio_set)
    __swig_setmethods__["amplitude"] = libtgw_python36.MDSnapshotDerive_amplitude_set
    __swig_getmethods__["amplitude"] = libtgw_python36.MDSnapshotDerive_amplitude_get
    if _newclass:
        amplitude = _swig_property(libtgw_python36.MDSnapshotDerive_amplitude_get, libtgw_python36.MDSnapshotDerive_amplitude_set)
    __swig_setmethods__["PE_static"] = libtgw_python36.MDSnapshotDerive_PE_static_set
    __swig_getmethods__["PE_static"] = libtgw_python36.MDSnapshotDerive_PE_static_get
    if _newclass:
        PE_static = _swig_property(libtgw_python36.MDSnapshotDerive_PE_static_get, libtgw_python36.MDSnapshotDerive_PE_static_set)
    __swig_setmethods__["PE_dynamic"] = libtgw_python36.MDSnapshotDerive_PE_dynamic_set
    __swig_getmethods__["PE_dynamic"] = libtgw_python36.MDSnapshotDerive_PE_dynamic_get
    if _newclass:
        PE_dynamic = _swig_property(libtgw_python36.MDSnapshotDerive_PE_dynamic_get, libtgw_python36.MDSnapshotDerive_PE_dynamic_set)
    __swig_setmethods__["PE_TTM"] = libtgw_python36.MDSnapshotDerive_PE_TTM_set
    __swig_getmethods__["PE_TTM"] = libtgw_python36.MDSnapshotDerive_PE_TTM_get
    if _newclass:
        PE_TTM = _swig_property(libtgw_python36.MDSnapshotDerive_PE_TTM_get, libtgw_python36.MDSnapshotDerive_PE_TTM_set)
    __swig_setmethods__["PB"] = libtgw_python36.MDSnapshotDerive_PB_set
    __swig_getmethods__["PB"] = libtgw_python36.MDSnapshotDerive_PB_get
    if _newclass:
        PB = _swig_property(libtgw_python36.MDSnapshotDerive_PB_get, libtgw_python36.MDSnapshotDerive_PB_set)
    __swig_setmethods__["entrustment_diff"] = libtgw_python36.MDSnapshotDerive_entrustment_diff_set
    __swig_getmethods__["entrustment_diff"] = libtgw_python36.MDSnapshotDerive_entrustment_diff_get
    if _newclass:
        entrustment_diff = _swig_property(libtgw_python36.MDSnapshotDerive_entrustment_diff_get, libtgw_python36.MDSnapshotDerive_entrustment_diff_set)
    __swig_setmethods__["initiative_flag"] = libtgw_python36.MDSnapshotDerive_initiative_flag_set
    __swig_getmethods__["initiative_flag"] = libtgw_python36.MDSnapshotDerive_initiative_flag_get
    if _newclass:
        initiative_flag = _swig_property(libtgw_python36.MDSnapshotDerive_initiative_flag_get, libtgw_python36.MDSnapshotDerive_initiative_flag_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDSnapshotDerive_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDSnapshotDerive_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDSnapshotDerive_variety_category_get, libtgw_python36.MDSnapshotDerive_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDSnapshotDerive()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDSnapshotDerive
    __del__ = lambda self: None
MDSnapshotDerive_swigregister = libtgw_python36.MDSnapshotDerive_swigregister
MDSnapshotDerive_swigregister(MDSnapshotDerive)

class Factor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Factor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data_size"] = libtgw_python36.Factor_data_size_set
    __swig_getmethods__["data_size"] = libtgw_python36.Factor_data_size_get
    if _newclass:
        data_size = _swig_property(libtgw_python36.Factor_data_size_get, libtgw_python36.Factor_data_size_set)
    __swig_setmethods__["json_buf"] = libtgw_python36.Factor_json_buf_set
    __swig_getmethods__["json_buf"] = libtgw_python36.Factor_json_buf_get
    if _newclass:
        json_buf = _swig_property(libtgw_python36.Factor_json_buf_get, libtgw_python36.Factor_json_buf_set)

    def __init__(self):
        this = libtgw_python36.new_Factor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_Factor
    __del__ = lambda self: None
Factor_swigregister = libtgw_python36.Factor_swigregister
Factor_swigregister(Factor)

class MDSnapshotL1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshotL1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshotL1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDSnapshotL1_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDSnapshotL1_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDSnapshotL1_market_type_get, libtgw_python36.MDSnapshotL1_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDSnapshotL1_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDSnapshotL1_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDSnapshotL1_security_code_get, libtgw_python36.MDSnapshotL1_security_code_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDSnapshotL1_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDSnapshotL1_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDSnapshotL1_variety_category_get, libtgw_python36.MDSnapshotL1_variety_category_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDSnapshotL1_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDSnapshotL1_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDSnapshotL1_orig_time_get, libtgw_python36.MDSnapshotL1_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDSnapshotL1_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDSnapshotL1_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDSnapshotL1_trading_phase_code_get, libtgw_python36.MDSnapshotL1_trading_phase_code_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDSnapshotL1_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDSnapshotL1_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDSnapshotL1_pre_close_price_get, libtgw_python36.MDSnapshotL1_pre_close_price_set)
    __swig_setmethods__["open_price"] = libtgw_python36.MDSnapshotL1_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python36.MDSnapshotL1_open_price_get
    if _newclass:
        open_price = _swig_property(libtgw_python36.MDSnapshotL1_open_price_get, libtgw_python36.MDSnapshotL1_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDSnapshotL1_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDSnapshotL1_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDSnapshotL1_high_price_get, libtgw_python36.MDSnapshotL1_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDSnapshotL1_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDSnapshotL1_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDSnapshotL1_low_price_get, libtgw_python36.MDSnapshotL1_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDSnapshotL1_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDSnapshotL1_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDSnapshotL1_last_price_get, libtgw_python36.MDSnapshotL1_last_price_set)
    __swig_setmethods__["close_price"] = libtgw_python36.MDSnapshotL1_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python36.MDSnapshotL1_close_price_get
    if _newclass:
        close_price = _swig_property(libtgw_python36.MDSnapshotL1_close_price_get, libtgw_python36.MDSnapshotL1_close_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDSnapshotL1_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDSnapshotL1_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDSnapshotL1_bid_price_get, libtgw_python36.MDSnapshotL1_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDSnapshotL1_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDSnapshotL1_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDSnapshotL1_bid_volume_get, libtgw_python36.MDSnapshotL1_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDSnapshotL1_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDSnapshotL1_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDSnapshotL1_offer_price_get, libtgw_python36.MDSnapshotL1_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDSnapshotL1_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDSnapshotL1_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDSnapshotL1_offer_volume_get, libtgw_python36.MDSnapshotL1_offer_volume_set)
    __swig_setmethods__["num_trades"] = libtgw_python36.MDSnapshotL1_num_trades_set
    __swig_getmethods__["num_trades"] = libtgw_python36.MDSnapshotL1_num_trades_get
    if _newclass:
        num_trades = _swig_property(libtgw_python36.MDSnapshotL1_num_trades_get, libtgw_python36.MDSnapshotL1_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDSnapshotL1_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDSnapshotL1_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDSnapshotL1_total_volume_trade_get, libtgw_python36.MDSnapshotL1_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDSnapshotL1_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDSnapshotL1_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDSnapshotL1_total_value_trade_get, libtgw_python36.MDSnapshotL1_total_value_trade_set)
    __swig_setmethods__["IOPV"] = libtgw_python36.MDSnapshotL1_IOPV_set
    __swig_getmethods__["IOPV"] = libtgw_python36.MDSnapshotL1_IOPV_get
    if _newclass:
        IOPV = _swig_property(libtgw_python36.MDSnapshotL1_IOPV_get, libtgw_python36.MDSnapshotL1_IOPV_set)
    __swig_setmethods__["high_limited"] = libtgw_python36.MDSnapshotL1_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python36.MDSnapshotL1_high_limited_get
    if _newclass:
        high_limited = _swig_property(libtgw_python36.MDSnapshotL1_high_limited_get, libtgw_python36.MDSnapshotL1_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python36.MDSnapshotL1_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python36.MDSnapshotL1_low_limited_get
    if _newclass:
        low_limited = _swig_property(libtgw_python36.MDSnapshotL1_low_limited_get, libtgw_python36.MDSnapshotL1_low_limited_set)

    def __init__(self):
        this = libtgw_python36.new_MDSnapshotL1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDSnapshotL1
    __del__ = lambda self: None
MDSnapshotL1_swigregister = libtgw_python36.MDSnapshotL1_swigregister
MDSnapshotL1_swigregister(MDSnapshotL1)

class MDIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDIndexSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDIndexSnapshot_market_type_get, libtgw_python36.MDIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDIndexSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDIndexSnapshot_security_code_get, libtgw_python36.MDIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDIndexSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDIndexSnapshot_orig_time_get, libtgw_python36.MDIndexSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDIndexSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDIndexSnapshot_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDIndexSnapshot_trading_phase_code_get, libtgw_python36.MDIndexSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_index"] = libtgw_python36.MDIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = libtgw_python36.MDIndexSnapshot_pre_close_index_get
    if _newclass:
        pre_close_index = _swig_property(libtgw_python36.MDIndexSnapshot_pre_close_index_get, libtgw_python36.MDIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["open_index"] = libtgw_python36.MDIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = libtgw_python36.MDIndexSnapshot_open_index_get
    if _newclass:
        open_index = _swig_property(libtgw_python36.MDIndexSnapshot_open_index_get, libtgw_python36.MDIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = libtgw_python36.MDIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = libtgw_python36.MDIndexSnapshot_high_index_get
    if _newclass:
        high_index = _swig_property(libtgw_python36.MDIndexSnapshot_high_index_get, libtgw_python36.MDIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = libtgw_python36.MDIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = libtgw_python36.MDIndexSnapshot_low_index_get
    if _newclass:
        low_index = _swig_property(libtgw_python36.MDIndexSnapshot_low_index_get, libtgw_python36.MDIndexSnapshot_low_index_set)
    __swig_setmethods__["last_index"] = libtgw_python36.MDIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = libtgw_python36.MDIndexSnapshot_last_index_get
    if _newclass:
        last_index = _swig_property(libtgw_python36.MDIndexSnapshot_last_index_get, libtgw_python36.MDIndexSnapshot_last_index_set)
    __swig_setmethods__["close_index"] = libtgw_python36.MDIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = libtgw_python36.MDIndexSnapshot_close_index_get
    if _newclass:
        close_index = _swig_property(libtgw_python36.MDIndexSnapshot_close_index_get, libtgw_python36.MDIndexSnapshot_close_index_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDIndexSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDIndexSnapshot_total_volume_trade_get, libtgw_python36.MDIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDIndexSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDIndexSnapshot_total_value_trade_get, libtgw_python36.MDIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDIndexSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDIndexSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDIndexSnapshot_variety_category_get, libtgw_python36.MDIndexSnapshot_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDIndexSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDIndexSnapshot
    __del__ = lambda self: None
MDIndexSnapshot_swigregister = libtgw_python36.MDIndexSnapshot_swigregister
MDIndexSnapshot_swigregister(MDIndexSnapshot)

class MDOptionSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOptionSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOptionSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDOptionSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDOptionSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDOptionSnapshot_market_type_get, libtgw_python36.MDOptionSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDOptionSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDOptionSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDOptionSnapshot_security_code_get, libtgw_python36.MDOptionSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDOptionSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDOptionSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDOptionSnapshot_orig_time_get, libtgw_python36.MDOptionSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDOptionSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDOptionSnapshot_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDOptionSnapshot_trading_phase_code_get, libtgw_python36.MDOptionSnapshot_trading_phase_code_set)
    __swig_setmethods__["total_long_position"] = libtgw_python36.MDOptionSnapshot_total_long_position_set
    __swig_getmethods__["total_long_position"] = libtgw_python36.MDOptionSnapshot_total_long_position_get
    if _newclass:
        total_long_position = _swig_property(libtgw_python36.MDOptionSnapshot_total_long_position_get, libtgw_python36.MDOptionSnapshot_total_long_position_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDOptionSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDOptionSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDOptionSnapshot_total_volume_trade_get, libtgw_python36.MDOptionSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDOptionSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDOptionSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDOptionSnapshot_total_value_trade_get, libtgw_python36.MDOptionSnapshot_total_value_trade_set)
    __swig_setmethods__["pre_settle_price"] = libtgw_python36.MDOptionSnapshot_pre_settle_price_set
    __swig_getmethods__["pre_settle_price"] = libtgw_python36.MDOptionSnapshot_pre_settle_price_get
    if _newclass:
        pre_settle_price = _swig_property(libtgw_python36.MDOptionSnapshot_pre_settle_price_get, libtgw_python36.MDOptionSnapshot_pre_settle_price_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDOptionSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDOptionSnapshot_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDOptionSnapshot_pre_close_price_get, libtgw_python36.MDOptionSnapshot_pre_close_price_set)
    __swig_setmethods__["open_price"] = libtgw_python36.MDOptionSnapshot_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python36.MDOptionSnapshot_open_price_get
    if _newclass:
        open_price = _swig_property(libtgw_python36.MDOptionSnapshot_open_price_get, libtgw_python36.MDOptionSnapshot_open_price_set)
    __swig_setmethods__["auction_price"] = libtgw_python36.MDOptionSnapshot_auction_price_set
    __swig_getmethods__["auction_price"] = libtgw_python36.MDOptionSnapshot_auction_price_get
    if _newclass:
        auction_price = _swig_property(libtgw_python36.MDOptionSnapshot_auction_price_get, libtgw_python36.MDOptionSnapshot_auction_price_set)
    __swig_setmethods__["auction_volume"] = libtgw_python36.MDOptionSnapshot_auction_volume_set
    __swig_getmethods__["auction_volume"] = libtgw_python36.MDOptionSnapshot_auction_volume_get
    if _newclass:
        auction_volume = _swig_property(libtgw_python36.MDOptionSnapshot_auction_volume_get, libtgw_python36.MDOptionSnapshot_auction_volume_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDOptionSnapshot_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDOptionSnapshot_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDOptionSnapshot_high_price_get, libtgw_python36.MDOptionSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDOptionSnapshot_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDOptionSnapshot_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDOptionSnapshot_low_price_get, libtgw_python36.MDOptionSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDOptionSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDOptionSnapshot_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDOptionSnapshot_last_price_get, libtgw_python36.MDOptionSnapshot_last_price_set)
    __swig_setmethods__["close_price"] = libtgw_python36.MDOptionSnapshot_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python36.MDOptionSnapshot_close_price_get
    if _newclass:
        close_price = _swig_property(libtgw_python36.MDOptionSnapshot_close_price_get, libtgw_python36.MDOptionSnapshot_close_price_set)
    __swig_setmethods__["high_limited"] = libtgw_python36.MDOptionSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python36.MDOptionSnapshot_high_limited_get
    if _newclass:
        high_limited = _swig_property(libtgw_python36.MDOptionSnapshot_high_limited_get, libtgw_python36.MDOptionSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python36.MDOptionSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python36.MDOptionSnapshot_low_limited_get
    if _newclass:
        low_limited = _swig_property(libtgw_python36.MDOptionSnapshot_low_limited_get, libtgw_python36.MDOptionSnapshot_low_limited_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDOptionSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDOptionSnapshot_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDOptionSnapshot_bid_price_get, libtgw_python36.MDOptionSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDOptionSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDOptionSnapshot_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDOptionSnapshot_bid_volume_get, libtgw_python36.MDOptionSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDOptionSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDOptionSnapshot_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDOptionSnapshot_offer_price_get, libtgw_python36.MDOptionSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDOptionSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDOptionSnapshot_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDOptionSnapshot_offer_volume_get, libtgw_python36.MDOptionSnapshot_offer_volume_set)
    __swig_setmethods__["settle_price"] = libtgw_python36.MDOptionSnapshot_settle_price_set
    __swig_getmethods__["settle_price"] = libtgw_python36.MDOptionSnapshot_settle_price_get
    if _newclass:
        settle_price = _swig_property(libtgw_python36.MDOptionSnapshot_settle_price_get, libtgw_python36.MDOptionSnapshot_settle_price_set)
    __swig_setmethods__["ref_price"] = libtgw_python36.MDOptionSnapshot_ref_price_set
    __swig_getmethods__["ref_price"] = libtgw_python36.MDOptionSnapshot_ref_price_get
    if _newclass:
        ref_price = _swig_property(libtgw_python36.MDOptionSnapshot_ref_price_get, libtgw_python36.MDOptionSnapshot_ref_price_set)
    __swig_setmethods__["contract_type"] = libtgw_python36.MDOptionSnapshot_contract_type_set
    __swig_getmethods__["contract_type"] = libtgw_python36.MDOptionSnapshot_contract_type_get
    if _newclass:
        contract_type = _swig_property(libtgw_python36.MDOptionSnapshot_contract_type_get, libtgw_python36.MDOptionSnapshot_contract_type_set)
    __swig_setmethods__["expire_date"] = libtgw_python36.MDOptionSnapshot_expire_date_set
    __swig_getmethods__["expire_date"] = libtgw_python36.MDOptionSnapshot_expire_date_get
    if _newclass:
        expire_date = _swig_property(libtgw_python36.MDOptionSnapshot_expire_date_get, libtgw_python36.MDOptionSnapshot_expire_date_set)
    __swig_setmethods__["underlying_security_code"] = libtgw_python36.MDOptionSnapshot_underlying_security_code_set
    __swig_getmethods__["underlying_security_code"] = libtgw_python36.MDOptionSnapshot_underlying_security_code_get
    if _newclass:
        underlying_security_code = _swig_property(libtgw_python36.MDOptionSnapshot_underlying_security_code_get, libtgw_python36.MDOptionSnapshot_underlying_security_code_set)
    __swig_setmethods__["exercise_price"] = libtgw_python36.MDOptionSnapshot_exercise_price_set
    __swig_getmethods__["exercise_price"] = libtgw_python36.MDOptionSnapshot_exercise_price_get
    if _newclass:
        exercise_price = _swig_property(libtgw_python36.MDOptionSnapshot_exercise_price_get, libtgw_python36.MDOptionSnapshot_exercise_price_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDOptionSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDOptionSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDOptionSnapshot_variety_category_get, libtgw_python36.MDOptionSnapshot_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDOptionSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDOptionSnapshot
    __del__ = lambda self: None
MDOptionSnapshot_swigregister = libtgw_python36.MDOptionSnapshot_swigregister
MDOptionSnapshot_swigregister(MDOptionSnapshot)

class MDHKTSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDHKTSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDHKTSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDHKTSnapshot_market_type_get, libtgw_python36.MDHKTSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDHKTSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDHKTSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDHKTSnapshot_security_code_get, libtgw_python36.MDHKTSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDHKTSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDHKTSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDHKTSnapshot_orig_time_get, libtgw_python36.MDHKTSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDHKTSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDHKTSnapshot_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDHKTSnapshot_trading_phase_code_get, libtgw_python36.MDHKTSnapshot_trading_phase_code_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDHKTSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDHKTSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDHKTSnapshot_total_volume_trade_get, libtgw_python36.MDHKTSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDHKTSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDHKTSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDHKTSnapshot_total_value_trade_get, libtgw_python36.MDHKTSnapshot_total_value_trade_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDHKTSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDHKTSnapshot_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDHKTSnapshot_pre_close_price_get, libtgw_python36.MDHKTSnapshot_pre_close_price_set)
    __swig_setmethods__["nominal_price"] = libtgw_python36.MDHKTSnapshot_nominal_price_set
    __swig_getmethods__["nominal_price"] = libtgw_python36.MDHKTSnapshot_nominal_price_get
    if _newclass:
        nominal_price = _swig_property(libtgw_python36.MDHKTSnapshot_nominal_price_get, libtgw_python36.MDHKTSnapshot_nominal_price_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDHKTSnapshot_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDHKTSnapshot_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDHKTSnapshot_high_price_get, libtgw_python36.MDHKTSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDHKTSnapshot_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDHKTSnapshot_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDHKTSnapshot_low_price_get, libtgw_python36.MDHKTSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDHKTSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDHKTSnapshot_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDHKTSnapshot_last_price_get, libtgw_python36.MDHKTSnapshot_last_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDHKTSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDHKTSnapshot_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDHKTSnapshot_bid_price_get, libtgw_python36.MDHKTSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDHKTSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDHKTSnapshot_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDHKTSnapshot_bid_volume_get, libtgw_python36.MDHKTSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDHKTSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDHKTSnapshot_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDHKTSnapshot_offer_price_get, libtgw_python36.MDHKTSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDHKTSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDHKTSnapshot_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDHKTSnapshot_offer_volume_get, libtgw_python36.MDHKTSnapshot_offer_volume_set)
    __swig_setmethods__["ref_price"] = libtgw_python36.MDHKTSnapshot_ref_price_set
    __swig_getmethods__["ref_price"] = libtgw_python36.MDHKTSnapshot_ref_price_get
    if _newclass:
        ref_price = _swig_property(libtgw_python36.MDHKTSnapshot_ref_price_get, libtgw_python36.MDHKTSnapshot_ref_price_set)
    __swig_setmethods__["high_limited"] = libtgw_python36.MDHKTSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python36.MDHKTSnapshot_high_limited_get
    if _newclass:
        high_limited = _swig_property(libtgw_python36.MDHKTSnapshot_high_limited_get, libtgw_python36.MDHKTSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python36.MDHKTSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python36.MDHKTSnapshot_low_limited_get
    if _newclass:
        low_limited = _swig_property(libtgw_python36.MDHKTSnapshot_low_limited_get, libtgw_python36.MDHKTSnapshot_low_limited_set)
    __swig_setmethods__["bid_price_limit_up"] = libtgw_python36.MDHKTSnapshot_bid_price_limit_up_set
    __swig_getmethods__["bid_price_limit_up"] = libtgw_python36.MDHKTSnapshot_bid_price_limit_up_get
    if _newclass:
        bid_price_limit_up = _swig_property(libtgw_python36.MDHKTSnapshot_bid_price_limit_up_get, libtgw_python36.MDHKTSnapshot_bid_price_limit_up_set)
    __swig_setmethods__["bid_price_limit_down"] = libtgw_python36.MDHKTSnapshot_bid_price_limit_down_set
    __swig_getmethods__["bid_price_limit_down"] = libtgw_python36.MDHKTSnapshot_bid_price_limit_down_get
    if _newclass:
        bid_price_limit_down = _swig_property(libtgw_python36.MDHKTSnapshot_bid_price_limit_down_get, libtgw_python36.MDHKTSnapshot_bid_price_limit_down_set)
    __swig_setmethods__["offer_price_limit_up"] = libtgw_python36.MDHKTSnapshot_offer_price_limit_up_set
    __swig_getmethods__["offer_price_limit_up"] = libtgw_python36.MDHKTSnapshot_offer_price_limit_up_get
    if _newclass:
        offer_price_limit_up = _swig_property(libtgw_python36.MDHKTSnapshot_offer_price_limit_up_get, libtgw_python36.MDHKTSnapshot_offer_price_limit_up_set)
    __swig_setmethods__["offer_price_limit_down"] = libtgw_python36.MDHKTSnapshot_offer_price_limit_down_set
    __swig_getmethods__["offer_price_limit_down"] = libtgw_python36.MDHKTSnapshot_offer_price_limit_down_get
    if _newclass:
        offer_price_limit_down = _swig_property(libtgw_python36.MDHKTSnapshot_offer_price_limit_down_get, libtgw_python36.MDHKTSnapshot_offer_price_limit_down_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDHKTSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDHKTSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDHKTSnapshot_variety_category_get, libtgw_python36.MDHKTSnapshot_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKTSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKTSnapshot
    __del__ = lambda self: None
MDHKTSnapshot_swigregister = libtgw_python36.MDHKTSnapshot_swigregister
MDHKTSnapshot_swigregister(MDHKTSnapshot)

class MDFutureSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDFutureSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDFutureSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDFutureSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDFutureSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDFutureSnapshot_market_type_get, libtgw_python36.MDFutureSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDFutureSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDFutureSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDFutureSnapshot_security_code_get, libtgw_python36.MDFutureSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDFutureSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDFutureSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDFutureSnapshot_orig_time_get, libtgw_python36.MDFutureSnapshot_orig_time_set)
    __swig_setmethods__["action_day"] = libtgw_python36.MDFutureSnapshot_action_day_set
    __swig_getmethods__["action_day"] = libtgw_python36.MDFutureSnapshot_action_day_get
    if _newclass:
        action_day = _swig_property(libtgw_python36.MDFutureSnapshot_action_day_get, libtgw_python36.MDFutureSnapshot_action_day_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDFutureSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDFutureSnapshot_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDFutureSnapshot_last_price_get, libtgw_python36.MDFutureSnapshot_last_price_set)
    __swig_setmethods__["pre_settle_price"] = libtgw_python36.MDFutureSnapshot_pre_settle_price_set
    __swig_getmethods__["pre_settle_price"] = libtgw_python36.MDFutureSnapshot_pre_settle_price_get
    if _newclass:
        pre_settle_price = _swig_property(libtgw_python36.MDFutureSnapshot_pre_settle_price_get, libtgw_python36.MDFutureSnapshot_pre_settle_price_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDFutureSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDFutureSnapshot_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDFutureSnapshot_pre_close_price_get, libtgw_python36.MDFutureSnapshot_pre_close_price_set)
    __swig_setmethods__["pre_open_interest"] = libtgw_python36.MDFutureSnapshot_pre_open_interest_set
    __swig_getmethods__["pre_open_interest"] = libtgw_python36.MDFutureSnapshot_pre_open_interest_get
    if _newclass:
        pre_open_interest = _swig_property(libtgw_python36.MDFutureSnapshot_pre_open_interest_get, libtgw_python36.MDFutureSnapshot_pre_open_interest_set)
    __swig_setmethods__["open_price"] = libtgw_python36.MDFutureSnapshot_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python36.MDFutureSnapshot_open_price_get
    if _newclass:
        open_price = _swig_property(libtgw_python36.MDFutureSnapshot_open_price_get, libtgw_python36.MDFutureSnapshot_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDFutureSnapshot_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDFutureSnapshot_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDFutureSnapshot_high_price_get, libtgw_python36.MDFutureSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDFutureSnapshot_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDFutureSnapshot_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDFutureSnapshot_low_price_get, libtgw_python36.MDFutureSnapshot_low_price_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDFutureSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDFutureSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDFutureSnapshot_total_volume_trade_get, libtgw_python36.MDFutureSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDFutureSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDFutureSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDFutureSnapshot_total_value_trade_get, libtgw_python36.MDFutureSnapshot_total_value_trade_set)
    __swig_setmethods__["open_interest"] = libtgw_python36.MDFutureSnapshot_open_interest_set
    __swig_getmethods__["open_interest"] = libtgw_python36.MDFutureSnapshot_open_interest_get
    if _newclass:
        open_interest = _swig_property(libtgw_python36.MDFutureSnapshot_open_interest_get, libtgw_python36.MDFutureSnapshot_open_interest_set)
    __swig_setmethods__["close_price"] = libtgw_python36.MDFutureSnapshot_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python36.MDFutureSnapshot_close_price_get
    if _newclass:
        close_price = _swig_property(libtgw_python36.MDFutureSnapshot_close_price_get, libtgw_python36.MDFutureSnapshot_close_price_set)
    __swig_setmethods__["settle_price"] = libtgw_python36.MDFutureSnapshot_settle_price_set
    __swig_getmethods__["settle_price"] = libtgw_python36.MDFutureSnapshot_settle_price_get
    if _newclass:
        settle_price = _swig_property(libtgw_python36.MDFutureSnapshot_settle_price_get, libtgw_python36.MDFutureSnapshot_settle_price_set)
    __swig_setmethods__["high_limited"] = libtgw_python36.MDFutureSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python36.MDFutureSnapshot_high_limited_get
    if _newclass:
        high_limited = _swig_property(libtgw_python36.MDFutureSnapshot_high_limited_get, libtgw_python36.MDFutureSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python36.MDFutureSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python36.MDFutureSnapshot_low_limited_get
    if _newclass:
        low_limited = _swig_property(libtgw_python36.MDFutureSnapshot_low_limited_get, libtgw_python36.MDFutureSnapshot_low_limited_set)
    __swig_setmethods__["pre_delta"] = libtgw_python36.MDFutureSnapshot_pre_delta_set
    __swig_getmethods__["pre_delta"] = libtgw_python36.MDFutureSnapshot_pre_delta_get
    if _newclass:
        pre_delta = _swig_property(libtgw_python36.MDFutureSnapshot_pre_delta_get, libtgw_python36.MDFutureSnapshot_pre_delta_set)
    __swig_setmethods__["curr_delta"] = libtgw_python36.MDFutureSnapshot_curr_delta_set
    __swig_getmethods__["curr_delta"] = libtgw_python36.MDFutureSnapshot_curr_delta_get
    if _newclass:
        curr_delta = _swig_property(libtgw_python36.MDFutureSnapshot_curr_delta_get, libtgw_python36.MDFutureSnapshot_curr_delta_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDFutureSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDFutureSnapshot_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDFutureSnapshot_bid_price_get, libtgw_python36.MDFutureSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDFutureSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDFutureSnapshot_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDFutureSnapshot_bid_volume_get, libtgw_python36.MDFutureSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDFutureSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDFutureSnapshot_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDFutureSnapshot_offer_price_get, libtgw_python36.MDFutureSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDFutureSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDFutureSnapshot_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDFutureSnapshot_offer_volume_get, libtgw_python36.MDFutureSnapshot_offer_volume_set)
    __swig_setmethods__["average_price"] = libtgw_python36.MDFutureSnapshot_average_price_set
    __swig_getmethods__["average_price"] = libtgw_python36.MDFutureSnapshot_average_price_get
    if _newclass:
        average_price = _swig_property(libtgw_python36.MDFutureSnapshot_average_price_get, libtgw_python36.MDFutureSnapshot_average_price_set)
    __swig_setmethods__["trading_day"] = libtgw_python36.MDFutureSnapshot_trading_day_set
    __swig_getmethods__["trading_day"] = libtgw_python36.MDFutureSnapshot_trading_day_get
    if _newclass:
        trading_day = _swig_property(libtgw_python36.MDFutureSnapshot_trading_day_get, libtgw_python36.MDFutureSnapshot_trading_day_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDFutureSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDFutureSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDFutureSnapshot_variety_category_get, libtgw_python36.MDFutureSnapshot_variety_category_set)
    __swig_setmethods__["latest_volume_trade"] = libtgw_python36.MDFutureSnapshot_latest_volume_trade_set
    __swig_getmethods__["latest_volume_trade"] = libtgw_python36.MDFutureSnapshot_latest_volume_trade_get
    if _newclass:
        latest_volume_trade = _swig_property(libtgw_python36.MDFutureSnapshot_latest_volume_trade_get, libtgw_python36.MDFutureSnapshot_latest_volume_trade_set)
    __swig_setmethods__["init_volume_trade"] = libtgw_python36.MDFutureSnapshot_init_volume_trade_set
    __swig_getmethods__["init_volume_trade"] = libtgw_python36.MDFutureSnapshot_init_volume_trade_get
    if _newclass:
        init_volume_trade = _swig_property(libtgw_python36.MDFutureSnapshot_init_volume_trade_get, libtgw_python36.MDFutureSnapshot_init_volume_trade_set)
    __swig_setmethods__["change_volume_trade"] = libtgw_python36.MDFutureSnapshot_change_volume_trade_set
    __swig_getmethods__["change_volume_trade"] = libtgw_python36.MDFutureSnapshot_change_volume_trade_get
    if _newclass:
        change_volume_trade = _swig_property(libtgw_python36.MDFutureSnapshot_change_volume_trade_get, libtgw_python36.MDFutureSnapshot_change_volume_trade_set)
    __swig_setmethods__["bid_imply_volume"] = libtgw_python36.MDFutureSnapshot_bid_imply_volume_set
    __swig_getmethods__["bid_imply_volume"] = libtgw_python36.MDFutureSnapshot_bid_imply_volume_get
    if _newclass:
        bid_imply_volume = _swig_property(libtgw_python36.MDFutureSnapshot_bid_imply_volume_get, libtgw_python36.MDFutureSnapshot_bid_imply_volume_set)
    __swig_setmethods__["offer_imply_volume"] = libtgw_python36.MDFutureSnapshot_offer_imply_volume_set
    __swig_getmethods__["offer_imply_volume"] = libtgw_python36.MDFutureSnapshot_offer_imply_volume_get
    if _newclass:
        offer_imply_volume = _swig_property(libtgw_python36.MDFutureSnapshot_offer_imply_volume_get, libtgw_python36.MDFutureSnapshot_offer_imply_volume_set)
    __swig_setmethods__["total_bid_volume_trade"] = libtgw_python36.MDFutureSnapshot_total_bid_volume_trade_set
    __swig_getmethods__["total_bid_volume_trade"] = libtgw_python36.MDFutureSnapshot_total_bid_volume_trade_get
    if _newclass:
        total_bid_volume_trade = _swig_property(libtgw_python36.MDFutureSnapshot_total_bid_volume_trade_get, libtgw_python36.MDFutureSnapshot_total_bid_volume_trade_set)
    __swig_setmethods__["total_ask_volume_trade"] = libtgw_python36.MDFutureSnapshot_total_ask_volume_trade_set
    __swig_getmethods__["total_ask_volume_trade"] = libtgw_python36.MDFutureSnapshot_total_ask_volume_trade_get
    if _newclass:
        total_ask_volume_trade = _swig_property(libtgw_python36.MDFutureSnapshot_total_ask_volume_trade_get, libtgw_python36.MDFutureSnapshot_total_ask_volume_trade_set)
    __swig_setmethods__["exchange_inst_id"] = libtgw_python36.MDFutureSnapshot_exchange_inst_id_set
    __swig_getmethods__["exchange_inst_id"] = libtgw_python36.MDFutureSnapshot_exchange_inst_id_get
    if _newclass:
        exchange_inst_id = _swig_property(libtgw_python36.MDFutureSnapshot_exchange_inst_id_get, libtgw_python36.MDFutureSnapshot_exchange_inst_id_set)

    def __init__(self):
        this = libtgw_python36.new_MDFutureSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDFutureSnapshot
    __del__ = lambda self: None
MDFutureSnapshot_swigregister = libtgw_python36.MDFutureSnapshot_swigregister
MDFutureSnapshot_swigregister(MDFutureSnapshot)

class MDHKExListItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKExListItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKExListItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["order_price"] = libtgw_python36.MDHKExListItem_order_price_set
    __swig_getmethods__["order_price"] = libtgw_python36.MDHKExListItem_order_price_get
    if _newclass:
        order_price = _swig_property(libtgw_python36.MDHKExListItem_order_price_get, libtgw_python36.MDHKExListItem_order_price_set)
    __swig_setmethods__["order_volume"] = libtgw_python36.MDHKExListItem_order_volume_set
    __swig_getmethods__["order_volume"] = libtgw_python36.MDHKExListItem_order_volume_get
    if _newclass:
        order_volume = _swig_property(libtgw_python36.MDHKExListItem_order_volume_get, libtgw_python36.MDHKExListItem_order_volume_set)
    __swig_setmethods__["num_of_orders"] = libtgw_python36.MDHKExListItem_num_of_orders_set
    __swig_getmethods__["num_of_orders"] = libtgw_python36.MDHKExListItem_num_of_orders_get
    if _newclass:
        num_of_orders = _swig_property(libtgw_python36.MDHKExListItem_num_of_orders_get, libtgw_python36.MDHKExListItem_num_of_orders_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKExListItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKExListItem
    __del__ = lambda self: None
MDHKExListItem_swigregister = libtgw_python36.MDHKExListItem_swigregister
MDHKExListItem_swigregister(MDHKExListItem)

class MDHKExOperation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKExOperation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKExOperation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operation_type"] = libtgw_python36.MDHKExOperation_operation_type_set
    __swig_getmethods__["operation_type"] = libtgw_python36.MDHKExOperation_operation_type_get
    if _newclass:
        operation_type = _swig_property(libtgw_python36.MDHKExOperation_operation_type_get, libtgw_python36.MDHKExOperation_operation_type_set)
    __swig_setmethods__["order_id"] = libtgw_python36.MDHKExOperation_order_id_set
    __swig_getmethods__["order_id"] = libtgw_python36.MDHKExOperation_order_id_get
    if _newclass:
        order_id = _swig_property(libtgw_python36.MDHKExOperation_order_id_get, libtgw_python36.MDHKExOperation_order_id_set)
    __swig_setmethods__["side"] = libtgw_python36.MDHKExOperation_side_set
    __swig_getmethods__["side"] = libtgw_python36.MDHKExOperation_side_get
    if _newclass:
        side = _swig_property(libtgw_python36.MDHKExOperation_side_get, libtgw_python36.MDHKExOperation_side_set)
    __swig_setmethods__["order_type"] = libtgw_python36.MDHKExOperation_order_type_set
    __swig_getmethods__["order_type"] = libtgw_python36.MDHKExOperation_order_type_get
    if _newclass:
        order_type = _swig_property(libtgw_python36.MDHKExOperation_order_type_get, libtgw_python36.MDHKExOperation_order_type_set)
    __swig_setmethods__["order_price"] = libtgw_python36.MDHKExOperation_order_price_set
    __swig_getmethods__["order_price"] = libtgw_python36.MDHKExOperation_order_price_get
    if _newclass:
        order_price = _swig_property(libtgw_python36.MDHKExOperation_order_price_get, libtgw_python36.MDHKExOperation_order_price_set)
    __swig_setmethods__["order_volume"] = libtgw_python36.MDHKExOperation_order_volume_set
    __swig_getmethods__["order_volume"] = libtgw_python36.MDHKExOperation_order_volume_get
    if _newclass:
        order_volume = _swig_property(libtgw_python36.MDHKExOperation_order_volume_get, libtgw_python36.MDHKExOperation_order_volume_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKExOperation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKExOperation
    __del__ = lambda self: None
MDHKExOperation_swigregister = libtgw_python36.MDHKExOperation_swigregister
MDHKExOperation_swigregister(MDHKExOperation)

class MDHKExOrderSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKExOrderSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKExOrderSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDHKExOrderSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDHKExOrderSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDHKExOrderSnapshot_market_type_get, libtgw_python36.MDHKExOrderSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDHKExOrderSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDHKExOrderSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDHKExOrderSnapshot_security_code_get, libtgw_python36.MDHKExOrderSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDHKExOrderSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDHKExOrderSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDHKExOrderSnapshot_orig_time_get, libtgw_python36.MDHKExOrderSnapshot_orig_time_set)
    __swig_setmethods__["operation"] = libtgw_python36.MDHKExOrderSnapshot_operation_set
    __swig_getmethods__["operation"] = libtgw_python36.MDHKExOrderSnapshot_operation_get
    if _newclass:
        operation = _swig_property(libtgw_python36.MDHKExOrderSnapshot_operation_get, libtgw_python36.MDHKExOrderSnapshot_operation_set)
    __swig_setmethods__["bid_list"] = libtgw_python36.MDHKExOrderSnapshot_bid_list_set
    __swig_getmethods__["bid_list"] = libtgw_python36.MDHKExOrderSnapshot_bid_list_get
    if _newclass:
        bid_list = _swig_property(libtgw_python36.MDHKExOrderSnapshot_bid_list_get, libtgw_python36.MDHKExOrderSnapshot_bid_list_set)
    __swig_setmethods__["ask_list"] = libtgw_python36.MDHKExOrderSnapshot_ask_list_set
    __swig_getmethods__["ask_list"] = libtgw_python36.MDHKExOrderSnapshot_ask_list_get
    if _newclass:
        ask_list = _swig_property(libtgw_python36.MDHKExOrderSnapshot_ask_list_get, libtgw_python36.MDHKExOrderSnapshot_ask_list_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKExOrderSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKExOrderSnapshot
    __del__ = lambda self: None
MDHKExOrderSnapshot_swigregister = libtgw_python36.MDHKExOrderSnapshot_swigregister
MDHKExOrderSnapshot_swigregister(MDHKExOrderSnapshot)

class MDHKExDetailItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKExDetailItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKExDetailItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = libtgw_python36.MDHKExDetailItem_level_set
    __swig_getmethods__["level"] = libtgw_python36.MDHKExDetailItem_level_get
    if _newclass:
        level = _swig_property(libtgw_python36.MDHKExDetailItem_level_get, libtgw_python36.MDHKExDetailItem_level_set)
    __swig_setmethods__["broker_num"] = libtgw_python36.MDHKExDetailItem_broker_num_set
    __swig_getmethods__["broker_num"] = libtgw_python36.MDHKExDetailItem_broker_num_get
    if _newclass:
        broker_num = _swig_property(libtgw_python36.MDHKExDetailItem_broker_num_get, libtgw_python36.MDHKExDetailItem_broker_num_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKExDetailItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKExDetailItem
    __del__ = lambda self: None
MDHKExDetailItem_swigregister = libtgw_python36.MDHKExDetailItem_swigregister
MDHKExDetailItem_swigregister(MDHKExDetailItem)

class MDHKExOrderBrokerSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKExOrderBrokerSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKExOrderBrokerSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDHKExOrderBrokerSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDHKExOrderBrokerSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDHKExOrderBrokerSnapshot_market_type_get, libtgw_python36.MDHKExOrderBrokerSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDHKExOrderBrokerSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDHKExOrderBrokerSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDHKExOrderBrokerSnapshot_security_code_get, libtgw_python36.MDHKExOrderBrokerSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDHKExOrderBrokerSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDHKExOrderBrokerSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDHKExOrderBrokerSnapshot_orig_time_get, libtgw_python36.MDHKExOrderBrokerSnapshot_orig_time_set)
    __swig_setmethods__["side"] = libtgw_python36.MDHKExOrderBrokerSnapshot_side_set
    __swig_getmethods__["side"] = libtgw_python36.MDHKExOrderBrokerSnapshot_side_get
    if _newclass:
        side = _swig_property(libtgw_python36.MDHKExOrderBrokerSnapshot_side_get, libtgw_python36.MDHKExOrderBrokerSnapshot_side_set)
    __swig_setmethods__["broker_flag"] = libtgw_python36.MDHKExOrderBrokerSnapshot_broker_flag_set
    __swig_getmethods__["broker_flag"] = libtgw_python36.MDHKExOrderBrokerSnapshot_broker_flag_get
    if _newclass:
        broker_flag = _swig_property(libtgw_python36.MDHKExOrderBrokerSnapshot_broker_flag_get, libtgw_python36.MDHKExOrderBrokerSnapshot_broker_flag_set)
    __swig_setmethods__["detail"] = libtgw_python36.MDHKExOrderBrokerSnapshot_detail_set
    __swig_getmethods__["detail"] = libtgw_python36.MDHKExOrderBrokerSnapshot_detail_get
    if _newclass:
        detail = _swig_property(libtgw_python36.MDHKExOrderBrokerSnapshot_detail_get, libtgw_python36.MDHKExOrderBrokerSnapshot_detail_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKExOrderBrokerSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKExOrderBrokerSnapshot
    __del__ = lambda self: None
MDHKExOrderBrokerSnapshot_swigregister = libtgw_python36.MDHKExOrderBrokerSnapshot_swigregister
MDHKExOrderBrokerSnapshot_swigregister(MDHKExOrderBrokerSnapshot)

class MDAfterHourFixedPriceSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDAfterHourFixedPriceSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDAfterHourFixedPriceSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_market_type_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_security_code_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_security_code_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_variety_category_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_variety_category_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_orig_time_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_trading_phase_code_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_trading_phase_code_set)
    __swig_setmethods__["close_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_close_price_get
    if _newclass:
        close_price = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_close_price_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_close_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_price_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_volume_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_price_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_volume_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_offer_volume_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_pre_close_price_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_pre_close_price_set)
    __swig_setmethods__["num_trades"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_num_trades_set
    __swig_getmethods__["num_trades"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_num_trades_get
    if _newclass:
        num_trades = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_num_trades_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_total_volume_trade_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDAfterHourFixedPriceSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDAfterHourFixedPriceSnapshot_total_value_trade_get, libtgw_python36.MDAfterHourFixedPriceSnapshot_total_value_trade_set)

    def __init__(self):
        this = libtgw_python36.new_MDAfterHourFixedPriceSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDAfterHourFixedPriceSnapshot
    __del__ = lambda self: None
MDAfterHourFixedPriceSnapshot_swigregister = libtgw_python36.MDAfterHourFixedPriceSnapshot_swigregister
MDAfterHourFixedPriceSnapshot_swigregister(MDAfterHourFixedPriceSnapshot)

class MDCSIIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCSIIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCSIIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDCSIIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDCSIIndexSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDCSIIndexSnapshot_market_type_get, libtgw_python36.MDCSIIndexSnapshot_market_type_set)
    __swig_setmethods__["index_market"] = libtgw_python36.MDCSIIndexSnapshot_index_market_set
    __swig_getmethods__["index_market"] = libtgw_python36.MDCSIIndexSnapshot_index_market_get
    if _newclass:
        index_market = _swig_property(libtgw_python36.MDCSIIndexSnapshot_index_market_get, libtgw_python36.MDCSIIndexSnapshot_index_market_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDCSIIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDCSIIndexSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDCSIIndexSnapshot_security_code_get, libtgw_python36.MDCSIIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDCSIIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDCSIIndexSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDCSIIndexSnapshot_orig_time_get, libtgw_python36.MDCSIIndexSnapshot_orig_time_set)
    __swig_setmethods__["last_index"] = libtgw_python36.MDCSIIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = libtgw_python36.MDCSIIndexSnapshot_last_index_get
    if _newclass:
        last_index = _swig_property(libtgw_python36.MDCSIIndexSnapshot_last_index_get, libtgw_python36.MDCSIIndexSnapshot_last_index_set)
    __swig_setmethods__["open_index"] = libtgw_python36.MDCSIIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = libtgw_python36.MDCSIIndexSnapshot_open_index_get
    if _newclass:
        open_index = _swig_property(libtgw_python36.MDCSIIndexSnapshot_open_index_get, libtgw_python36.MDCSIIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = libtgw_python36.MDCSIIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = libtgw_python36.MDCSIIndexSnapshot_high_index_get
    if _newclass:
        high_index = _swig_property(libtgw_python36.MDCSIIndexSnapshot_high_index_get, libtgw_python36.MDCSIIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = libtgw_python36.MDCSIIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = libtgw_python36.MDCSIIndexSnapshot_low_index_get
    if _newclass:
        low_index = _swig_property(libtgw_python36.MDCSIIndexSnapshot_low_index_get, libtgw_python36.MDCSIIndexSnapshot_low_index_set)
    __swig_setmethods__["close_index"] = libtgw_python36.MDCSIIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = libtgw_python36.MDCSIIndexSnapshot_close_index_get
    if _newclass:
        close_index = _swig_property(libtgw_python36.MDCSIIndexSnapshot_close_index_get, libtgw_python36.MDCSIIndexSnapshot_close_index_set)
    __swig_setmethods__["pre_close_index"] = libtgw_python36.MDCSIIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = libtgw_python36.MDCSIIndexSnapshot_pre_close_index_get
    if _newclass:
        pre_close_index = _swig_property(libtgw_python36.MDCSIIndexSnapshot_pre_close_index_get, libtgw_python36.MDCSIIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["change"] = libtgw_python36.MDCSIIndexSnapshot_change_set
    __swig_getmethods__["change"] = libtgw_python36.MDCSIIndexSnapshot_change_get
    if _newclass:
        change = _swig_property(libtgw_python36.MDCSIIndexSnapshot_change_get, libtgw_python36.MDCSIIndexSnapshot_change_set)
    __swig_setmethods__["ratio_of_change"] = libtgw_python36.MDCSIIndexSnapshot_ratio_of_change_set
    __swig_getmethods__["ratio_of_change"] = libtgw_python36.MDCSIIndexSnapshot_ratio_of_change_get
    if _newclass:
        ratio_of_change = _swig_property(libtgw_python36.MDCSIIndexSnapshot_ratio_of_change_get, libtgw_python36.MDCSIIndexSnapshot_ratio_of_change_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDCSIIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDCSIIndexSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDCSIIndexSnapshot_total_volume_trade_get, libtgw_python36.MDCSIIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDCSIIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDCSIIndexSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDCSIIndexSnapshot_total_value_trade_get, libtgw_python36.MDCSIIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["exchange_rate"] = libtgw_python36.MDCSIIndexSnapshot_exchange_rate_set
    __swig_getmethods__["exchange_rate"] = libtgw_python36.MDCSIIndexSnapshot_exchange_rate_get
    if _newclass:
        exchange_rate = _swig_property(libtgw_python36.MDCSIIndexSnapshot_exchange_rate_get, libtgw_python36.MDCSIIndexSnapshot_exchange_rate_set)
    __swig_setmethods__["currency_symbol"] = libtgw_python36.MDCSIIndexSnapshot_currency_symbol_set
    __swig_getmethods__["currency_symbol"] = libtgw_python36.MDCSIIndexSnapshot_currency_symbol_get
    if _newclass:
        currency_symbol = _swig_property(libtgw_python36.MDCSIIndexSnapshot_currency_symbol_get, libtgw_python36.MDCSIIndexSnapshot_currency_symbol_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDCSIIndexSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDCSIIndexSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDCSIIndexSnapshot_variety_category_get, libtgw_python36.MDCSIIndexSnapshot_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDCSIIndexSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDCSIIndexSnapshot
    __del__ = lambda self: None
MDCSIIndexSnapshot_swigregister = libtgw_python36.MDCSIIndexSnapshot_swigregister
MDCSIIndexSnapshot_swigregister(MDCSIIndexSnapshot)

class MDCnIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCnIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCnIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDCnIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDCnIndexSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDCnIndexSnapshot_market_type_get, libtgw_python36.MDCnIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDCnIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDCnIndexSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDCnIndexSnapshot_security_code_get, libtgw_python36.MDCnIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDCnIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDCnIndexSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDCnIndexSnapshot_orig_time_get, libtgw_python36.MDCnIndexSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDCnIndexSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDCnIndexSnapshot_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDCnIndexSnapshot_trading_phase_code_get, libtgw_python36.MDCnIndexSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_index"] = libtgw_python36.MDCnIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = libtgw_python36.MDCnIndexSnapshot_pre_close_index_get
    if _newclass:
        pre_close_index = _swig_property(libtgw_python36.MDCnIndexSnapshot_pre_close_index_get, libtgw_python36.MDCnIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["open_index"] = libtgw_python36.MDCnIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = libtgw_python36.MDCnIndexSnapshot_open_index_get
    if _newclass:
        open_index = _swig_property(libtgw_python36.MDCnIndexSnapshot_open_index_get, libtgw_python36.MDCnIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = libtgw_python36.MDCnIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = libtgw_python36.MDCnIndexSnapshot_high_index_get
    if _newclass:
        high_index = _swig_property(libtgw_python36.MDCnIndexSnapshot_high_index_get, libtgw_python36.MDCnIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = libtgw_python36.MDCnIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = libtgw_python36.MDCnIndexSnapshot_low_index_get
    if _newclass:
        low_index = _swig_property(libtgw_python36.MDCnIndexSnapshot_low_index_get, libtgw_python36.MDCnIndexSnapshot_low_index_set)
    __swig_setmethods__["last_index"] = libtgw_python36.MDCnIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = libtgw_python36.MDCnIndexSnapshot_last_index_get
    if _newclass:
        last_index = _swig_property(libtgw_python36.MDCnIndexSnapshot_last_index_get, libtgw_python36.MDCnIndexSnapshot_last_index_set)
    __swig_setmethods__["close_index"] = libtgw_python36.MDCnIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = libtgw_python36.MDCnIndexSnapshot_close_index_get
    if _newclass:
        close_index = _swig_property(libtgw_python36.MDCnIndexSnapshot_close_index_get, libtgw_python36.MDCnIndexSnapshot_close_index_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDCnIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDCnIndexSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDCnIndexSnapshot_total_volume_trade_get, libtgw_python36.MDCnIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDCnIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDCnIndexSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDCnIndexSnapshot_total_value_trade_get, libtgw_python36.MDCnIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDCnIndexSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDCnIndexSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDCnIndexSnapshot_variety_category_get, libtgw_python36.MDCnIndexSnapshot_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDCnIndexSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDCnIndexSnapshot
    __del__ = lambda self: None
MDCnIndexSnapshot_swigregister = libtgw_python36.MDCnIndexSnapshot_swigregister
MDCnIndexSnapshot_swigregister(MDCnIndexSnapshot)

class MDHKTRealtimeLimit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTRealtimeLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTRealtimeLimit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDHKTRealtimeLimit_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDHKTRealtimeLimit_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDHKTRealtimeLimit_market_type_get, libtgw_python36.MDHKTRealtimeLimit_market_type_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDHKTRealtimeLimit_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDHKTRealtimeLimit_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDHKTRealtimeLimit_orig_time_get, libtgw_python36.MDHKTRealtimeLimit_orig_time_set)
    __swig_setmethods__["threshold_amount"] = libtgw_python36.MDHKTRealtimeLimit_threshold_amount_set
    __swig_getmethods__["threshold_amount"] = libtgw_python36.MDHKTRealtimeLimit_threshold_amount_get
    if _newclass:
        threshold_amount = _swig_property(libtgw_python36.MDHKTRealtimeLimit_threshold_amount_get, libtgw_python36.MDHKTRealtimeLimit_threshold_amount_set)
    __swig_setmethods__["pos_amt"] = libtgw_python36.MDHKTRealtimeLimit_pos_amt_set
    __swig_getmethods__["pos_amt"] = libtgw_python36.MDHKTRealtimeLimit_pos_amt_get
    if _newclass:
        pos_amt = _swig_property(libtgw_python36.MDHKTRealtimeLimit_pos_amt_get, libtgw_python36.MDHKTRealtimeLimit_pos_amt_set)
    __swig_setmethods__["amount_status"] = libtgw_python36.MDHKTRealtimeLimit_amount_status_set
    __swig_getmethods__["amount_status"] = libtgw_python36.MDHKTRealtimeLimit_amount_status_get
    if _newclass:
        amount_status = _swig_property(libtgw_python36.MDHKTRealtimeLimit_amount_status_get, libtgw_python36.MDHKTRealtimeLimit_amount_status_set)
    __swig_setmethods__["mkt_status"] = libtgw_python36.MDHKTRealtimeLimit_mkt_status_set
    __swig_getmethods__["mkt_status"] = libtgw_python36.MDHKTRealtimeLimit_mkt_status_get
    if _newclass:
        mkt_status = _swig_property(libtgw_python36.MDHKTRealtimeLimit_mkt_status_get, libtgw_python36.MDHKTRealtimeLimit_mkt_status_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDHKTRealtimeLimit_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDHKTRealtimeLimit_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDHKTRealtimeLimit_variety_category_get, libtgw_python36.MDHKTRealtimeLimit_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKTRealtimeLimit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKTRealtimeLimit
    __del__ = lambda self: None
MDHKTRealtimeLimit_swigregister = libtgw_python36.MDHKTRealtimeLimit_swigregister
MDHKTRealtimeLimit_swigregister(MDHKTRealtimeLimit)

class MDHKTProductStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTProductStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTProductStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDHKTProductStatus_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDHKTProductStatus_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDHKTProductStatus_market_type_get, libtgw_python36.MDHKTProductStatus_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDHKTProductStatus_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDHKTProductStatus_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDHKTProductStatus_security_code_get, libtgw_python36.MDHKTProductStatus_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDHKTProductStatus_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDHKTProductStatus_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDHKTProductStatus_orig_time_get, libtgw_python36.MDHKTProductStatus_orig_time_set)
    __swig_setmethods__["trading_status1"] = libtgw_python36.MDHKTProductStatus_trading_status1_set
    __swig_getmethods__["trading_status1"] = libtgw_python36.MDHKTProductStatus_trading_status1_get
    if _newclass:
        trading_status1 = _swig_property(libtgw_python36.MDHKTProductStatus_trading_status1_get, libtgw_python36.MDHKTProductStatus_trading_status1_set)
    __swig_setmethods__["trading_status2"] = libtgw_python36.MDHKTProductStatus_trading_status2_set
    __swig_getmethods__["trading_status2"] = libtgw_python36.MDHKTProductStatus_trading_status2_get
    if _newclass:
        trading_status2 = _swig_property(libtgw_python36.MDHKTProductStatus_trading_status2_get, libtgw_python36.MDHKTProductStatus_trading_status2_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDHKTProductStatus_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDHKTProductStatus_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDHKTProductStatus_variety_category_get, libtgw_python36.MDHKTProductStatus_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKTProductStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKTProductStatus
    __del__ = lambda self: None
MDHKTProductStatus_swigregister = libtgw_python36.MDHKTProductStatus_swigregister
MDHKTProductStatus_swigregister(MDHKTProductStatus)

class MDHKTVCM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTVCM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTVCM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDHKTVCM_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDHKTVCM_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDHKTVCM_market_type_get, libtgw_python36.MDHKTVCM_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDHKTVCM_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDHKTVCM_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDHKTVCM_security_code_get, libtgw_python36.MDHKTVCM_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDHKTVCM_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDHKTVCM_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDHKTVCM_orig_time_get, libtgw_python36.MDHKTVCM_orig_time_set)
    __swig_setmethods__["start_time"] = libtgw_python36.MDHKTVCM_start_time_set
    __swig_getmethods__["start_time"] = libtgw_python36.MDHKTVCM_start_time_get
    if _newclass:
        start_time = _swig_property(libtgw_python36.MDHKTVCM_start_time_get, libtgw_python36.MDHKTVCM_start_time_set)
    __swig_setmethods__["end_time"] = libtgw_python36.MDHKTVCM_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python36.MDHKTVCM_end_time_get
    if _newclass:
        end_time = _swig_property(libtgw_python36.MDHKTVCM_end_time_get, libtgw_python36.MDHKTVCM_end_time_set)
    __swig_setmethods__["ref_price"] = libtgw_python36.MDHKTVCM_ref_price_set
    __swig_getmethods__["ref_price"] = libtgw_python36.MDHKTVCM_ref_price_get
    if _newclass:
        ref_price = _swig_property(libtgw_python36.MDHKTVCM_ref_price_get, libtgw_python36.MDHKTVCM_ref_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDHKTVCM_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDHKTVCM_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDHKTVCM_low_price_get, libtgw_python36.MDHKTVCM_low_price_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDHKTVCM_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDHKTVCM_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDHKTVCM_high_price_get, libtgw_python36.MDHKTVCM_high_price_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDHKTVCM_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDHKTVCM_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDHKTVCM_variety_category_get, libtgw_python36.MDHKTVCM_variety_category_set)

    def __init__(self):
        this = libtgw_python36.new_MDHKTVCM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDHKTVCM
    __del__ = lambda self: None
MDHKTVCM_swigregister = libtgw_python36.MDHKTVCM_swigregister
MDHKTVCM_swigregister(MDHKTVCM)

class MDSnapshotL2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshotL2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshotL2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDSnapshotL2_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDSnapshotL2_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDSnapshotL2_market_type_get, libtgw_python36.MDSnapshotL2_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDSnapshotL2_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDSnapshotL2_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDSnapshotL2_security_code_get, libtgw_python36.MDSnapshotL2_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDSnapshotL2_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDSnapshotL2_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDSnapshotL2_orig_time_get, libtgw_python36.MDSnapshotL2_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python36.MDSnapshotL2_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python36.MDSnapshotL2_trading_phase_code_get
    if _newclass:
        trading_phase_code = _swig_property(libtgw_python36.MDSnapshotL2_trading_phase_code_get, libtgw_python36.MDSnapshotL2_trading_phase_code_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDSnapshotL2_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDSnapshotL2_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDSnapshotL2_pre_close_price_get, libtgw_python36.MDSnapshotL2_pre_close_price_set)
    __swig_setmethods__["open_price"] = libtgw_python36.MDSnapshotL2_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python36.MDSnapshotL2_open_price_get
    if _newclass:
        open_price = _swig_property(libtgw_python36.MDSnapshotL2_open_price_get, libtgw_python36.MDSnapshotL2_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python36.MDSnapshotL2_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python36.MDSnapshotL2_high_price_get
    if _newclass:
        high_price = _swig_property(libtgw_python36.MDSnapshotL2_high_price_get, libtgw_python36.MDSnapshotL2_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python36.MDSnapshotL2_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python36.MDSnapshotL2_low_price_get
    if _newclass:
        low_price = _swig_property(libtgw_python36.MDSnapshotL2_low_price_get, libtgw_python36.MDSnapshotL2_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDSnapshotL2_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDSnapshotL2_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDSnapshotL2_last_price_get, libtgw_python36.MDSnapshotL2_last_price_set)
    __swig_setmethods__["close_price"] = libtgw_python36.MDSnapshotL2_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python36.MDSnapshotL2_close_price_get
    if _newclass:
        close_price = _swig_property(libtgw_python36.MDSnapshotL2_close_price_get, libtgw_python36.MDSnapshotL2_close_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDSnapshotL2_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDSnapshotL2_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDSnapshotL2_bid_price_get, libtgw_python36.MDSnapshotL2_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDSnapshotL2_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDSnapshotL2_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDSnapshotL2_bid_volume_get, libtgw_python36.MDSnapshotL2_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDSnapshotL2_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDSnapshotL2_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDSnapshotL2_offer_price_get, libtgw_python36.MDSnapshotL2_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDSnapshotL2_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDSnapshotL2_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDSnapshotL2_offer_volume_get, libtgw_python36.MDSnapshotL2_offer_volume_set)
    __swig_setmethods__["num_trades"] = libtgw_python36.MDSnapshotL2_num_trades_set
    __swig_getmethods__["num_trades"] = libtgw_python36.MDSnapshotL2_num_trades_get
    if _newclass:
        num_trades = _swig_property(libtgw_python36.MDSnapshotL2_num_trades_get, libtgw_python36.MDSnapshotL2_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDSnapshotL2_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDSnapshotL2_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDSnapshotL2_total_volume_trade_get, libtgw_python36.MDSnapshotL2_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDSnapshotL2_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDSnapshotL2_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDSnapshotL2_total_value_trade_get, libtgw_python36.MDSnapshotL2_total_value_trade_set)
    __swig_setmethods__["total_bid_volume"] = libtgw_python36.MDSnapshotL2_total_bid_volume_set
    __swig_getmethods__["total_bid_volume"] = libtgw_python36.MDSnapshotL2_total_bid_volume_get
    if _newclass:
        total_bid_volume = _swig_property(libtgw_python36.MDSnapshotL2_total_bid_volume_get, libtgw_python36.MDSnapshotL2_total_bid_volume_set)
    __swig_setmethods__["total_offer_volume"] = libtgw_python36.MDSnapshotL2_total_offer_volume_set
    __swig_getmethods__["total_offer_volume"] = libtgw_python36.MDSnapshotL2_total_offer_volume_get
    if _newclass:
        total_offer_volume = _swig_property(libtgw_python36.MDSnapshotL2_total_offer_volume_get, libtgw_python36.MDSnapshotL2_total_offer_volume_set)
    __swig_setmethods__["weighted_avg_bid_price"] = libtgw_python36.MDSnapshotL2_weighted_avg_bid_price_set
    __swig_getmethods__["weighted_avg_bid_price"] = libtgw_python36.MDSnapshotL2_weighted_avg_bid_price_get
    if _newclass:
        weighted_avg_bid_price = _swig_property(libtgw_python36.MDSnapshotL2_weighted_avg_bid_price_get, libtgw_python36.MDSnapshotL2_weighted_avg_bid_price_set)
    __swig_setmethods__["weighted_avg_offer_price"] = libtgw_python36.MDSnapshotL2_weighted_avg_offer_price_set
    __swig_getmethods__["weighted_avg_offer_price"] = libtgw_python36.MDSnapshotL2_weighted_avg_offer_price_get
    if _newclass:
        weighted_avg_offer_price = _swig_property(libtgw_python36.MDSnapshotL2_weighted_avg_offer_price_get, libtgw_python36.MDSnapshotL2_weighted_avg_offer_price_set)
    __swig_setmethods__["IOPV"] = libtgw_python36.MDSnapshotL2_IOPV_set
    __swig_getmethods__["IOPV"] = libtgw_python36.MDSnapshotL2_IOPV_get
    if _newclass:
        IOPV = _swig_property(libtgw_python36.MDSnapshotL2_IOPV_get, libtgw_python36.MDSnapshotL2_IOPV_set)
    __swig_setmethods__["yield_to_maturity"] = libtgw_python36.MDSnapshotL2_yield_to_maturity_set
    __swig_getmethods__["yield_to_maturity"] = libtgw_python36.MDSnapshotL2_yield_to_maturity_get
    if _newclass:
        yield_to_maturity = _swig_property(libtgw_python36.MDSnapshotL2_yield_to_maturity_get, libtgw_python36.MDSnapshotL2_yield_to_maturity_set)
    __swig_setmethods__["high_limited"] = libtgw_python36.MDSnapshotL2_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python36.MDSnapshotL2_high_limited_get
    if _newclass:
        high_limited = _swig_property(libtgw_python36.MDSnapshotL2_high_limited_get, libtgw_python36.MDSnapshotL2_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python36.MDSnapshotL2_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python36.MDSnapshotL2_low_limited_get
    if _newclass:
        low_limited = _swig_property(libtgw_python36.MDSnapshotL2_low_limited_get, libtgw_python36.MDSnapshotL2_low_limited_set)
    __swig_setmethods__["price_earning_ratio1"] = libtgw_python36.MDSnapshotL2_price_earning_ratio1_set
    __swig_getmethods__["price_earning_ratio1"] = libtgw_python36.MDSnapshotL2_price_earning_ratio1_get
    if _newclass:
        price_earning_ratio1 = _swig_property(libtgw_python36.MDSnapshotL2_price_earning_ratio1_get, libtgw_python36.MDSnapshotL2_price_earning_ratio1_set)
    __swig_setmethods__["price_earning_ratio2"] = libtgw_python36.MDSnapshotL2_price_earning_ratio2_set
    __swig_getmethods__["price_earning_ratio2"] = libtgw_python36.MDSnapshotL2_price_earning_ratio2_get
    if _newclass:
        price_earning_ratio2 = _swig_property(libtgw_python36.MDSnapshotL2_price_earning_ratio2_get, libtgw_python36.MDSnapshotL2_price_earning_ratio2_set)
    __swig_setmethods__["change1"] = libtgw_python36.MDSnapshotL2_change1_set
    __swig_getmethods__["change1"] = libtgw_python36.MDSnapshotL2_change1_get
    if _newclass:
        change1 = _swig_property(libtgw_python36.MDSnapshotL2_change1_get, libtgw_python36.MDSnapshotL2_change1_set)
    __swig_setmethods__["change2"] = libtgw_python36.MDSnapshotL2_change2_set
    __swig_getmethods__["change2"] = libtgw_python36.MDSnapshotL2_change2_get
    if _newclass:
        change2 = _swig_property(libtgw_python36.MDSnapshotL2_change2_get, libtgw_python36.MDSnapshotL2_change2_set)

    def __init__(self):
        this = libtgw_python36.new_MDSnapshotL2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDSnapshotL2
    __del__ = lambda self: None
MDSnapshotL2_swigregister = libtgw_python36.MDSnapshotL2_swigregister
MDSnapshotL2_swigregister(MDSnapshotL2)

class MDTickExecution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTickExecution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTickExecution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDTickExecution_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDTickExecution_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDTickExecution_market_type_get, libtgw_python36.MDTickExecution_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDTickExecution_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDTickExecution_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDTickExecution_security_code_get, libtgw_python36.MDTickExecution_security_code_set)
    __swig_setmethods__["exec_time"] = libtgw_python36.MDTickExecution_exec_time_set
    __swig_getmethods__["exec_time"] = libtgw_python36.MDTickExecution_exec_time_get
    if _newclass:
        exec_time = _swig_property(libtgw_python36.MDTickExecution_exec_time_get, libtgw_python36.MDTickExecution_exec_time_set)
    __swig_setmethods__["channel_no"] = libtgw_python36.MDTickExecution_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python36.MDTickExecution_channel_no_get
    if _newclass:
        channel_no = _swig_property(libtgw_python36.MDTickExecution_channel_no_get, libtgw_python36.MDTickExecution_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = libtgw_python36.MDTickExecution_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = libtgw_python36.MDTickExecution_appl_seq_num_get
    if _newclass:
        appl_seq_num = _swig_property(libtgw_python36.MDTickExecution_appl_seq_num_get, libtgw_python36.MDTickExecution_appl_seq_num_set)
    __swig_setmethods__["exec_price"] = libtgw_python36.MDTickExecution_exec_price_set
    __swig_getmethods__["exec_price"] = libtgw_python36.MDTickExecution_exec_price_get
    if _newclass:
        exec_price = _swig_property(libtgw_python36.MDTickExecution_exec_price_get, libtgw_python36.MDTickExecution_exec_price_set)
    __swig_setmethods__["exec_volume"] = libtgw_python36.MDTickExecution_exec_volume_set
    __swig_getmethods__["exec_volume"] = libtgw_python36.MDTickExecution_exec_volume_get
    if _newclass:
        exec_volume = _swig_property(libtgw_python36.MDTickExecution_exec_volume_get, libtgw_python36.MDTickExecution_exec_volume_set)
    __swig_setmethods__["value_trade"] = libtgw_python36.MDTickExecution_value_trade_set
    __swig_getmethods__["value_trade"] = libtgw_python36.MDTickExecution_value_trade_get
    if _newclass:
        value_trade = _swig_property(libtgw_python36.MDTickExecution_value_trade_get, libtgw_python36.MDTickExecution_value_trade_set)
    __swig_setmethods__["bid_appl_seq_num"] = libtgw_python36.MDTickExecution_bid_appl_seq_num_set
    __swig_getmethods__["bid_appl_seq_num"] = libtgw_python36.MDTickExecution_bid_appl_seq_num_get
    if _newclass:
        bid_appl_seq_num = _swig_property(libtgw_python36.MDTickExecution_bid_appl_seq_num_get, libtgw_python36.MDTickExecution_bid_appl_seq_num_set)
    __swig_setmethods__["offer_appl_seq_num"] = libtgw_python36.MDTickExecution_offer_appl_seq_num_set
    __swig_getmethods__["offer_appl_seq_num"] = libtgw_python36.MDTickExecution_offer_appl_seq_num_get
    if _newclass:
        offer_appl_seq_num = _swig_property(libtgw_python36.MDTickExecution_offer_appl_seq_num_get, libtgw_python36.MDTickExecution_offer_appl_seq_num_set)
    __swig_setmethods__["side"] = libtgw_python36.MDTickExecution_side_set
    __swig_getmethods__["side"] = libtgw_python36.MDTickExecution_side_get
    if _newclass:
        side = _swig_property(libtgw_python36.MDTickExecution_side_get, libtgw_python36.MDTickExecution_side_set)
    __swig_setmethods__["exec_type"] = libtgw_python36.MDTickExecution_exec_type_set
    __swig_getmethods__["exec_type"] = libtgw_python36.MDTickExecution_exec_type_get
    if _newclass:
        exec_type = _swig_property(libtgw_python36.MDTickExecution_exec_type_get, libtgw_python36.MDTickExecution_exec_type_set)
    __swig_setmethods__["md_stream_id"] = libtgw_python36.MDTickExecution_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = libtgw_python36.MDTickExecution_md_stream_id_get
    if _newclass:
        md_stream_id = _swig_property(libtgw_python36.MDTickExecution_md_stream_id_get, libtgw_python36.MDTickExecution_md_stream_id_set)
    __swig_setmethods__["biz_index"] = libtgw_python36.MDTickExecution_biz_index_set
    __swig_getmethods__["biz_index"] = libtgw_python36.MDTickExecution_biz_index_get
    if _newclass:
        biz_index = _swig_property(libtgw_python36.MDTickExecution_biz_index_get, libtgw_python36.MDTickExecution_biz_index_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDTickExecution_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDTickExecution_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDTickExecution_variety_category_get, libtgw_python36.MDTickExecution_variety_category_set)
    __swig_setmethods__["cancel_flag"] = libtgw_python36.MDTickExecution_cancel_flag_set
    __swig_getmethods__["cancel_flag"] = libtgw_python36.MDTickExecution_cancel_flag_get
    if _newclass:
        cancel_flag = _swig_property(libtgw_python36.MDTickExecution_cancel_flag_get, libtgw_python36.MDTickExecution_cancel_flag_set)

    def __init__(self):
        this = libtgw_python36.new_MDTickExecution()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDTickExecution
    __del__ = lambda self: None
MDTickExecution_swigregister = libtgw_python36.MDTickExecution_swigregister
MDTickExecution_swigregister(MDTickExecution)

class MDTickOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTickOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTickOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDTickOrder_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDTickOrder_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDTickOrder_market_type_get, libtgw_python36.MDTickOrder_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDTickOrder_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDTickOrder_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDTickOrder_security_code_get, libtgw_python36.MDTickOrder_security_code_set)
    __swig_setmethods__["appl_seq_num"] = libtgw_python36.MDTickOrder_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = libtgw_python36.MDTickOrder_appl_seq_num_get
    if _newclass:
        appl_seq_num = _swig_property(libtgw_python36.MDTickOrder_appl_seq_num_get, libtgw_python36.MDTickOrder_appl_seq_num_set)
    __swig_setmethods__["channel_no"] = libtgw_python36.MDTickOrder_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python36.MDTickOrder_channel_no_get
    if _newclass:
        channel_no = _swig_property(libtgw_python36.MDTickOrder_channel_no_get, libtgw_python36.MDTickOrder_channel_no_set)
    __swig_setmethods__["order_time"] = libtgw_python36.MDTickOrder_order_time_set
    __swig_getmethods__["order_time"] = libtgw_python36.MDTickOrder_order_time_get
    if _newclass:
        order_time = _swig_property(libtgw_python36.MDTickOrder_order_time_get, libtgw_python36.MDTickOrder_order_time_set)
    __swig_setmethods__["order_price"] = libtgw_python36.MDTickOrder_order_price_set
    __swig_getmethods__["order_price"] = libtgw_python36.MDTickOrder_order_price_get
    if _newclass:
        order_price = _swig_property(libtgw_python36.MDTickOrder_order_price_get, libtgw_python36.MDTickOrder_order_price_set)
    __swig_setmethods__["order_volume"] = libtgw_python36.MDTickOrder_order_volume_set
    __swig_getmethods__["order_volume"] = libtgw_python36.MDTickOrder_order_volume_get
    if _newclass:
        order_volume = _swig_property(libtgw_python36.MDTickOrder_order_volume_get, libtgw_python36.MDTickOrder_order_volume_set)
    __swig_setmethods__["side"] = libtgw_python36.MDTickOrder_side_set
    __swig_getmethods__["side"] = libtgw_python36.MDTickOrder_side_get
    if _newclass:
        side = _swig_property(libtgw_python36.MDTickOrder_side_get, libtgw_python36.MDTickOrder_side_set)
    __swig_setmethods__["order_type"] = libtgw_python36.MDTickOrder_order_type_set
    __swig_getmethods__["order_type"] = libtgw_python36.MDTickOrder_order_type_get
    if _newclass:
        order_type = _swig_property(libtgw_python36.MDTickOrder_order_type_get, libtgw_python36.MDTickOrder_order_type_set)
    __swig_setmethods__["md_stream_id"] = libtgw_python36.MDTickOrder_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = libtgw_python36.MDTickOrder_md_stream_id_get
    if _newclass:
        md_stream_id = _swig_property(libtgw_python36.MDTickOrder_md_stream_id_get, libtgw_python36.MDTickOrder_md_stream_id_set)
    __swig_setmethods__["product_status"] = libtgw_python36.MDTickOrder_product_status_set
    __swig_getmethods__["product_status"] = libtgw_python36.MDTickOrder_product_status_get
    if _newclass:
        product_status = _swig_property(libtgw_python36.MDTickOrder_product_status_get, libtgw_python36.MDTickOrder_product_status_set)
    __swig_setmethods__["orig_order_no"] = libtgw_python36.MDTickOrder_orig_order_no_set
    __swig_getmethods__["orig_order_no"] = libtgw_python36.MDTickOrder_orig_order_no_get
    if _newclass:
        orig_order_no = _swig_property(libtgw_python36.MDTickOrder_orig_order_no_get, libtgw_python36.MDTickOrder_orig_order_no_set)
    __swig_setmethods__["biz_index"] = libtgw_python36.MDTickOrder_biz_index_set
    __swig_getmethods__["biz_index"] = libtgw_python36.MDTickOrder_biz_index_get
    if _newclass:
        biz_index = _swig_property(libtgw_python36.MDTickOrder_biz_index_get, libtgw_python36.MDTickOrder_biz_index_set)

    def __init__(self):
        this = libtgw_python36.new_MDTickOrder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDTickOrder
    __del__ = lambda self: None
MDTickOrder_swigregister = libtgw_python36.MDTickOrder_swigregister
MDTickOrder_swigregister(MDTickOrder)

class MDOrderQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOrderQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOrderQueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDOrderQueue_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDOrderQueue_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDOrderQueue_market_type_get, libtgw_python36.MDOrderQueue_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDOrderQueue_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDOrderQueue_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDOrderQueue_security_code_get, libtgw_python36.MDOrderQueue_security_code_set)
    __swig_setmethods__["order_time"] = libtgw_python36.MDOrderQueue_order_time_set
    __swig_getmethods__["order_time"] = libtgw_python36.MDOrderQueue_order_time_get
    if _newclass:
        order_time = _swig_property(libtgw_python36.MDOrderQueue_order_time_get, libtgw_python36.MDOrderQueue_order_time_set)
    __swig_setmethods__["side"] = libtgw_python36.MDOrderQueue_side_set
    __swig_getmethods__["side"] = libtgw_python36.MDOrderQueue_side_get
    if _newclass:
        side = _swig_property(libtgw_python36.MDOrderQueue_side_get, libtgw_python36.MDOrderQueue_side_set)
    __swig_setmethods__["order_price"] = libtgw_python36.MDOrderQueue_order_price_set
    __swig_getmethods__["order_price"] = libtgw_python36.MDOrderQueue_order_price_get
    if _newclass:
        order_price = _swig_property(libtgw_python36.MDOrderQueue_order_price_get, libtgw_python36.MDOrderQueue_order_price_set)
    __swig_setmethods__["order_volume"] = libtgw_python36.MDOrderQueue_order_volume_set
    __swig_getmethods__["order_volume"] = libtgw_python36.MDOrderQueue_order_volume_get
    if _newclass:
        order_volume = _swig_property(libtgw_python36.MDOrderQueue_order_volume_get, libtgw_python36.MDOrderQueue_order_volume_set)
    __swig_setmethods__["num_of_orders"] = libtgw_python36.MDOrderQueue_num_of_orders_set
    __swig_getmethods__["num_of_orders"] = libtgw_python36.MDOrderQueue_num_of_orders_get
    if _newclass:
        num_of_orders = _swig_property(libtgw_python36.MDOrderQueue_num_of_orders_get, libtgw_python36.MDOrderQueue_num_of_orders_set)
    __swig_setmethods__["items"] = libtgw_python36.MDOrderQueue_items_set
    __swig_getmethods__["items"] = libtgw_python36.MDOrderQueue_items_get
    if _newclass:
        items = _swig_property(libtgw_python36.MDOrderQueue_items_get, libtgw_python36.MDOrderQueue_items_set)
    __swig_setmethods__["volume"] = libtgw_python36.MDOrderQueue_volume_set
    __swig_getmethods__["volume"] = libtgw_python36.MDOrderQueue_volume_get
    if _newclass:
        volume = _swig_property(libtgw_python36.MDOrderQueue_volume_get, libtgw_python36.MDOrderQueue_volume_set)
    __swig_setmethods__["channel_no"] = libtgw_python36.MDOrderQueue_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python36.MDOrderQueue_channel_no_get
    if _newclass:
        channel_no = _swig_property(libtgw_python36.MDOrderQueue_channel_no_get, libtgw_python36.MDOrderQueue_channel_no_set)
    __swig_setmethods__["md_stream_id"] = libtgw_python36.MDOrderQueue_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = libtgw_python36.MDOrderQueue_md_stream_id_get
    if _newclass:
        md_stream_id = _swig_property(libtgw_python36.MDOrderQueue_md_stream_id_get, libtgw_python36.MDOrderQueue_md_stream_id_set)

    def __init__(self):
        this = libtgw_python36.new_MDOrderQueue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDOrderQueue
    __del__ = lambda self: None
MDOrderQueue_swigregister = libtgw_python36.MDOrderQueue_swigregister
MDOrderQueue_swigregister(MDOrderQueue)

class MDCodeTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCodeTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCodeTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.MDCodeTable_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDCodeTable_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDCodeTable_security_code_get, libtgw_python36.MDCodeTable_security_code_set)
    __swig_setmethods__["symbol"] = libtgw_python36.MDCodeTable_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python36.MDCodeTable_symbol_get
    if _newclass:
        symbol = _swig_property(libtgw_python36.MDCodeTable_symbol_get, libtgw_python36.MDCodeTable_symbol_set)
    __swig_setmethods__["english_name"] = libtgw_python36.MDCodeTable_english_name_set
    __swig_getmethods__["english_name"] = libtgw_python36.MDCodeTable_english_name_get
    if _newclass:
        english_name = _swig_property(libtgw_python36.MDCodeTable_english_name_get, libtgw_python36.MDCodeTable_english_name_set)
    __swig_setmethods__["market_type"] = libtgw_python36.MDCodeTable_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDCodeTable_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDCodeTable_market_type_get, libtgw_python36.MDCodeTable_market_type_set)
    __swig_setmethods__["security_type"] = libtgw_python36.MDCodeTable_security_type_set
    __swig_getmethods__["security_type"] = libtgw_python36.MDCodeTable_security_type_get
    if _newclass:
        security_type = _swig_property(libtgw_python36.MDCodeTable_security_type_get, libtgw_python36.MDCodeTable_security_type_set)
    __swig_setmethods__["currency"] = libtgw_python36.MDCodeTable_currency_set
    __swig_getmethods__["currency"] = libtgw_python36.MDCodeTable_currency_get
    if _newclass:
        currency = _swig_property(libtgw_python36.MDCodeTable_currency_get, libtgw_python36.MDCodeTable_currency_set)

    def __init__(self):
        this = libtgw_python36.new_MDCodeTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDCodeTable
    __del__ = lambda self: None
MDCodeTable_swigregister = libtgw_python36.MDCodeTable_swigregister
MDCodeTable_swigregister(MDCodeTable)

class MDExFactorTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDExFactorTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDExFactorTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_code"] = libtgw_python36.MDExFactorTable_inner_code_set
    __swig_getmethods__["inner_code"] = libtgw_python36.MDExFactorTable_inner_code_get
    if _newclass:
        inner_code = _swig_property(libtgw_python36.MDExFactorTable_inner_code_get, libtgw_python36.MDExFactorTable_inner_code_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDExFactorTable_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDExFactorTable_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDExFactorTable_security_code_get, libtgw_python36.MDExFactorTable_security_code_set)
    __swig_setmethods__["ex_date"] = libtgw_python36.MDExFactorTable_ex_date_set
    __swig_getmethods__["ex_date"] = libtgw_python36.MDExFactorTable_ex_date_get
    if _newclass:
        ex_date = _swig_property(libtgw_python36.MDExFactorTable_ex_date_get, libtgw_python36.MDExFactorTable_ex_date_set)
    __swig_setmethods__["ex_factor"] = libtgw_python36.MDExFactorTable_ex_factor_set
    __swig_getmethods__["ex_factor"] = libtgw_python36.MDExFactorTable_ex_factor_get
    if _newclass:
        ex_factor = _swig_property(libtgw_python36.MDExFactorTable_ex_factor_get, libtgw_python36.MDExFactorTable_ex_factor_set)
    __swig_setmethods__["cum_factor"] = libtgw_python36.MDExFactorTable_cum_factor_set
    __swig_getmethods__["cum_factor"] = libtgw_python36.MDExFactorTable_cum_factor_get
    if _newclass:
        cum_factor = _swig_property(libtgw_python36.MDExFactorTable_cum_factor_get, libtgw_python36.MDExFactorTable_cum_factor_set)

    def __init__(self):
        this = libtgw_python36.new_MDExFactorTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDExFactorTable
    __del__ = lambda self: None
MDExFactorTable_swigregister = libtgw_python36.MDExFactorTable_swigregister
MDExFactorTable_swigregister(MDExFactorTable)

class MDStockInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDStockInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDStockInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.MDStockInfo_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDStockInfo_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDStockInfo_security_code_get, libtgw_python36.MDStockInfo_security_code_set)
    __swig_setmethods__["symbol"] = libtgw_python36.MDStockInfo_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python36.MDStockInfo_symbol_get
    if _newclass:
        symbol = _swig_property(libtgw_python36.MDStockInfo_symbol_get, libtgw_python36.MDStockInfo_symbol_set)
    __swig_setmethods__["market_type"] = libtgw_python36.MDStockInfo_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDStockInfo_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDStockInfo_market_type_get, libtgw_python36.MDStockInfo_market_type_set)
    __swig_setmethods__["security_type"] = libtgw_python36.MDStockInfo_security_type_set
    __swig_getmethods__["security_type"] = libtgw_python36.MDStockInfo_security_type_get
    if _newclass:
        security_type = _swig_property(libtgw_python36.MDStockInfo_security_type_get, libtgw_python36.MDStockInfo_security_type_set)
    __swig_setmethods__["currency"] = libtgw_python36.MDStockInfo_currency_set
    __swig_getmethods__["currency"] = libtgw_python36.MDStockInfo_currency_get
    if _newclass:
        currency = _swig_property(libtgw_python36.MDStockInfo_currency_get, libtgw_python36.MDStockInfo_currency_set)
    __swig_setmethods__["security_status"] = libtgw_python36.MDStockInfo_security_status_set
    __swig_getmethods__["security_status"] = libtgw_python36.MDStockInfo_security_status_get
    if _newclass:
        security_status = _swig_property(libtgw_python36.MDStockInfo_security_status_get, libtgw_python36.MDStockInfo_security_status_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDStockInfo_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDStockInfo_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDStockInfo_pre_close_price_get, libtgw_python36.MDStockInfo_pre_close_price_set)
    __swig_setmethods__["total_shares"] = libtgw_python36.MDStockInfo_total_shares_set
    __swig_getmethods__["total_shares"] = libtgw_python36.MDStockInfo_total_shares_get
    if _newclass:
        total_shares = _swig_property(libtgw_python36.MDStockInfo_total_shares_get, libtgw_python36.MDStockInfo_total_shares_set)
    __swig_setmethods__["flow_shares"] = libtgw_python36.MDStockInfo_flow_shares_set
    __swig_getmethods__["flow_shares"] = libtgw_python36.MDStockInfo_flow_shares_get
    if _newclass:
        flow_shares = _swig_property(libtgw_python36.MDStockInfo_flow_shares_get, libtgw_python36.MDStockInfo_flow_shares_set)
    __swig_setmethods__["noprofit"] = libtgw_python36.MDStockInfo_noprofit_set
    __swig_getmethods__["noprofit"] = libtgw_python36.MDStockInfo_noprofit_get
    if _newclass:
        noprofit = _swig_property(libtgw_python36.MDStockInfo_noprofit_get, libtgw_python36.MDStockInfo_noprofit_set)
    __swig_setmethods__["weighted_voting_rights"] = libtgw_python36.MDStockInfo_weighted_voting_rights_set
    __swig_getmethods__["weighted_voting_rights"] = libtgw_python36.MDStockInfo_weighted_voting_rights_get
    if _newclass:
        weighted_voting_rights = _swig_property(libtgw_python36.MDStockInfo_weighted_voting_rights_get, libtgw_python36.MDStockInfo_weighted_voting_rights_set)
    __swig_setmethods__["registration_flag"] = libtgw_python36.MDStockInfo_registration_flag_set
    __swig_getmethods__["registration_flag"] = libtgw_python36.MDStockInfo_registration_flag_get
    if _newclass:
        registration_flag = _swig_property(libtgw_python36.MDStockInfo_registration_flag_get, libtgw_python36.MDStockInfo_registration_flag_set)
    __swig_setmethods__["eps"] = libtgw_python36.MDStockInfo_eps_set
    __swig_getmethods__["eps"] = libtgw_python36.MDStockInfo_eps_get
    if _newclass:
        eps = _swig_property(libtgw_python36.MDStockInfo_eps_get, libtgw_python36.MDStockInfo_eps_set)
    __swig_setmethods__["eps_cell"] = libtgw_python36.MDStockInfo_eps_cell_set
    __swig_getmethods__["eps_cell"] = libtgw_python36.MDStockInfo_eps_cell_get
    if _newclass:
        eps_cell = _swig_property(libtgw_python36.MDStockInfo_eps_cell_get, libtgw_python36.MDStockInfo_eps_cell_set)
    __swig_setmethods__["net_profit_ttm"] = libtgw_python36.MDStockInfo_net_profit_ttm_set
    __swig_getmethods__["net_profit_ttm"] = libtgw_python36.MDStockInfo_net_profit_ttm_get
    if _newclass:
        net_profit_ttm = _swig_property(libtgw_python36.MDStockInfo_net_profit_ttm_get, libtgw_python36.MDStockInfo_net_profit_ttm_set)
    __swig_setmethods__["net_profit"] = libtgw_python36.MDStockInfo_net_profit_set
    __swig_getmethods__["net_profit"] = libtgw_python36.MDStockInfo_net_profit_get
    if _newclass:
        net_profit = _swig_property(libtgw_python36.MDStockInfo_net_profit_get, libtgw_python36.MDStockInfo_net_profit_set)
    __swig_setmethods__["net_asset"] = libtgw_python36.MDStockInfo_net_asset_set
    __swig_getmethods__["net_asset"] = libtgw_python36.MDStockInfo_net_asset_get
    if _newclass:
        net_asset = _swig_property(libtgw_python36.MDStockInfo_net_asset_get, libtgw_python36.MDStockInfo_net_asset_set)
    __swig_setmethods__["net_profit_recent_annual"] = libtgw_python36.MDStockInfo_net_profit_recent_annual_set
    __swig_getmethods__["net_profit_recent_annual"] = libtgw_python36.MDStockInfo_net_profit_recent_annual_get
    if _newclass:
        net_profit_recent_annual = _swig_property(libtgw_python36.MDStockInfo_net_profit_recent_annual_get, libtgw_python36.MDStockInfo_net_profit_recent_annual_set)
    __swig_setmethods__["net_profit_first_quarter"] = libtgw_python36.MDStockInfo_net_profit_first_quarter_set
    __swig_getmethods__["net_profit_first_quarter"] = libtgw_python36.MDStockInfo_net_profit_first_quarter_get
    if _newclass:
        net_profit_first_quarter = _swig_property(libtgw_python36.MDStockInfo_net_profit_first_quarter_get, libtgw_python36.MDStockInfo_net_profit_first_quarter_set)

    def __init__(self):
        this = libtgw_python36.new_MDStockInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDStockInfo
    __del__ = lambda self: None
MDStockInfo_swigregister = libtgw_python36.MDStockInfo_swigregister
MDStockInfo_swigregister(MDStockInfo)

class MDCodeTableRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCodeTableRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCodeTableRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.MDCodeTableRecord_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDCodeTableRecord_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDCodeTableRecord_security_code_get, libtgw_python36.MDCodeTableRecord_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python36.MDCodeTableRecord_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDCodeTableRecord_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDCodeTableRecord_market_type_get, libtgw_python36.MDCodeTableRecord_market_type_set)
    __swig_setmethods__["symbol"] = libtgw_python36.MDCodeTableRecord_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python36.MDCodeTableRecord_symbol_get
    if _newclass:
        symbol = _swig_property(libtgw_python36.MDCodeTableRecord_symbol_get, libtgw_python36.MDCodeTableRecord_symbol_set)
    __swig_setmethods__["english_name"] = libtgw_python36.MDCodeTableRecord_english_name_set
    __swig_getmethods__["english_name"] = libtgw_python36.MDCodeTableRecord_english_name_get
    if _newclass:
        english_name = _swig_property(libtgw_python36.MDCodeTableRecord_english_name_get, libtgw_python36.MDCodeTableRecord_english_name_set)
    __swig_setmethods__["security_type"] = libtgw_python36.MDCodeTableRecord_security_type_set
    __swig_getmethods__["security_type"] = libtgw_python36.MDCodeTableRecord_security_type_get
    if _newclass:
        security_type = _swig_property(libtgw_python36.MDCodeTableRecord_security_type_get, libtgw_python36.MDCodeTableRecord_security_type_set)
    __swig_setmethods__["currency"] = libtgw_python36.MDCodeTableRecord_currency_set
    __swig_getmethods__["currency"] = libtgw_python36.MDCodeTableRecord_currency_get
    if _newclass:
        currency = _swig_property(libtgw_python36.MDCodeTableRecord_currency_get, libtgw_python36.MDCodeTableRecord_currency_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDCodeTableRecord_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDCodeTableRecord_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDCodeTableRecord_variety_category_get, libtgw_python36.MDCodeTableRecord_variety_category_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python36.MDCodeTableRecord_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python36.MDCodeTableRecord_pre_close_price_get
    if _newclass:
        pre_close_price = _swig_property(libtgw_python36.MDCodeTableRecord_pre_close_price_get, libtgw_python36.MDCodeTableRecord_pre_close_price_set)
    __swig_setmethods__["underlying_security_id"] = libtgw_python36.MDCodeTableRecord_underlying_security_id_set
    __swig_getmethods__["underlying_security_id"] = libtgw_python36.MDCodeTableRecord_underlying_security_id_get
    if _newclass:
        underlying_security_id = _swig_property(libtgw_python36.MDCodeTableRecord_underlying_security_id_get, libtgw_python36.MDCodeTableRecord_underlying_security_id_set)
    __swig_setmethods__["contract_type"] = libtgw_python36.MDCodeTableRecord_contract_type_set
    __swig_getmethods__["contract_type"] = libtgw_python36.MDCodeTableRecord_contract_type_get
    if _newclass:
        contract_type = _swig_property(libtgw_python36.MDCodeTableRecord_contract_type_get, libtgw_python36.MDCodeTableRecord_contract_type_set)
    __swig_setmethods__["exercise_price"] = libtgw_python36.MDCodeTableRecord_exercise_price_set
    __swig_getmethods__["exercise_price"] = libtgw_python36.MDCodeTableRecord_exercise_price_get
    if _newclass:
        exercise_price = _swig_property(libtgw_python36.MDCodeTableRecord_exercise_price_get, libtgw_python36.MDCodeTableRecord_exercise_price_set)
    __swig_setmethods__["expire_date"] = libtgw_python36.MDCodeTableRecord_expire_date_set
    __swig_getmethods__["expire_date"] = libtgw_python36.MDCodeTableRecord_expire_date_get
    if _newclass:
        expire_date = _swig_property(libtgw_python36.MDCodeTableRecord_expire_date_get, libtgw_python36.MDCodeTableRecord_expire_date_set)
    __swig_setmethods__["high_limited"] = libtgw_python36.MDCodeTableRecord_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python36.MDCodeTableRecord_high_limited_get
    if _newclass:
        high_limited = _swig_property(libtgw_python36.MDCodeTableRecord_high_limited_get, libtgw_python36.MDCodeTableRecord_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python36.MDCodeTableRecord_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python36.MDCodeTableRecord_low_limited_get
    if _newclass:
        low_limited = _swig_property(libtgw_python36.MDCodeTableRecord_low_limited_get, libtgw_python36.MDCodeTableRecord_low_limited_set)
    __swig_setmethods__["security_status"] = libtgw_python36.MDCodeTableRecord_security_status_set
    __swig_getmethods__["security_status"] = libtgw_python36.MDCodeTableRecord_security_status_get
    if _newclass:
        security_status = _swig_property(libtgw_python36.MDCodeTableRecord_security_status_get, libtgw_python36.MDCodeTableRecord_security_status_set)
    __swig_setmethods__["price_tick"] = libtgw_python36.MDCodeTableRecord_price_tick_set
    __swig_getmethods__["price_tick"] = libtgw_python36.MDCodeTableRecord_price_tick_get
    if _newclass:
        price_tick = _swig_property(libtgw_python36.MDCodeTableRecord_price_tick_get, libtgw_python36.MDCodeTableRecord_price_tick_set)
    __swig_setmethods__["buy_qty_unit"] = libtgw_python36.MDCodeTableRecord_buy_qty_unit_set
    __swig_getmethods__["buy_qty_unit"] = libtgw_python36.MDCodeTableRecord_buy_qty_unit_get
    if _newclass:
        buy_qty_unit = _swig_property(libtgw_python36.MDCodeTableRecord_buy_qty_unit_get, libtgw_python36.MDCodeTableRecord_buy_qty_unit_set)
    __swig_setmethods__["sell_qty_unit"] = libtgw_python36.MDCodeTableRecord_sell_qty_unit_set
    __swig_getmethods__["sell_qty_unit"] = libtgw_python36.MDCodeTableRecord_sell_qty_unit_get
    if _newclass:
        sell_qty_unit = _swig_property(libtgw_python36.MDCodeTableRecord_sell_qty_unit_get, libtgw_python36.MDCodeTableRecord_sell_qty_unit_set)
    __swig_setmethods__["market_buy_qty_unit"] = libtgw_python36.MDCodeTableRecord_market_buy_qty_unit_set
    __swig_getmethods__["market_buy_qty_unit"] = libtgw_python36.MDCodeTableRecord_market_buy_qty_unit_get
    if _newclass:
        market_buy_qty_unit = _swig_property(libtgw_python36.MDCodeTableRecord_market_buy_qty_unit_get, libtgw_python36.MDCodeTableRecord_market_buy_qty_unit_set)
    __swig_setmethods__["market_sell_qty_unit"] = libtgw_python36.MDCodeTableRecord_market_sell_qty_unit_set
    __swig_getmethods__["market_sell_qty_unit"] = libtgw_python36.MDCodeTableRecord_market_sell_qty_unit_get
    if _newclass:
        market_sell_qty_unit = _swig_property(libtgw_python36.MDCodeTableRecord_market_sell_qty_unit_get, libtgw_python36.MDCodeTableRecord_market_sell_qty_unit_set)
    __swig_setmethods__["buy_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_buy_qty_lower_limit_set
    __swig_getmethods__["buy_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_buy_qty_lower_limit_get
    if _newclass:
        buy_qty_lower_limit = _swig_property(libtgw_python36.MDCodeTableRecord_buy_qty_lower_limit_get, libtgw_python36.MDCodeTableRecord_buy_qty_lower_limit_set)
    __swig_setmethods__["buy_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_buy_qty_upper_limit_set
    __swig_getmethods__["buy_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_buy_qty_upper_limit_get
    if _newclass:
        buy_qty_upper_limit = _swig_property(libtgw_python36.MDCodeTableRecord_buy_qty_upper_limit_get, libtgw_python36.MDCodeTableRecord_buy_qty_upper_limit_set)
    __swig_setmethods__["sell_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_sell_qty_lower_limit_set
    __swig_getmethods__["sell_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_sell_qty_lower_limit_get
    if _newclass:
        sell_qty_lower_limit = _swig_property(libtgw_python36.MDCodeTableRecord_sell_qty_lower_limit_get, libtgw_python36.MDCodeTableRecord_sell_qty_lower_limit_set)
    __swig_setmethods__["sell_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_sell_qty_upper_limit_set
    __swig_getmethods__["sell_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_sell_qty_upper_limit_get
    if _newclass:
        sell_qty_upper_limit = _swig_property(libtgw_python36.MDCodeTableRecord_sell_qty_upper_limit_get, libtgw_python36.MDCodeTableRecord_sell_qty_upper_limit_set)
    __swig_setmethods__["market_buy_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_market_buy_qty_lower_limit_set
    __swig_getmethods__["market_buy_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_market_buy_qty_lower_limit_get
    if _newclass:
        market_buy_qty_lower_limit = _swig_property(libtgw_python36.MDCodeTableRecord_market_buy_qty_lower_limit_get, libtgw_python36.MDCodeTableRecord_market_buy_qty_lower_limit_set)
    __swig_setmethods__["market_buy_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_market_buy_qty_upper_limit_set
    __swig_getmethods__["market_buy_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_market_buy_qty_upper_limit_get
    if _newclass:
        market_buy_qty_upper_limit = _swig_property(libtgw_python36.MDCodeTableRecord_market_buy_qty_upper_limit_get, libtgw_python36.MDCodeTableRecord_market_buy_qty_upper_limit_set)
    __swig_setmethods__["market_sell_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_market_sell_qty_lower_limit_set
    __swig_getmethods__["market_sell_qty_lower_limit"] = libtgw_python36.MDCodeTableRecord_market_sell_qty_lower_limit_get
    if _newclass:
        market_sell_qty_lower_limit = _swig_property(libtgw_python36.MDCodeTableRecord_market_sell_qty_lower_limit_get, libtgw_python36.MDCodeTableRecord_market_sell_qty_lower_limit_set)
    __swig_setmethods__["market_sell_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_market_sell_qty_upper_limit_set
    __swig_getmethods__["market_sell_qty_upper_limit"] = libtgw_python36.MDCodeTableRecord_market_sell_qty_upper_limit_get
    if _newclass:
        market_sell_qty_upper_limit = _swig_property(libtgw_python36.MDCodeTableRecord_market_sell_qty_upper_limit_get, libtgw_python36.MDCodeTableRecord_market_sell_qty_upper_limit_set)
    __swig_setmethods__["list_day"] = libtgw_python36.MDCodeTableRecord_list_day_set
    __swig_getmethods__["list_day"] = libtgw_python36.MDCodeTableRecord_list_day_get
    if _newclass:
        list_day = _swig_property(libtgw_python36.MDCodeTableRecord_list_day_get, libtgw_python36.MDCodeTableRecord_list_day_set)
    __swig_setmethods__["par_value"] = libtgw_python36.MDCodeTableRecord_par_value_set
    __swig_getmethods__["par_value"] = libtgw_python36.MDCodeTableRecord_par_value_get
    if _newclass:
        par_value = _swig_property(libtgw_python36.MDCodeTableRecord_par_value_get, libtgw_python36.MDCodeTableRecord_par_value_set)
    __swig_setmethods__["outstanding_share"] = libtgw_python36.MDCodeTableRecord_outstanding_share_set
    __swig_getmethods__["outstanding_share"] = libtgw_python36.MDCodeTableRecord_outstanding_share_get
    if _newclass:
        outstanding_share = _swig_property(libtgw_python36.MDCodeTableRecord_outstanding_share_get, libtgw_python36.MDCodeTableRecord_outstanding_share_set)
    __swig_setmethods__["public_float_share_quantity"] = libtgw_python36.MDCodeTableRecord_public_float_share_quantity_set
    __swig_getmethods__["public_float_share_quantity"] = libtgw_python36.MDCodeTableRecord_public_float_share_quantity_get
    if _newclass:
        public_float_share_quantity = _swig_property(libtgw_python36.MDCodeTableRecord_public_float_share_quantity_get, libtgw_python36.MDCodeTableRecord_public_float_share_quantity_set)
    __swig_setmethods__["contract_multiplier"] = libtgw_python36.MDCodeTableRecord_contract_multiplier_set
    __swig_getmethods__["contract_multiplier"] = libtgw_python36.MDCodeTableRecord_contract_multiplier_get
    if _newclass:
        contract_multiplier = _swig_property(libtgw_python36.MDCodeTableRecord_contract_multiplier_get, libtgw_python36.MDCodeTableRecord_contract_multiplier_set)
    __swig_setmethods__["regular_share"] = libtgw_python36.MDCodeTableRecord_regular_share_set
    __swig_getmethods__["regular_share"] = libtgw_python36.MDCodeTableRecord_regular_share_get
    if _newclass:
        regular_share = _swig_property(libtgw_python36.MDCodeTableRecord_regular_share_get, libtgw_python36.MDCodeTableRecord_regular_share_set)
    __swig_setmethods__["interest"] = libtgw_python36.MDCodeTableRecord_interest_set
    __swig_getmethods__["interest"] = libtgw_python36.MDCodeTableRecord_interest_get
    if _newclass:
        interest = _swig_property(libtgw_python36.MDCodeTableRecord_interest_get, libtgw_python36.MDCodeTableRecord_interest_set)
    __swig_setmethods__["coupon_rate"] = libtgw_python36.MDCodeTableRecord_coupon_rate_set
    __swig_getmethods__["coupon_rate"] = libtgw_python36.MDCodeTableRecord_coupon_rate_get
    if _newclass:
        coupon_rate = _swig_property(libtgw_python36.MDCodeTableRecord_coupon_rate_get, libtgw_python36.MDCodeTableRecord_coupon_rate_set)
    __swig_setmethods__["product_code"] = libtgw_python36.MDCodeTableRecord_product_code_set
    __swig_getmethods__["product_code"] = libtgw_python36.MDCodeTableRecord_product_code_get
    if _newclass:
        product_code = _swig_property(libtgw_python36.MDCodeTableRecord_product_code_get, libtgw_python36.MDCodeTableRecord_product_code_set)
    __swig_setmethods__["delivery_year"] = libtgw_python36.MDCodeTableRecord_delivery_year_set
    __swig_getmethods__["delivery_year"] = libtgw_python36.MDCodeTableRecord_delivery_year_get
    if _newclass:
        delivery_year = _swig_property(libtgw_python36.MDCodeTableRecord_delivery_year_get, libtgw_python36.MDCodeTableRecord_delivery_year_set)
    __swig_setmethods__["delivery_month"] = libtgw_python36.MDCodeTableRecord_delivery_month_set
    __swig_getmethods__["delivery_month"] = libtgw_python36.MDCodeTableRecord_delivery_month_get
    if _newclass:
        delivery_month = _swig_property(libtgw_python36.MDCodeTableRecord_delivery_month_get, libtgw_python36.MDCodeTableRecord_delivery_month_set)
    __swig_setmethods__["create_date"] = libtgw_python36.MDCodeTableRecord_create_date_set
    __swig_getmethods__["create_date"] = libtgw_python36.MDCodeTableRecord_create_date_get
    if _newclass:
        create_date = _swig_property(libtgw_python36.MDCodeTableRecord_create_date_get, libtgw_python36.MDCodeTableRecord_create_date_set)
    __swig_setmethods__["start_deliv_date"] = libtgw_python36.MDCodeTableRecord_start_deliv_date_set
    __swig_getmethods__["start_deliv_date"] = libtgw_python36.MDCodeTableRecord_start_deliv_date_get
    if _newclass:
        start_deliv_date = _swig_property(libtgw_python36.MDCodeTableRecord_start_deliv_date_get, libtgw_python36.MDCodeTableRecord_start_deliv_date_set)
    __swig_setmethods__["end_deliv_date"] = libtgw_python36.MDCodeTableRecord_end_deliv_date_set
    __swig_getmethods__["end_deliv_date"] = libtgw_python36.MDCodeTableRecord_end_deliv_date_get
    if _newclass:
        end_deliv_date = _swig_property(libtgw_python36.MDCodeTableRecord_end_deliv_date_get, libtgw_python36.MDCodeTableRecord_end_deliv_date_set)
    __swig_setmethods__["position_type"] = libtgw_python36.MDCodeTableRecord_position_type_set
    __swig_getmethods__["position_type"] = libtgw_python36.MDCodeTableRecord_position_type_get
    if _newclass:
        position_type = _swig_property(libtgw_python36.MDCodeTableRecord_position_type_get, libtgw_python36.MDCodeTableRecord_position_type_set)

    def __init__(self):
        this = libtgw_python36.new_MDCodeTableRecord()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDCodeTableRecord
    __del__ = lambda self: None
MDCodeTableRecord_swigregister = libtgw_python36.MDCodeTableRecord_swigregister
MDCodeTableRecord_swigregister(MDCodeTableRecord)

class ConstituentStockInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstituentStockInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstituentStockInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.ConstituentStockInfo_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.ConstituentStockInfo_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.ConstituentStockInfo_security_code_get, libtgw_python36.ConstituentStockInfo_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python36.ConstituentStockInfo_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.ConstituentStockInfo_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.ConstituentStockInfo_market_type_get, libtgw_python36.ConstituentStockInfo_market_type_set)
    __swig_setmethods__["underlying_symbol"] = libtgw_python36.ConstituentStockInfo_underlying_symbol_set
    __swig_getmethods__["underlying_symbol"] = libtgw_python36.ConstituentStockInfo_underlying_symbol_get
    if _newclass:
        underlying_symbol = _swig_property(libtgw_python36.ConstituentStockInfo_underlying_symbol_get, libtgw_python36.ConstituentStockInfo_underlying_symbol_set)
    __swig_setmethods__["component_share"] = libtgw_python36.ConstituentStockInfo_component_share_set
    __swig_getmethods__["component_share"] = libtgw_python36.ConstituentStockInfo_component_share_get
    if _newclass:
        component_share = _swig_property(libtgw_python36.ConstituentStockInfo_component_share_get, libtgw_python36.ConstituentStockInfo_component_share_set)
    __swig_setmethods__["substitute_flag"] = libtgw_python36.ConstituentStockInfo_substitute_flag_set
    __swig_getmethods__["substitute_flag"] = libtgw_python36.ConstituentStockInfo_substitute_flag_get
    if _newclass:
        substitute_flag = _swig_property(libtgw_python36.ConstituentStockInfo_substitute_flag_get, libtgw_python36.ConstituentStockInfo_substitute_flag_set)
    __swig_setmethods__["premium_ratio"] = libtgw_python36.ConstituentStockInfo_premium_ratio_set
    __swig_getmethods__["premium_ratio"] = libtgw_python36.ConstituentStockInfo_premium_ratio_get
    if _newclass:
        premium_ratio = _swig_property(libtgw_python36.ConstituentStockInfo_premium_ratio_get, libtgw_python36.ConstituentStockInfo_premium_ratio_set)
    __swig_setmethods__["discount_ratio"] = libtgw_python36.ConstituentStockInfo_discount_ratio_set
    __swig_getmethods__["discount_ratio"] = libtgw_python36.ConstituentStockInfo_discount_ratio_get
    if _newclass:
        discount_ratio = _swig_property(libtgw_python36.ConstituentStockInfo_discount_ratio_get, libtgw_python36.ConstituentStockInfo_discount_ratio_set)
    __swig_setmethods__["creation_cash_substitute"] = libtgw_python36.ConstituentStockInfo_creation_cash_substitute_set
    __swig_getmethods__["creation_cash_substitute"] = libtgw_python36.ConstituentStockInfo_creation_cash_substitute_get
    if _newclass:
        creation_cash_substitute = _swig_property(libtgw_python36.ConstituentStockInfo_creation_cash_substitute_get, libtgw_python36.ConstituentStockInfo_creation_cash_substitute_set)
    __swig_setmethods__["redemption_cash_substitute"] = libtgw_python36.ConstituentStockInfo_redemption_cash_substitute_set
    __swig_getmethods__["redemption_cash_substitute"] = libtgw_python36.ConstituentStockInfo_redemption_cash_substitute_get
    if _newclass:
        redemption_cash_substitute = _swig_property(libtgw_python36.ConstituentStockInfo_redemption_cash_substitute_get, libtgw_python36.ConstituentStockInfo_redemption_cash_substitute_set)
    __swig_setmethods__["substitution_cash_amount"] = libtgw_python36.ConstituentStockInfo_substitution_cash_amount_set
    __swig_getmethods__["substitution_cash_amount"] = libtgw_python36.ConstituentStockInfo_substitution_cash_amount_get
    if _newclass:
        substitution_cash_amount = _swig_property(libtgw_python36.ConstituentStockInfo_substitution_cash_amount_get, libtgw_python36.ConstituentStockInfo_substitution_cash_amount_set)
    __swig_setmethods__["underlying_security_id"] = libtgw_python36.ConstituentStockInfo_underlying_security_id_set
    __swig_getmethods__["underlying_security_id"] = libtgw_python36.ConstituentStockInfo_underlying_security_id_get
    if _newclass:
        underlying_security_id = _swig_property(libtgw_python36.ConstituentStockInfo_underlying_security_id_get, libtgw_python36.ConstituentStockInfo_underlying_security_id_set)
    __swig_setmethods__["buy_or_sell_to_open"] = libtgw_python36.ConstituentStockInfo_buy_or_sell_to_open_set
    __swig_getmethods__["buy_or_sell_to_open"] = libtgw_python36.ConstituentStockInfo_buy_or_sell_to_open_get
    if _newclass:
        buy_or_sell_to_open = _swig_property(libtgw_python36.ConstituentStockInfo_buy_or_sell_to_open_get, libtgw_python36.ConstituentStockInfo_buy_or_sell_to_open_set)
    __swig_setmethods__["reserved"] = libtgw_python36.ConstituentStockInfo_reserved_set
    __swig_getmethods__["reserved"] = libtgw_python36.ConstituentStockInfo_reserved_get
    if _newclass:
        reserved = _swig_property(libtgw_python36.ConstituentStockInfo_reserved_get, libtgw_python36.ConstituentStockInfo_reserved_set)

    def __init__(self):
        this = libtgw_python36.new_ConstituentStockInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ConstituentStockInfo
    __del__ = lambda self: None
ConstituentStockInfo_swigregister = libtgw_python36.ConstituentStockInfo_swigregister
ConstituentStockInfo_swigregister(ConstituentStockInfo)

class MDETFCodeTableRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDETFCodeTableRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDETFCodeTableRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python36.MDETFCodeTableRecord_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDETFCodeTableRecord_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDETFCodeTableRecord_security_code_get, libtgw_python36.MDETFCodeTableRecord_security_code_set)
    __swig_setmethods__["creation_redemption_unit"] = libtgw_python36.MDETFCodeTableRecord_creation_redemption_unit_set
    __swig_getmethods__["creation_redemption_unit"] = libtgw_python36.MDETFCodeTableRecord_creation_redemption_unit_get
    if _newclass:
        creation_redemption_unit = _swig_property(libtgw_python36.MDETFCodeTableRecord_creation_redemption_unit_get, libtgw_python36.MDETFCodeTableRecord_creation_redemption_unit_set)
    __swig_setmethods__["max_cash_ratio"] = libtgw_python36.MDETFCodeTableRecord_max_cash_ratio_set
    __swig_getmethods__["max_cash_ratio"] = libtgw_python36.MDETFCodeTableRecord_max_cash_ratio_get
    if _newclass:
        max_cash_ratio = _swig_property(libtgw_python36.MDETFCodeTableRecord_max_cash_ratio_get, libtgw_python36.MDETFCodeTableRecord_max_cash_ratio_set)
    __swig_setmethods__["publish"] = libtgw_python36.MDETFCodeTableRecord_publish_set
    __swig_getmethods__["publish"] = libtgw_python36.MDETFCodeTableRecord_publish_get
    if _newclass:
        publish = _swig_property(libtgw_python36.MDETFCodeTableRecord_publish_get, libtgw_python36.MDETFCodeTableRecord_publish_set)
    __swig_setmethods__["creation"] = libtgw_python36.MDETFCodeTableRecord_creation_set
    __swig_getmethods__["creation"] = libtgw_python36.MDETFCodeTableRecord_creation_get
    if _newclass:
        creation = _swig_property(libtgw_python36.MDETFCodeTableRecord_creation_get, libtgw_python36.MDETFCodeTableRecord_creation_set)
    __swig_setmethods__["redemption"] = libtgw_python36.MDETFCodeTableRecord_redemption_set
    __swig_getmethods__["redemption"] = libtgw_python36.MDETFCodeTableRecord_redemption_get
    if _newclass:
        redemption = _swig_property(libtgw_python36.MDETFCodeTableRecord_redemption_get, libtgw_python36.MDETFCodeTableRecord_redemption_set)
    __swig_setmethods__["creation_redemption_switch"] = libtgw_python36.MDETFCodeTableRecord_creation_redemption_switch_set
    __swig_getmethods__["creation_redemption_switch"] = libtgw_python36.MDETFCodeTableRecord_creation_redemption_switch_get
    if _newclass:
        creation_redemption_switch = _swig_property(libtgw_python36.MDETFCodeTableRecord_creation_redemption_switch_get, libtgw_python36.MDETFCodeTableRecord_creation_redemption_switch_set)
    __swig_setmethods__["record_num"] = libtgw_python36.MDETFCodeTableRecord_record_num_set
    __swig_getmethods__["record_num"] = libtgw_python36.MDETFCodeTableRecord_record_num_get
    if _newclass:
        record_num = _swig_property(libtgw_python36.MDETFCodeTableRecord_record_num_get, libtgw_python36.MDETFCodeTableRecord_record_num_set)
    __swig_setmethods__["total_record_num"] = libtgw_python36.MDETFCodeTableRecord_total_record_num_set
    __swig_getmethods__["total_record_num"] = libtgw_python36.MDETFCodeTableRecord_total_record_num_get
    if _newclass:
        total_record_num = _swig_property(libtgw_python36.MDETFCodeTableRecord_total_record_num_get, libtgw_python36.MDETFCodeTableRecord_total_record_num_set)
    __swig_setmethods__["estimate_cash_component"] = libtgw_python36.MDETFCodeTableRecord_estimate_cash_component_set
    __swig_getmethods__["estimate_cash_component"] = libtgw_python36.MDETFCodeTableRecord_estimate_cash_component_get
    if _newclass:
        estimate_cash_component = _swig_property(libtgw_python36.MDETFCodeTableRecord_estimate_cash_component_get, libtgw_python36.MDETFCodeTableRecord_estimate_cash_component_set)
    __swig_setmethods__["trading_day"] = libtgw_python36.MDETFCodeTableRecord_trading_day_set
    __swig_getmethods__["trading_day"] = libtgw_python36.MDETFCodeTableRecord_trading_day_get
    if _newclass:
        trading_day = _swig_property(libtgw_python36.MDETFCodeTableRecord_trading_day_get, libtgw_python36.MDETFCodeTableRecord_trading_day_set)
    __swig_setmethods__["pre_trading_day"] = libtgw_python36.MDETFCodeTableRecord_pre_trading_day_set
    __swig_getmethods__["pre_trading_day"] = libtgw_python36.MDETFCodeTableRecord_pre_trading_day_get
    if _newclass:
        pre_trading_day = _swig_property(libtgw_python36.MDETFCodeTableRecord_pre_trading_day_get, libtgw_python36.MDETFCodeTableRecord_pre_trading_day_set)
    __swig_setmethods__["cash_component"] = libtgw_python36.MDETFCodeTableRecord_cash_component_set
    __swig_getmethods__["cash_component"] = libtgw_python36.MDETFCodeTableRecord_cash_component_get
    if _newclass:
        cash_component = _swig_property(libtgw_python36.MDETFCodeTableRecord_cash_component_get, libtgw_python36.MDETFCodeTableRecord_cash_component_set)
    __swig_setmethods__["nav_per_cu"] = libtgw_python36.MDETFCodeTableRecord_nav_per_cu_set
    __swig_getmethods__["nav_per_cu"] = libtgw_python36.MDETFCodeTableRecord_nav_per_cu_get
    if _newclass:
        nav_per_cu = _swig_property(libtgw_python36.MDETFCodeTableRecord_nav_per_cu_get, libtgw_python36.MDETFCodeTableRecord_nav_per_cu_set)
    __swig_setmethods__["nav"] = libtgw_python36.MDETFCodeTableRecord_nav_set
    __swig_getmethods__["nav"] = libtgw_python36.MDETFCodeTableRecord_nav_get
    if _newclass:
        nav = _swig_property(libtgw_python36.MDETFCodeTableRecord_nav_get, libtgw_python36.MDETFCodeTableRecord_nav_set)
    __swig_setmethods__["market_type"] = libtgw_python36.MDETFCodeTableRecord_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDETFCodeTableRecord_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDETFCodeTableRecord_market_type_get, libtgw_python36.MDETFCodeTableRecord_market_type_set)
    __swig_setmethods__["symbol"] = libtgw_python36.MDETFCodeTableRecord_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python36.MDETFCodeTableRecord_symbol_get
    if _newclass:
        symbol = _swig_property(libtgw_python36.MDETFCodeTableRecord_symbol_get, libtgw_python36.MDETFCodeTableRecord_symbol_set)
    __swig_setmethods__["fund_management_company"] = libtgw_python36.MDETFCodeTableRecord_fund_management_company_set
    __swig_getmethods__["fund_management_company"] = libtgw_python36.MDETFCodeTableRecord_fund_management_company_get
    if _newclass:
        fund_management_company = _swig_property(libtgw_python36.MDETFCodeTableRecord_fund_management_company_get, libtgw_python36.MDETFCodeTableRecord_fund_management_company_set)
    __swig_setmethods__["underlying_security_id"] = libtgw_python36.MDETFCodeTableRecord_underlying_security_id_set
    __swig_getmethods__["underlying_security_id"] = libtgw_python36.MDETFCodeTableRecord_underlying_security_id_get
    if _newclass:
        underlying_security_id = _swig_property(libtgw_python36.MDETFCodeTableRecord_underlying_security_id_get, libtgw_python36.MDETFCodeTableRecord_underlying_security_id_set)
    __swig_setmethods__["underlying_security_id_source"] = libtgw_python36.MDETFCodeTableRecord_underlying_security_id_source_set
    __swig_getmethods__["underlying_security_id_source"] = libtgw_python36.MDETFCodeTableRecord_underlying_security_id_source_get
    if _newclass:
        underlying_security_id_source = _swig_property(libtgw_python36.MDETFCodeTableRecord_underlying_security_id_source_get, libtgw_python36.MDETFCodeTableRecord_underlying_security_id_source_set)
    __swig_setmethods__["dividend_per_cu"] = libtgw_python36.MDETFCodeTableRecord_dividend_per_cu_set
    __swig_getmethods__["dividend_per_cu"] = libtgw_python36.MDETFCodeTableRecord_dividend_per_cu_get
    if _newclass:
        dividend_per_cu = _swig_property(libtgw_python36.MDETFCodeTableRecord_dividend_per_cu_get, libtgw_python36.MDETFCodeTableRecord_dividend_per_cu_set)
    __swig_setmethods__["creation_limit"] = libtgw_python36.MDETFCodeTableRecord_creation_limit_set
    __swig_getmethods__["creation_limit"] = libtgw_python36.MDETFCodeTableRecord_creation_limit_get
    if _newclass:
        creation_limit = _swig_property(libtgw_python36.MDETFCodeTableRecord_creation_limit_get, libtgw_python36.MDETFCodeTableRecord_creation_limit_set)
    __swig_setmethods__["redemption_limit"] = libtgw_python36.MDETFCodeTableRecord_redemption_limit_set
    __swig_getmethods__["redemption_limit"] = libtgw_python36.MDETFCodeTableRecord_redemption_limit_get
    if _newclass:
        redemption_limit = _swig_property(libtgw_python36.MDETFCodeTableRecord_redemption_limit_get, libtgw_python36.MDETFCodeTableRecord_redemption_limit_set)
    __swig_setmethods__["creation_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_creation_limit_per_user_set
    __swig_getmethods__["creation_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_creation_limit_per_user_get
    if _newclass:
        creation_limit_per_user = _swig_property(libtgw_python36.MDETFCodeTableRecord_creation_limit_per_user_get, libtgw_python36.MDETFCodeTableRecord_creation_limit_per_user_set)
    __swig_setmethods__["redemption_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_redemption_limit_per_user_set
    __swig_getmethods__["redemption_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_redemption_limit_per_user_get
    if _newclass:
        redemption_limit_per_user = _swig_property(libtgw_python36.MDETFCodeTableRecord_redemption_limit_per_user_get, libtgw_python36.MDETFCodeTableRecord_redemption_limit_per_user_set)
    __swig_setmethods__["net_creation_limit"] = libtgw_python36.MDETFCodeTableRecord_net_creation_limit_set
    __swig_getmethods__["net_creation_limit"] = libtgw_python36.MDETFCodeTableRecord_net_creation_limit_get
    if _newclass:
        net_creation_limit = _swig_property(libtgw_python36.MDETFCodeTableRecord_net_creation_limit_get, libtgw_python36.MDETFCodeTableRecord_net_creation_limit_set)
    __swig_setmethods__["net_redemption_limit"] = libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_set
    __swig_getmethods__["net_redemption_limit"] = libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_get
    if _newclass:
        net_redemption_limit = _swig_property(libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_get, libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_set)
    __swig_setmethods__["net_creation_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_net_creation_limit_per_user_set
    __swig_getmethods__["net_creation_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_net_creation_limit_per_user_get
    if _newclass:
        net_creation_limit_per_user = _swig_property(libtgw_python36.MDETFCodeTableRecord_net_creation_limit_per_user_get, libtgw_python36.MDETFCodeTableRecord_net_creation_limit_per_user_set)
    __swig_setmethods__["net_redemption_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_per_user_set
    __swig_getmethods__["net_redemption_limit_per_user"] = libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_per_user_get
    if _newclass:
        net_redemption_limit_per_user = _swig_property(libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_per_user_get, libtgw_python36.MDETFCodeTableRecord_net_redemption_limit_per_user_set)
    __swig_setmethods__["all_cash_flag"] = libtgw_python36.MDETFCodeTableRecord_all_cash_flag_set
    __swig_getmethods__["all_cash_flag"] = libtgw_python36.MDETFCodeTableRecord_all_cash_flag_get
    if _newclass:
        all_cash_flag = _swig_property(libtgw_python36.MDETFCodeTableRecord_all_cash_flag_get, libtgw_python36.MDETFCodeTableRecord_all_cash_flag_set)
    __swig_setmethods__["all_cash_amount"] = libtgw_python36.MDETFCodeTableRecord_all_cash_amount_set
    __swig_getmethods__["all_cash_amount"] = libtgw_python36.MDETFCodeTableRecord_all_cash_amount_get
    if _newclass:
        all_cash_amount = _swig_property(libtgw_python36.MDETFCodeTableRecord_all_cash_amount_get, libtgw_python36.MDETFCodeTableRecord_all_cash_amount_set)
    __swig_setmethods__["all_cash_premium_rate"] = libtgw_python36.MDETFCodeTableRecord_all_cash_premium_rate_set
    __swig_getmethods__["all_cash_premium_rate"] = libtgw_python36.MDETFCodeTableRecord_all_cash_premium_rate_get
    if _newclass:
        all_cash_premium_rate = _swig_property(libtgw_python36.MDETFCodeTableRecord_all_cash_premium_rate_get, libtgw_python36.MDETFCodeTableRecord_all_cash_premium_rate_set)
    __swig_setmethods__["all_cash_discount_rate"] = libtgw_python36.MDETFCodeTableRecord_all_cash_discount_rate_set
    __swig_getmethods__["all_cash_discount_rate"] = libtgw_python36.MDETFCodeTableRecord_all_cash_discount_rate_get
    if _newclass:
        all_cash_discount_rate = _swig_property(libtgw_python36.MDETFCodeTableRecord_all_cash_discount_rate_get, libtgw_python36.MDETFCodeTableRecord_all_cash_discount_rate_set)
    __swig_setmethods__["rtgs_flag"] = libtgw_python36.MDETFCodeTableRecord_rtgs_flag_set
    __swig_getmethods__["rtgs_flag"] = libtgw_python36.MDETFCodeTableRecord_rtgs_flag_get
    if _newclass:
        rtgs_flag = _swig_property(libtgw_python36.MDETFCodeTableRecord_rtgs_flag_get, libtgw_python36.MDETFCodeTableRecord_rtgs_flag_set)
    __swig_setmethods__["reserved"] = libtgw_python36.MDETFCodeTableRecord_reserved_set
    __swig_getmethods__["reserved"] = libtgw_python36.MDETFCodeTableRecord_reserved_get
    if _newclass:
        reserved = _swig_property(libtgw_python36.MDETFCodeTableRecord_reserved_get, libtgw_python36.MDETFCodeTableRecord_reserved_set)
    __swig_setmethods__["constituent_stock_infos"] = libtgw_python36.MDETFCodeTableRecord_constituent_stock_infos_set
    __swig_getmethods__["constituent_stock_infos"] = libtgw_python36.MDETFCodeTableRecord_constituent_stock_infos_get
    if _newclass:
        constituent_stock_infos = _swig_property(libtgw_python36.MDETFCodeTableRecord_constituent_stock_infos_get, libtgw_python36.MDETFCodeTableRecord_constituent_stock_infos_set)

    def __init__(self):
        this = libtgw_python36.new_MDETFCodeTableRecord()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDETFCodeTableRecord
    __del__ = lambda self: None
MDETFCodeTableRecord_swigregister = libtgw_python36.MDETFCodeTableRecord_swigregister
MDETFCodeTableRecord_swigregister(MDETFCodeTableRecord)

class ThirdInfoData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThirdInfoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThirdInfoData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python36.ThirdInfoData_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.ThirdInfoData_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.ThirdInfoData_task_id_get, libtgw_python36.ThirdInfoData_task_id_set)
    __swig_setmethods__["data_size"] = libtgw_python36.ThirdInfoData_data_size_set
    __swig_getmethods__["data_size"] = libtgw_python36.ThirdInfoData_data_size_get
    if _newclass:
        data_size = _swig_property(libtgw_python36.ThirdInfoData_data_size_get, libtgw_python36.ThirdInfoData_data_size_set)
    __swig_setmethods__["json_data"] = libtgw_python36.ThirdInfoData_json_data_set
    __swig_getmethods__["json_data"] = libtgw_python36.ThirdInfoData_json_data_get
    if _newclass:
        json_data = _swig_property(libtgw_python36.ThirdInfoData_json_data_get, libtgw_python36.ThirdInfoData_json_data_set)

    def __init__(self):
        this = libtgw_python36.new_ThirdInfoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_ThirdInfoData
    __del__ = lambda self: None
ThirdInfoData_swigregister = libtgw_python36.ThirdInfoData_swigregister
ThirdInfoData_swigregister(ThirdInfoData)

class RspTaskStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspTaskStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspTaskStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python36.RspTaskStatus_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.RspTaskStatus_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.RspTaskStatus_task_id_get, libtgw_python36.RspTaskStatus_task_id_set)
    __swig_setmethods__["status"] = libtgw_python36.RspTaskStatus_status_set
    __swig_getmethods__["status"] = libtgw_python36.RspTaskStatus_status_get
    if _newclass:
        status = _swig_property(libtgw_python36.RspTaskStatus_status_get, libtgw_python36.RspTaskStatus_status_set)
    __swig_setmethods__["process_rate"] = libtgw_python36.RspTaskStatus_process_rate_set
    __swig_getmethods__["process_rate"] = libtgw_python36.RspTaskStatus_process_rate_get
    if _newclass:
        process_rate = _swig_property(libtgw_python36.RspTaskStatus_process_rate_get, libtgw_python36.RspTaskStatus_process_rate_set)
    __swig_setmethods__["error_code"] = libtgw_python36.RspTaskStatus_error_code_set
    __swig_getmethods__["error_code"] = libtgw_python36.RspTaskStatus_error_code_get
    if _newclass:
        error_code = _swig_property(libtgw_python36.RspTaskStatus_error_code_get, libtgw_python36.RspTaskStatus_error_code_set)
    __swig_setmethods__["error_msg_len"] = libtgw_python36.RspTaskStatus_error_msg_len_set
    __swig_getmethods__["error_msg_len"] = libtgw_python36.RspTaskStatus_error_msg_len_get
    if _newclass:
        error_msg_len = _swig_property(libtgw_python36.RspTaskStatus_error_msg_len_get, libtgw_python36.RspTaskStatus_error_msg_len_set)
    __swig_setmethods__["error_msg"] = libtgw_python36.RspTaskStatus_error_msg_set
    __swig_getmethods__["error_msg"] = libtgw_python36.RspTaskStatus_error_msg_get
    if _newclass:
        error_msg = _swig_property(libtgw_python36.RspTaskStatus_error_msg_get, libtgw_python36.RspTaskStatus_error_msg_set)

    def __init__(self):
        this = libtgw_python36.new_RspTaskStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_RspTaskStatus
    __del__ = lambda self: None
RspTaskStatus_swigregister = libtgw_python36.RspTaskStatus_swigregister
RspTaskStatus_swigregister(RspTaskStatus)

class RspUnionStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspUnionStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspUnionStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["req_type"] = libtgw_python36.RspUnionStatus_req_type_set
    __swig_getmethods__["req_type"] = libtgw_python36.RspUnionStatus_req_type_get
    if _newclass:
        req_type = _swig_property(libtgw_python36.RspUnionStatus_req_type_get, libtgw_python36.RspUnionStatus_req_type_set)
    __swig_setmethods__["market_type"] = libtgw_python36.RspUnionStatus_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.RspUnionStatus_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.RspUnionStatus_market_type_get, libtgw_python36.RspUnionStatus_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.RspUnionStatus_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.RspUnionStatus_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.RspUnionStatus_security_code_get, libtgw_python36.RspUnionStatus_security_code_set)

    def __init__(self):
        this = libtgw_python36.new_RspUnionStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_RspUnionStatus
    __del__ = lambda self: None
RspUnionStatus_swigregister = libtgw_python36.RspUnionStatus_swigregister
RspUnionStatus_swigregister(RspUnionStatus)

class StatusInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatusInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python36.StatusInfo_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.StatusInfo_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.StatusInfo_task_id_get, libtgw_python36.StatusInfo_task_id_set)

    def __init__(self):
        this = libtgw_python36.new_StatusInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_StatusInfo
    __del__ = lambda self: None
StatusInfo_swigregister = libtgw_python36.StatusInfo_swigregister
StatusInfo_swigregister(StatusInfo)

class RspSecuritiesInfoStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspSecuritiesInfoStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspSecuritiesInfoStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code_table_item_cnt"] = libtgw_python36.RspSecuritiesInfoStatus_code_table_item_cnt_set
    __swig_getmethods__["code_table_item_cnt"] = libtgw_python36.RspSecuritiesInfoStatus_code_table_item_cnt_get
    if _newclass:
        code_table_item_cnt = _swig_property(libtgw_python36.RspSecuritiesInfoStatus_code_table_item_cnt_get, libtgw_python36.RspSecuritiesInfoStatus_code_table_item_cnt_set)
    __swig_setmethods__["codes"] = libtgw_python36.RspSecuritiesInfoStatus_codes_set
    __swig_getmethods__["codes"] = libtgw_python36.RspSecuritiesInfoStatus_codes_get
    if _newclass:
        codes = _swig_property(libtgw_python36.RspSecuritiesInfoStatus_codes_get, libtgw_python36.RspSecuritiesInfoStatus_codes_set)

    def __init__(self):
        this = libtgw_python36.new_RspSecuritiesInfoStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_RspSecuritiesInfoStatus
    __del__ = lambda self: None
RspSecuritiesInfoStatus_swigregister = libtgw_python36.RspSecuritiesInfoStatus_swigregister
RspSecuritiesInfoStatus_swigregister(RspSecuritiesInfoStatus)

class RspThirdInfoStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspThirdInfoStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspThirdInfoStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python36.RspThirdInfoStatus_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python36.RspThirdInfoStatus_task_id_get
    if _newclass:
        task_id = _swig_property(libtgw_python36.RspThirdInfoStatus_task_id_get, libtgw_python36.RspThirdInfoStatus_task_id_set)

    def __init__(self):
        this = libtgw_python36.new_RspThirdInfoStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_RspThirdInfoStatus
    __del__ = lambda self: None
RspThirdInfoStatus_swigregister = libtgw_python36.RspThirdInfoStatus_swigregister
RspThirdInfoStatus_swigregister(RspThirdInfoStatus)

class RspQueryStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspQueryStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspQueryStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_code"] = libtgw_python36.RspQueryStatus_error_code_set
    __swig_getmethods__["error_code"] = libtgw_python36.RspQueryStatus_error_code_get
    if _newclass:
        error_code = _swig_property(libtgw_python36.RspQueryStatus_error_code_get, libtgw_python36.RspQueryStatus_error_code_set)
    __swig_setmethods__["error_msg_len"] = libtgw_python36.RspQueryStatus_error_msg_len_set
    __swig_getmethods__["error_msg_len"] = libtgw_python36.RspQueryStatus_error_msg_len_get
    if _newclass:
        error_msg_len = _swig_property(libtgw_python36.RspQueryStatus_error_msg_len_get, libtgw_python36.RspQueryStatus_error_msg_len_set)
    __swig_setmethods__["error_msg"] = libtgw_python36.RspQueryStatus_error_msg_set
    __swig_getmethods__["error_msg"] = libtgw_python36.RspQueryStatus_error_msg_get
    if _newclass:
        error_msg = _swig_property(libtgw_python36.RspQueryStatus_error_msg_get, libtgw_python36.RspQueryStatus_error_msg_set)
    __swig_setmethods__["rsp_union_status"] = libtgw_python36.RspQueryStatus_rsp_union_status_set
    __swig_getmethods__["rsp_union_status"] = libtgw_python36.RspQueryStatus_rsp_union_status_get
    if _newclass:
        rsp_union_status = _swig_property(libtgw_python36.RspQueryStatus_rsp_union_status_get, libtgw_python36.RspQueryStatus_rsp_union_status_set)
    __swig_setmethods__["rsp_status"] = libtgw_python36.RspQueryStatus_rsp_status_set
    __swig_getmethods__["rsp_status"] = libtgw_python36.RspQueryStatus_rsp_status_get
    if _newclass:
        rsp_status = _swig_property(libtgw_python36.RspQueryStatus_rsp_status_get, libtgw_python36.RspQueryStatus_rsp_status_set)
    __swig_setmethods__["rsp_stockinfo_status"] = libtgw_python36.RspQueryStatus_rsp_stockinfo_status_set
    __swig_getmethods__["rsp_stockinfo_status"] = libtgw_python36.RspQueryStatus_rsp_stockinfo_status_get
    if _newclass:
        rsp_stockinfo_status = _swig_property(libtgw_python36.RspQueryStatus_rsp_stockinfo_status_get, libtgw_python36.RspQueryStatus_rsp_stockinfo_status_set)
    __swig_setmethods__["rsp_thirdinfo_status"] = libtgw_python36.RspQueryStatus_rsp_thirdinfo_status_set
    __swig_getmethods__["rsp_thirdinfo_status"] = libtgw_python36.RspQueryStatus_rsp_thirdinfo_status_get
    if _newclass:
        rsp_thirdinfo_status = _swig_property(libtgw_python36.RspQueryStatus_rsp_thirdinfo_status_get, libtgw_python36.RspQueryStatus_rsp_thirdinfo_status_set)

    def __init__(self):
        this = libtgw_python36.new_RspQueryStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_RspQueryStatus
    __del__ = lambda self: None
RspQueryStatus_swigregister = libtgw_python36.RspQueryStatus_swigregister
RspQueryStatus_swigregister(RspQueryStatus)

class MDOrderBookItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOrderBookItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOrderBookItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["price"] = libtgw_python36.MDOrderBookItem_price_set
    __swig_getmethods__["price"] = libtgw_python36.MDOrderBookItem_price_get
    if _newclass:
        price = _swig_property(libtgw_python36.MDOrderBookItem_price_get, libtgw_python36.MDOrderBookItem_price_set)
    __swig_setmethods__["volume"] = libtgw_python36.MDOrderBookItem_volume_set
    __swig_getmethods__["volume"] = libtgw_python36.MDOrderBookItem_volume_get
    if _newclass:
        volume = _swig_property(libtgw_python36.MDOrderBookItem_volume_get, libtgw_python36.MDOrderBookItem_volume_set)
    __swig_setmethods__["order_queue_size"] = libtgw_python36.MDOrderBookItem_order_queue_size_set
    __swig_getmethods__["order_queue_size"] = libtgw_python36.MDOrderBookItem_order_queue_size_get
    if _newclass:
        order_queue_size = _swig_property(libtgw_python36.MDOrderBookItem_order_queue_size_get, libtgw_python36.MDOrderBookItem_order_queue_size_set)
    __swig_setmethods__["order_queue"] = libtgw_python36.MDOrderBookItem_order_queue_set
    __swig_getmethods__["order_queue"] = libtgw_python36.MDOrderBookItem_order_queue_get
    if _newclass:
        order_queue = _swig_property(libtgw_python36.MDOrderBookItem_order_queue_get, libtgw_python36.MDOrderBookItem_order_queue_set)

    def __init__(self):
        this = libtgw_python36.new_MDOrderBookItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDOrderBookItem
    __del__ = lambda self: None
MDOrderBookItem_swigregister = libtgw_python36.MDOrderBookItem_swigregister
MDOrderBookItem_swigregister(MDOrderBookItem)

class MDOrderBook(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOrderBook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOrderBook, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel_no"] = libtgw_python36.MDOrderBook_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python36.MDOrderBook_channel_no_get
    if _newclass:
        channel_no = _swig_property(libtgw_python36.MDOrderBook_channel_no_get, libtgw_python36.MDOrderBook_channel_no_set)
    __swig_setmethods__["market_type"] = libtgw_python36.MDOrderBook_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDOrderBook_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDOrderBook_market_type_get, libtgw_python36.MDOrderBook_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDOrderBook_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDOrderBook_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDOrderBook_security_code_get, libtgw_python36.MDOrderBook_security_code_set)
    __swig_setmethods__["last_tick_time"] = libtgw_python36.MDOrderBook_last_tick_time_set
    __swig_getmethods__["last_tick_time"] = libtgw_python36.MDOrderBook_last_tick_time_get
    if _newclass:
        last_tick_time = _swig_property(libtgw_python36.MDOrderBook_last_tick_time_get, libtgw_python36.MDOrderBook_last_tick_time_set)
    __swig_setmethods__["last_snapshot_time"] = libtgw_python36.MDOrderBook_last_snapshot_time_set
    __swig_getmethods__["last_snapshot_time"] = libtgw_python36.MDOrderBook_last_snapshot_time_get
    if _newclass:
        last_snapshot_time = _swig_property(libtgw_python36.MDOrderBook_last_snapshot_time_get, libtgw_python36.MDOrderBook_last_snapshot_time_set)
    __swig_setmethods__["last_tick_seq"] = libtgw_python36.MDOrderBook_last_tick_seq_set
    __swig_getmethods__["last_tick_seq"] = libtgw_python36.MDOrderBook_last_tick_seq_get
    if _newclass:
        last_tick_seq = _swig_property(libtgw_python36.MDOrderBook_last_tick_seq_get, libtgw_python36.MDOrderBook_last_tick_seq_set)
    __swig_setmethods__["bid_order_book"] = libtgw_python36.MDOrderBook_bid_order_book_set
    __swig_getmethods__["bid_order_book"] = libtgw_python36.MDOrderBook_bid_order_book_get
    if _newclass:
        bid_order_book = _swig_property(libtgw_python36.MDOrderBook_bid_order_book_get, libtgw_python36.MDOrderBook_bid_order_book_set)
    __swig_setmethods__["offer_order_book"] = libtgw_python36.MDOrderBook_offer_order_book_set
    __swig_getmethods__["offer_order_book"] = libtgw_python36.MDOrderBook_offer_order_book_get
    if _newclass:
        offer_order_book = _swig_property(libtgw_python36.MDOrderBook_offer_order_book_get, libtgw_python36.MDOrderBook_offer_order_book_set)
    __swig_setmethods__["total_num_trades"] = libtgw_python36.MDOrderBook_total_num_trades_set
    __swig_getmethods__["total_num_trades"] = libtgw_python36.MDOrderBook_total_num_trades_get
    if _newclass:
        total_num_trades = _swig_property(libtgw_python36.MDOrderBook_total_num_trades_get, libtgw_python36.MDOrderBook_total_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDOrderBook_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDOrderBook_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDOrderBook_total_volume_trade_get, libtgw_python36.MDOrderBook_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDOrderBook_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDOrderBook_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDOrderBook_total_value_trade_get, libtgw_python36.MDOrderBook_total_value_trade_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDOrderBook_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDOrderBook_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDOrderBook_last_price_get, libtgw_python36.MDOrderBook_last_price_set)

    def __init__(self):
        this = libtgw_python36.new_MDOrderBook()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDOrderBook
    __del__ = lambda self: None
MDOrderBook_swigregister = libtgw_python36.MDOrderBook_swigregister
MDOrderBook_swigregister(MDOrderBook)

class MDOrderBookSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOrderBookSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOrderBookSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python36.MDOrderBookSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python36.MDOrderBookSnapshot_market_type_get
    if _newclass:
        market_type = _swig_property(libtgw_python36.MDOrderBookSnapshot_market_type_get, libtgw_python36.MDOrderBookSnapshot_market_type_set)
    __swig_setmethods__["variety_category"] = libtgw_python36.MDOrderBookSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python36.MDOrderBookSnapshot_variety_category_get
    if _newclass:
        variety_category = _swig_property(libtgw_python36.MDOrderBookSnapshot_variety_category_get, libtgw_python36.MDOrderBookSnapshot_variety_category_set)
    __swig_setmethods__["security_code"] = libtgw_python36.MDOrderBookSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python36.MDOrderBookSnapshot_security_code_get
    if _newclass:
        security_code = _swig_property(libtgw_python36.MDOrderBookSnapshot_security_code_get, libtgw_python36.MDOrderBookSnapshot_security_code_set)
    __swig_setmethods__["last_tick_seq"] = libtgw_python36.MDOrderBookSnapshot_last_tick_seq_set
    __swig_getmethods__["last_tick_seq"] = libtgw_python36.MDOrderBookSnapshot_last_tick_seq_get
    if _newclass:
        last_tick_seq = _swig_property(libtgw_python36.MDOrderBookSnapshot_last_tick_seq_get, libtgw_python36.MDOrderBookSnapshot_last_tick_seq_set)
    __swig_setmethods__["channel_no"] = libtgw_python36.MDOrderBookSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python36.MDOrderBookSnapshot_channel_no_get
    if _newclass:
        channel_no = _swig_property(libtgw_python36.MDOrderBookSnapshot_channel_no_get, libtgw_python36.MDOrderBookSnapshot_channel_no_set)
    __swig_setmethods__["orig_time"] = libtgw_python36.MDOrderBookSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python36.MDOrderBookSnapshot_orig_time_get
    if _newclass:
        orig_time = _swig_property(libtgw_python36.MDOrderBookSnapshot_orig_time_get, libtgw_python36.MDOrderBookSnapshot_orig_time_set)
    __swig_setmethods__["last_price"] = libtgw_python36.MDOrderBookSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python36.MDOrderBookSnapshot_last_price_get
    if _newclass:
        last_price = _swig_property(libtgw_python36.MDOrderBookSnapshot_last_price_get, libtgw_python36.MDOrderBookSnapshot_last_price_set)
    __swig_setmethods__["total_num_trades"] = libtgw_python36.MDOrderBookSnapshot_total_num_trades_set
    __swig_getmethods__["total_num_trades"] = libtgw_python36.MDOrderBookSnapshot_total_num_trades_get
    if _newclass:
        total_num_trades = _swig_property(libtgw_python36.MDOrderBookSnapshot_total_num_trades_get, libtgw_python36.MDOrderBookSnapshot_total_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python36.MDOrderBookSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python36.MDOrderBookSnapshot_total_volume_trade_get
    if _newclass:
        total_volume_trade = _swig_property(libtgw_python36.MDOrderBookSnapshot_total_volume_trade_get, libtgw_python36.MDOrderBookSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python36.MDOrderBookSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python36.MDOrderBookSnapshot_total_value_trade_get
    if _newclass:
        total_value_trade = _swig_property(libtgw_python36.MDOrderBookSnapshot_total_value_trade_get, libtgw_python36.MDOrderBookSnapshot_total_value_trade_set)
    __swig_setmethods__["total_bid_volume"] = libtgw_python36.MDOrderBookSnapshot_total_bid_volume_set
    __swig_getmethods__["total_bid_volume"] = libtgw_python36.MDOrderBookSnapshot_total_bid_volume_get
    if _newclass:
        total_bid_volume = _swig_property(libtgw_python36.MDOrderBookSnapshot_total_bid_volume_get, libtgw_python36.MDOrderBookSnapshot_total_bid_volume_set)
    __swig_setmethods__["total_offer_volume"] = libtgw_python36.MDOrderBookSnapshot_total_offer_volume_set
    __swig_getmethods__["total_offer_volume"] = libtgw_python36.MDOrderBookSnapshot_total_offer_volume_get
    if _newclass:
        total_offer_volume = _swig_property(libtgw_python36.MDOrderBookSnapshot_total_offer_volume_get, libtgw_python36.MDOrderBookSnapshot_total_offer_volume_set)
    __swig_setmethods__["num_bid_orders"] = libtgw_python36.MDOrderBookSnapshot_num_bid_orders_set
    __swig_getmethods__["num_bid_orders"] = libtgw_python36.MDOrderBookSnapshot_num_bid_orders_get
    if _newclass:
        num_bid_orders = _swig_property(libtgw_python36.MDOrderBookSnapshot_num_bid_orders_get, libtgw_python36.MDOrderBookSnapshot_num_bid_orders_set)
    __swig_setmethods__["num_offer_orders"] = libtgw_python36.MDOrderBookSnapshot_num_offer_orders_set
    __swig_getmethods__["num_offer_orders"] = libtgw_python36.MDOrderBookSnapshot_num_offer_orders_get
    if _newclass:
        num_offer_orders = _swig_property(libtgw_python36.MDOrderBookSnapshot_num_offer_orders_get, libtgw_python36.MDOrderBookSnapshot_num_offer_orders_set)
    __swig_setmethods__["bid_price"] = libtgw_python36.MDOrderBookSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python36.MDOrderBookSnapshot_bid_price_get
    if _newclass:
        bid_price = _swig_property(libtgw_python36.MDOrderBookSnapshot_bid_price_get, libtgw_python36.MDOrderBookSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python36.MDOrderBookSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python36.MDOrderBookSnapshot_bid_volume_get
    if _newclass:
        bid_volume = _swig_property(libtgw_python36.MDOrderBookSnapshot_bid_volume_get, libtgw_python36.MDOrderBookSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python36.MDOrderBookSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python36.MDOrderBookSnapshot_offer_price_get
    if _newclass:
        offer_price = _swig_property(libtgw_python36.MDOrderBookSnapshot_offer_price_get, libtgw_python36.MDOrderBookSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python36.MDOrderBookSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python36.MDOrderBookSnapshot_offer_volume_get
    if _newclass:
        offer_volume = _swig_property(libtgw_python36.MDOrderBookSnapshot_offer_volume_get, libtgw_python36.MDOrderBookSnapshot_offer_volume_set)

    def __init__(self):
        this = libtgw_python36.new_MDOrderBookSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_MDOrderBookSnapshot
    __del__ = lambda self: None
MDOrderBookSnapshot_swigregister = libtgw_python36.MDOrderBookSnapshot_swigregister
MDOrderBookSnapshot_swigregister(MDOrderBookSnapshot)

class IGMDApi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDApi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDApi, name)
    __repr__ = _swig_repr
    if _newclass:
        GetVersion = staticmethod(libtgw_python36.IGMDApi_GetVersion)
    else:
        GetVersion = libtgw_python36.IGMDApi_GetVersion
    if _newclass:
        Init = staticmethod(libtgw_python36.IGMDApi_Init)
    else:
        Init = libtgw_python36.IGMDApi_Init
    if _newclass:
        Release = staticmethod(libtgw_python36.IGMDApi_Release)
    else:
        Release = libtgw_python36.IGMDApi_Release
    if _newclass:
        FreeMemory = staticmethod(libtgw_python36.IGMDApi_FreeMemory)
    else:
        FreeMemory = libtgw_python36.IGMDApi_FreeMemory
    if _newclass:
        GetTaskID = staticmethod(libtgw_python36.IGMDApi_GetTaskID)
    else:
        GetTaskID = libtgw_python36.IGMDApi_GetTaskID
    if _newclass:
        UpdatePassWord = staticmethod(libtgw_python36.IGMDApi_UpdatePassWord)
    else:
        UpdatePassWord = libtgw_python36.IGMDApi_UpdatePassWord
    if _newclass:
        Subscribe = staticmethod(libtgw_python36.IGMDApi_Subscribe)
    else:
        Subscribe = libtgw_python36.IGMDApi_Subscribe
    if _newclass:
        UnSubscribe = staticmethod(libtgw_python36.IGMDApi_UnSubscribe)
    else:
        UnSubscribe = libtgw_python36.IGMDApi_UnSubscribe
    if _newclass:
        SubFactor = staticmethod(libtgw_python36.IGMDApi_SubFactor)
    else:
        SubFactor = libtgw_python36.IGMDApi_SubFactor
    if _newclass:
        UnSubFactor = staticmethod(libtgw_python36.IGMDApi_UnSubFactor)
    else:
        UnSubFactor = libtgw_python36.IGMDApi_UnSubFactor
    if _newclass:
        SubscribeDerivedData = staticmethod(libtgw_python36.IGMDApi_SubscribeDerivedData)
    else:
        SubscribeDerivedData = libtgw_python36.IGMDApi_SubscribeDerivedData
    if _newclass:
        QueryKline = staticmethod(libtgw_python36.IGMDApi_QueryKline)
    else:
        QueryKline = libtgw_python36.IGMDApi_QueryKline
    if _newclass:
        QuerySnapshot = staticmethod(libtgw_python36.IGMDApi_QuerySnapshot)
    else:
        QuerySnapshot = libtgw_python36.IGMDApi_QuerySnapshot
    if _newclass:
        QueryOrderQueue = staticmethod(libtgw_python36.IGMDApi_QueryOrderQueue)
    else:
        QueryOrderQueue = libtgw_python36.IGMDApi_QueryOrderQueue
    if _newclass:
        QueryTickExecution = staticmethod(libtgw_python36.IGMDApi_QueryTickExecution)
    else:
        QueryTickExecution = libtgw_python36.IGMDApi_QueryTickExecution
    if _newclass:
        QueryTickOrder = staticmethod(libtgw_python36.IGMDApi_QueryTickOrder)
    else:
        QueryTickOrder = libtgw_python36.IGMDApi_QueryTickOrder
    if _newclass:
        QueryCodeTable = staticmethod(libtgw_python36.IGMDApi_QueryCodeTable)
    else:
        QueryCodeTable = libtgw_python36.IGMDApi_QueryCodeTable
    if _newclass:
        QuerySecuritiesInfo = staticmethod(libtgw_python36.IGMDApi_QuerySecuritiesInfo)
    else:
        QuerySecuritiesInfo = libtgw_python36.IGMDApi_QuerySecuritiesInfo
    if _newclass:
        QueryETFInfo = staticmethod(libtgw_python36.IGMDApi_QueryETFInfo)
    else:
        QueryETFInfo = libtgw_python36.IGMDApi_QueryETFInfo
    if _newclass:
        QueryExFactorTable = staticmethod(libtgw_python36.IGMDApi_QueryExFactorTable)
    else:
        QueryExFactorTable = libtgw_python36.IGMDApi_QueryExFactorTable
    if _newclass:
        QueryFactor = staticmethod(libtgw_python36.IGMDApi_QueryFactor)
    else:
        QueryFactor = libtgw_python36.IGMDApi_QueryFactor
    if _newclass:
        SetThirdInfoParam = staticmethod(libtgw_python36.IGMDApi_SetThirdInfoParam)
    else:
        SetThirdInfoParam = libtgw_python36.IGMDApi_SetThirdInfoParam
    if _newclass:
        QueryThirdInfo = staticmethod(libtgw_python36.IGMDApi_QueryThirdInfo)
    else:
        QueryThirdInfo = libtgw_python36.IGMDApi_QueryThirdInfo
    if _newclass:
        ReplayKline = staticmethod(libtgw_python36.IGMDApi_ReplayKline)
    else:
        ReplayKline = libtgw_python36.IGMDApi_ReplayKline
    if _newclass:
        ReplayRequest = staticmethod(libtgw_python36.IGMDApi_ReplayRequest)
    else:
        ReplayRequest = libtgw_python36.IGMDApi_ReplayRequest
    if _newclass:
        CancelTask = staticmethod(libtgw_python36.IGMDApi_CancelTask)
    else:
        CancelTask = libtgw_python36.IGMDApi_CancelTask

    def __init__(self):
        this = libtgw_python36.new_IGMDApi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = libtgw_python36.delete_IGMDApi
    __del__ = lambda self: None
IGMDApi_swigregister = libtgw_python36.IGMDApi_swigregister
IGMDApi_swigregister(IGMDApi)

def IGMDApi_GetVersion():
    return libtgw_python36.IGMDApi_GetVersion()
IGMDApi_GetVersion = libtgw_python36.IGMDApi_GetVersion

def IGMDApi_Init(*args):
    return libtgw_python36.IGMDApi_Init(*args)
IGMDApi_Init = libtgw_python36.IGMDApi_Init

def IGMDApi_Release():
    return libtgw_python36.IGMDApi_Release()
IGMDApi_Release = libtgw_python36.IGMDApi_Release

def IGMDApi_FreeMemory(data):
    return libtgw_python36.IGMDApi_FreeMemory(data)
IGMDApi_FreeMemory = libtgw_python36.IGMDApi_FreeMemory

def IGMDApi_GetTaskID():
    return libtgw_python36.IGMDApi_GetTaskID()
IGMDApi_GetTaskID = libtgw_python36.IGMDApi_GetTaskID

def IGMDApi_UpdatePassWord(req):
    return libtgw_python36.IGMDApi_UpdatePassWord(req)
IGMDApi_UpdatePassWord = libtgw_python36.IGMDApi_UpdatePassWord

def IGMDApi_Subscribe(item, cnt):
    return libtgw_python36.IGMDApi_Subscribe(item, cnt)
IGMDApi_Subscribe = libtgw_python36.IGMDApi_Subscribe

def IGMDApi_UnSubscribe(item, cnt):
    return libtgw_python36.IGMDApi_UnSubscribe(item, cnt)
IGMDApi_UnSubscribe = libtgw_python36.IGMDApi_UnSubscribe

def IGMDApi_SubFactor(item, cnt):
    return libtgw_python36.IGMDApi_SubFactor(item, cnt)
IGMDApi_SubFactor = libtgw_python36.IGMDApi_SubFactor

def IGMDApi_UnSubFactor(item, cnt):
    return libtgw_python36.IGMDApi_UnSubFactor(item, cnt)
IGMDApi_UnSubFactor = libtgw_python36.IGMDApi_UnSubFactor

def IGMDApi_SubscribeDerivedData(subscribe_type, derived_data_type, item, cnt):
    return libtgw_python36.IGMDApi_SubscribeDerivedData(subscribe_type, derived_data_type, item, cnt)
IGMDApi_SubscribeDerivedData = libtgw_python36.IGMDApi_SubscribeDerivedData

def IGMDApi_QueryKline(kline_spi, req_kline):
    return libtgw_python36.IGMDApi_QueryKline(kline_spi, req_kline)
IGMDApi_QueryKline = libtgw_python36.IGMDApi_QueryKline

def IGMDApi_QuerySnapshot(snapshot_spi, req_snapshot):
    return libtgw_python36.IGMDApi_QuerySnapshot(snapshot_spi, req_snapshot)
IGMDApi_QuerySnapshot = libtgw_python36.IGMDApi_QuerySnapshot

def IGMDApi_QueryOrderQueue(order_queue_spi, req_order_queue):
    return libtgw_python36.IGMDApi_QueryOrderQueue(order_queue_spi, req_order_queue)
IGMDApi_QueryOrderQueue = libtgw_python36.IGMDApi_QueryOrderQueue

def IGMDApi_QueryTickExecution(tick_exec_spi, req_tick_execution):
    return libtgw_python36.IGMDApi_QueryTickExecution(tick_exec_spi, req_tick_execution)
IGMDApi_QueryTickExecution = libtgw_python36.IGMDApi_QueryTickExecution

def IGMDApi_QueryTickOrder(tick_order_spi, req_tick_order):
    return libtgw_python36.IGMDApi_QueryTickOrder(tick_order_spi, req_tick_order)
IGMDApi_QueryTickOrder = libtgw_python36.IGMDApi_QueryTickOrder

def IGMDApi_QueryCodeTable(code_table_spi):
    return libtgw_python36.IGMDApi_QueryCodeTable(code_table_spi)
IGMDApi_QueryCodeTable = libtgw_python36.IGMDApi_QueryCodeTable

def IGMDApi_QuerySecuritiesInfo(code_table_spi, item, cnt):
    return libtgw_python36.IGMDApi_QuerySecuritiesInfo(code_table_spi, item, cnt)
IGMDApi_QuerySecuritiesInfo = libtgw_python36.IGMDApi_QuerySecuritiesInfo

def IGMDApi_QueryETFInfo(etf_info_spi, item, cnt):
    return libtgw_python36.IGMDApi_QueryETFInfo(etf_info_spi, item, cnt)
IGMDApi_QueryETFInfo = libtgw_python36.IGMDApi_QueryETFInfo

def IGMDApi_QueryExFactorTable(ex_factor_spi, code):
    return libtgw_python36.IGMDApi_QueryExFactorTable(ex_factor_spi, code)
IGMDApi_QueryExFactorTable = libtgw_python36.IGMDApi_QueryExFactorTable

def IGMDApi_QueryFactor(factor_spi, req_factor):
    return libtgw_python36.IGMDApi_QueryFactor(factor_spi, req_factor)
IGMDApi_QueryFactor = libtgw_python36.IGMDApi_QueryFactor

def IGMDApi_SetThirdInfoParam(task_id, key, value):
    return libtgw_python36.IGMDApi_SetThirdInfoParam(task_id, key, value)
IGMDApi_SetThirdInfoParam = libtgw_python36.IGMDApi_SetThirdInfoParam

def IGMDApi_QueryThirdInfo(third_info_spi, task_id):
    return libtgw_python36.IGMDApi_QueryThirdInfo(third_info_spi, task_id)
IGMDApi_QueryThirdInfo = libtgw_python36.IGMDApi_QueryThirdInfo

def IGMDApi_ReplayKline(pSpi, req_kline):
    return libtgw_python36.IGMDApi_ReplayKline(pSpi, req_kline)
IGMDApi_ReplayKline = libtgw_python36.IGMDApi_ReplayKline

def IGMDApi_ReplayRequest(pSpi, req_replay):
    return libtgw_python36.IGMDApi_ReplayRequest(pSpi, req_replay)
IGMDApi_ReplayRequest = libtgw_python36.IGMDApi_ReplayRequest

def IGMDApi_CancelTask(task_id):
    return libtgw_python36.IGMDApi_CancelTask(task_id)
IGMDApi_CancelTask = libtgw_python36.IGMDApi_CancelTask

class IGMDSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDSpi
    __del__ = lambda self: None

    def OnLog(self, level, log, len):
        return libtgw_python36.IGMDSpi_OnLog(self, level, log, len)

    def OnLogon(self, data):
        return libtgw_python36.IGMDSpi_OnLogon(self, data)

    def OnIndicator(self, indicator, len):
        return libtgw_python36.IGMDSpi_OnIndicator(self, indicator, len)

    def OnEvent(self, level, code, event_msg, len):
        return libtgw_python36.IGMDSpi_OnEvent(self, level, code, event_msg, len)

    def OnMDSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDSnapshot(self, data, cnt)

    def OnMDIndexSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDIndexSnapshot(self, data, cnt)

    def OnMDOptionSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDOptionSnapshot(self, data, cnt)

    def OnMDHKTSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDHKTSnapshot(self, data, cnt)

    def OnMDAfterHourFixedPriceSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDAfterHourFixedPriceSnapshot(self, data, cnt)

    def OnMDCSIIndexSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDCSIIndexSnapshot(self, data, cnt)

    def OnMDCnIndexSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDCnIndexSnapshot(self, data, cnt)

    def OnMDHKTRealtimeLimit(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDHKTRealtimeLimit(self, data, cnt)

    def OnMDHKTProductStatus(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDHKTProductStatus(self, data, cnt)

    def OnMDHKTVCM(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDHKTVCM(self, data, cnt)

    def OnMDFutureSnapshot(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnMDFutureSnapshot(self, data, cnt)

    def OnKLine(self, data, cnt, kline_type):
        return libtgw_python36.IGMDSpi_OnKLine(self, data, cnt, kline_type)

    def OnSnapshotDerive(self, data, cnt):
        return libtgw_python36.IGMDSpi_OnSnapshotDerive(self, data, cnt)

    def OnFactor(self, data):
        return libtgw_python36.IGMDSpi_OnFactor(self, data)

    def OnMDOrderBook(self, order_book):
        return libtgw_python36.IGMDSpi_OnMDOrderBook(self, order_book)

    def OnMDOrderBookSnapshot(self, order_book_snapshots, cnt):
        return libtgw_python36.IGMDSpi_OnMDOrderBookSnapshot(self, order_book_snapshots, cnt)

    def __init__(self):
        if self.__class__ == IGMDSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDSpi(self)
        return weakref_proxy(self)
IGMDSpi_swigregister = libtgw_python36.IGMDSpi_swigregister
IGMDSpi_swigregister(IGMDSpi)

class Tools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tools, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        CreateSubscribeItem = staticmethod(libtgw_python36.Tools_CreateSubscribeItem)
    else:
        CreateSubscribeItem = libtgw_python36.Tools_CreateSubscribeItem
    if _newclass:
        CreateSubFactorItem = staticmethod(libtgw_python36.Tools_CreateSubFactorItem)
    else:
        CreateSubFactorItem = libtgw_python36.Tools_CreateSubFactorItem
    if _newclass:
        CreateSubCodeTableItem = staticmethod(libtgw_python36.Tools_CreateSubCodeTableItem)
    else:
        CreateSubCodeTableItem = libtgw_python36.Tools_CreateSubCodeTableItem
    if _newclass:
        CreateReqHistoryItem = staticmethod(libtgw_python36.Tools_CreateReqHistoryItem)
    else:
        CreateReqHistoryItem = libtgw_python36.Tools_CreateReqHistoryItem
    if _newclass:
        SetSubscribeItem = staticmethod(libtgw_python36.Tools_SetSubscribeItem)
    else:
        SetSubscribeItem = libtgw_python36.Tools_SetSubscribeItem
    if _newclass:
        SetSubFactorItem = staticmethod(libtgw_python36.Tools_SetSubFactorItem)
    else:
        SetSubFactorItem = libtgw_python36.Tools_SetSubFactorItem
    if _newclass:
        SetSubCodeTableItem = staticmethod(libtgw_python36.Tools_SetSubCodeTableItem)
    else:
        SetSubCodeTableItem = libtgw_python36.Tools_SetSubCodeTableItem
    if _newclass:
        SetReqHistoryItem = staticmethod(libtgw_python36.Tools_SetReqHistoryItem)
    else:
        SetReqHistoryItem = libtgw_python36.Tools_SetReqHistoryItem
    if _newclass:
        CreateSubscribeDerivedDataItem = staticmethod(libtgw_python36.Tools_CreateSubscribeDerivedDataItem)
    else:
        CreateSubscribeDerivedDataItem = libtgw_python36.Tools_CreateSubscribeDerivedDataItem
    if _newclass:
        DestroySubscribeDerivedDataItem = staticmethod(libtgw_python36.Tools_DestroySubscribeDerivedDataItem)
    else:
        DestroySubscribeDerivedDataItem = libtgw_python36.Tools_DestroySubscribeDerivedDataItem
    if _newclass:
        SetSubscribeDerivedDataItem = staticmethod(libtgw_python36.Tools_SetSubscribeDerivedDataItem)
    else:
        SetSubscribeDerivedDataItem = libtgw_python36.Tools_SetSubscribeDerivedDataItem
    if _newclass:
        GetSubscribeDerivedDataItemByIndex = staticmethod(libtgw_python36.Tools_GetSubscribeDerivedDataItemByIndex)
    else:
        GetSubscribeDerivedDataItemByIndex = libtgw_python36.Tools_GetSubscribeDerivedDataItemByIndex
    if _newclass:
        DestroySubscribeItem = staticmethod(libtgw_python36.Tools_DestroySubscribeItem)
    else:
        DestroySubscribeItem = libtgw_python36.Tools_DestroySubscribeItem
    if _newclass:
        DestroySubFactorItem = staticmethod(libtgw_python36.Tools_DestroySubFactorItem)
    else:
        DestroySubFactorItem = libtgw_python36.Tools_DestroySubFactorItem
    if _newclass:
        DestroyCodeTableItem = staticmethod(libtgw_python36.Tools_DestroyCodeTableItem)
    else:
        DestroyCodeTableItem = libtgw_python36.Tools_DestroyCodeTableItem
    if _newclass:
        DestroyReqHistoryItem = staticmethod(libtgw_python36.Tools_DestroyReqHistoryItem)
    else:
        DestroyReqHistoryItem = libtgw_python36.Tools_DestroyReqHistoryItem
    if _newclass:
        GetSubscribeItemByIndex = staticmethod(libtgw_python36.Tools_GetSubscribeItemByIndex)
    else:
        GetSubscribeItemByIndex = libtgw_python36.Tools_GetSubscribeItemByIndex
    if _newclass:
        GetSubFactorItemByIndex = staticmethod(libtgw_python36.Tools_GetSubFactorItemByIndex)
    else:
        GetSubFactorItemByIndex = libtgw_python36.Tools_GetSubFactorItemByIndex
    if _newclass:
        GetSubCodeTableItemByIndex = staticmethod(libtgw_python36.Tools_GetSubCodeTableItemByIndex)
    else:
        GetSubCodeTableItemByIndex = libtgw_python36.Tools_GetSubCodeTableItemByIndex
    if _newclass:
        GetReqHistoryItemByIndex = staticmethod(libtgw_python36.Tools_GetReqHistoryItemByIndex)
    else:
        GetReqHistoryItemByIndex = libtgw_python36.Tools_GetReqHistoryItemByIndex
    if _newclass:
        GetInt64DataByIndex = staticmethod(libtgw_python36.Tools_GetInt64DataByIndex)
    else:
        GetInt64DataByIndex = libtgw_python36.Tools_GetInt64DataByIndex
    if _newclass:
        GetDataSize = staticmethod(libtgw_python36.Tools_GetDataSize)
    else:
        GetDataSize = libtgw_python36.Tools_GetDataSize
    if _newclass:
        GetDataByIndex = staticmethod(libtgw_python36.Tools_GetDataByIndex)
    else:
        GetDataByIndex = libtgw_python36.Tools_GetDataByIndex
    if _newclass:
        GetMDHKExListItemByIndex = staticmethod(libtgw_python36.Tools_GetMDHKExListItemByIndex)
    else:
        GetMDHKExListItemByIndex = libtgw_python36.Tools_GetMDHKExListItemByIndex
    if _newclass:
        GetMDHKExDetailItemByIndex = staticmethod(libtgw_python36.Tools_GetMDHKExDetailItemByIndex)
    else:
        GetMDHKExDetailItemByIndex = libtgw_python36.Tools_GetMDHKExDetailItemByIndex
    if _newclass:
        Serialize = staticmethod(libtgw_python36.Tools_Serialize)
    else:
        Serialize = libtgw_python36.Tools_Serialize
    if _newclass:
        ShowFactorInfo = staticmethod(libtgw_python36.Tools_ShowFactorInfo)
    else:
        ShowFactorInfo = libtgw_python36.Tools_ShowFactorInfo
    if _newclass:
        Init = staticmethod(libtgw_python36.Tools_Init)
    else:
        Init = libtgw_python36.Tools_Init
    if _newclass:
        WriteTitle = staticmethod(libtgw_python36.Tools_WriteTitle)
    else:
        WriteTitle = libtgw_python36.Tools_WriteTitle
    if _newclass:
        WriteStockSnapshot = staticmethod(libtgw_python36.Tools_WriteStockSnapshot)
    else:
        WriteStockSnapshot = libtgw_python36.Tools_WriteStockSnapshot
    if _newclass:
        WriteIndexSnapshot = staticmethod(libtgw_python36.Tools_WriteIndexSnapshot)
    else:
        WriteIndexSnapshot = libtgw_python36.Tools_WriteIndexSnapshot
    if _newclass:
        WriteOptionSnapshot = staticmethod(libtgw_python36.Tools_WriteOptionSnapshot)
    else:
        WriteOptionSnapshot = libtgw_python36.Tools_WriteOptionSnapshot
    if _newclass:
        WriteHKTSnapshot = staticmethod(libtgw_python36.Tools_WriteHKTSnapshot)
    else:
        WriteHKTSnapshot = libtgw_python36.Tools_WriteHKTSnapshot
    if _newclass:
        WriteAfterHourFixPriceSnapshot = staticmethod(libtgw_python36.Tools_WriteAfterHourFixPriceSnapshot)
    else:
        WriteAfterHourFixPriceSnapshot = libtgw_python36.Tools_WriteAfterHourFixPriceSnapshot
    if _newclass:
        WriteCSIIndexSnapshot = staticmethod(libtgw_python36.Tools_WriteCSIIndexSnapshot)
    else:
        WriteCSIIndexSnapshot = libtgw_python36.Tools_WriteCSIIndexSnapshot
    if _newclass:
        WriteCnIndexSnapshot = staticmethod(libtgw_python36.Tools_WriteCnIndexSnapshot)
    else:
        WriteCnIndexSnapshot = libtgw_python36.Tools_WriteCnIndexSnapshot
    if _newclass:
        WriteHKTRealLimit = staticmethod(libtgw_python36.Tools_WriteHKTRealLimit)
    else:
        WriteHKTRealLimit = libtgw_python36.Tools_WriteHKTRealLimit
    if _newclass:
        WriteHKTProduStatus = staticmethod(libtgw_python36.Tools_WriteHKTProduStatus)
    else:
        WriteHKTProduStatus = libtgw_python36.Tools_WriteHKTProduStatus
    if _newclass:
        WriteHKTVCM = staticmethod(libtgw_python36.Tools_WriteHKTVCM)
    else:
        WriteHKTVCM = libtgw_python36.Tools_WriteHKTVCM
    if _newclass:
        WriteFutureSnapshot = staticmethod(libtgw_python36.Tools_WriteFutureSnapshot)
    else:
        WriteFutureSnapshot = libtgw_python36.Tools_WriteFutureSnapshot
    if _newclass:
        WriteKline = staticmethod(libtgw_python36.Tools_WriteKline)
    else:
        WriteKline = libtgw_python36.Tools_WriteKline
    if _newclass:
        WriteSnapshotDerive = staticmethod(libtgw_python36.Tools_WriteSnapshotDerive)
    else:
        WriteSnapshotDerive = libtgw_python36.Tools_WriteSnapshotDerive
    if _newclass:
        WriteFactor = staticmethod(libtgw_python36.Tools_WriteFactor)
    else:
        WriteFactor = libtgw_python36.Tools_WriteFactor
    if _newclass:
        Release = staticmethod(libtgw_python36.Tools_Release)
    else:
        Release = libtgw_python36.Tools_Release
    if _newclass:
        WriteQueryTickOrder = staticmethod(libtgw_python36.Tools_WriteQueryTickOrder)
    else:
        WriteQueryTickOrder = libtgw_python36.Tools_WriteQueryTickOrder
    if _newclass:
        WriteQueryTickExecution = staticmethod(libtgw_python36.Tools_WriteQueryTickExecution)
    else:
        WriteQueryTickExecution = libtgw_python36.Tools_WriteQueryTickExecution
    if _newclass:
        WriteQueryOrderQueue = staticmethod(libtgw_python36.Tools_WriteQueryOrderQueue)
    else:
        WriteQueryOrderQueue = libtgw_python36.Tools_WriteQueryOrderQueue
    if _newclass:
        WriteQueryCodeTable = staticmethod(libtgw_python36.Tools_WriteQueryCodeTable)
    else:
        WriteQueryCodeTable = libtgw_python36.Tools_WriteQueryCodeTable
    if _newclass:
        WriteQuerySecurInfo = staticmethod(libtgw_python36.Tools_WriteQuerySecurInfo)
    else:
        WriteQuerySecurInfo = libtgw_python36.Tools_WriteQuerySecurInfo
    if _newclass:
        WriteQueryETFInfo = staticmethod(libtgw_python36.Tools_WriteQueryETFInfo)
    else:
        WriteQueryETFInfo = libtgw_python36.Tools_WriteQueryETFInfo
    if _newclass:
        WriteQueryExFactor = staticmethod(libtgw_python36.Tools_WriteQueryExFactor)
    else:
        WriteQueryExFactor = libtgw_python36.Tools_WriteQueryExFactor
    if _newclass:
        WriteQueryThirdInfo = staticmethod(libtgw_python36.Tools_WriteQueryThirdInfo)
    else:
        WriteQueryThirdInfo = libtgw_python36.Tools_WriteQueryThirdInfo
    if _newclass:
        WriteQueryStockSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryStockSnapshot)
    else:
        WriteQueryStockSnapshot = libtgw_python36.Tools_WriteQueryStockSnapshot
    if _newclass:
        WriteQueryIndexSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryIndexSnapshot)
    else:
        WriteQueryIndexSnapshot = libtgw_python36.Tools_WriteQueryIndexSnapshot
    if _newclass:
        WriteQueryOptionSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryOptionSnapshot)
    else:
        WriteQueryOptionSnapshot = libtgw_python36.Tools_WriteQueryOptionSnapshot
    if _newclass:
        WriteQueryOrderSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryOrderSnapshot)
    else:
        WriteQueryOrderSnapshot = libtgw_python36.Tools_WriteQueryOrderSnapshot
    if _newclass:
        WriteQueryOrderBrokerSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryOrderBrokerSnapshot)
    else:
        WriteQueryOrderBrokerSnapshot = libtgw_python36.Tools_WriteQueryOrderBrokerSnapshot
    if _newclass:
        WriteQueryHKTSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryHKTSnapshot)
    else:
        WriteQueryHKTSnapshot = libtgw_python36.Tools_WriteQueryHKTSnapshot
    if _newclass:
        WriteQueryFutureSnapshot = staticmethod(libtgw_python36.Tools_WriteQueryFutureSnapshot)
    else:
        WriteQueryFutureSnapshot = libtgw_python36.Tools_WriteQueryFutureSnapshot
    if _newclass:
        WriteQueryKline = staticmethod(libtgw_python36.Tools_WriteQueryKline)
    else:
        WriteQueryKline = libtgw_python36.Tools_WriteQueryKline
    if _newclass:
        WriteQueryFactor = staticmethod(libtgw_python36.Tools_WriteQueryFactor)
    else:
        WriteQueryFactor = libtgw_python36.Tools_WriteQueryFactor
    if _newclass:
        WriteReplayTickExecution = staticmethod(libtgw_python36.Tools_WriteReplayTickExecution)
    else:
        WriteReplayTickExecution = libtgw_python36.Tools_WriteReplayTickExecution
    if _newclass:
        WriteReplaySnapshot = staticmethod(libtgw_python36.Tools_WriteReplaySnapshot)
    else:
        WriteReplaySnapshot = libtgw_python36.Tools_WriteReplaySnapshot
    if _newclass:
        WriteReplayKline = staticmethod(libtgw_python36.Tools_WriteReplayKline)
    else:
        WriteReplayKline = libtgw_python36.Tools_WriteReplayKline
    if _newclass:
        FreeMemory = staticmethod(libtgw_python36.Tools_FreeMemory)
    else:
        FreeMemory = libtgw_python36.Tools_FreeMemory
    if _newclass:
        KLineToJson = staticmethod(libtgw_python36.Tools_KLineToJson)
    else:
        KLineToJson = libtgw_python36.Tools_KLineToJson
    if _newclass:
        SnapshotDeriveToJson = staticmethod(libtgw_python36.Tools_SnapshotDeriveToJson)
    else:
        SnapshotDeriveToJson = libtgw_python36.Tools_SnapshotDeriveToJson
    if _newclass:
        SnapshotL1ToJson = staticmethod(libtgw_python36.Tools_SnapshotL1ToJson)
    else:
        SnapshotL1ToJson = libtgw_python36.Tools_SnapshotL1ToJson
    if _newclass:
        IndexSnapshotToJson = staticmethod(libtgw_python36.Tools_IndexSnapshotToJson)
    else:
        IndexSnapshotToJson = libtgw_python36.Tools_IndexSnapshotToJson
    if _newclass:
        OptionSnapshotToJson = staticmethod(libtgw_python36.Tools_OptionSnapshotToJson)
    else:
        OptionSnapshotToJson = libtgw_python36.Tools_OptionSnapshotToJson
    if _newclass:
        HKTSnapshotToJson = staticmethod(libtgw_python36.Tools_HKTSnapshotToJson)
    else:
        HKTSnapshotToJson = libtgw_python36.Tools_HKTSnapshotToJson
    if _newclass:
        FutureSnapshotToJson = staticmethod(libtgw_python36.Tools_FutureSnapshotToJson)
    else:
        FutureSnapshotToJson = libtgw_python36.Tools_FutureSnapshotToJson
    if _newclass:
        OrderSnapshotToJson = staticmethod(libtgw_python36.Tools_OrderSnapshotToJson)
    else:
        OrderSnapshotToJson = libtgw_python36.Tools_OrderSnapshotToJson
    if _newclass:
        OrderBrokerSnapshotToJson = staticmethod(libtgw_python36.Tools_OrderBrokerSnapshotToJson)
    else:
        OrderBrokerSnapshotToJson = libtgw_python36.Tools_OrderBrokerSnapshotToJson
    if _newclass:
        AfterHourFixedPriceSnapshotToJson = staticmethod(libtgw_python36.Tools_AfterHourFixedPriceSnapshotToJson)
    else:
        AfterHourFixedPriceSnapshotToJson = libtgw_python36.Tools_AfterHourFixedPriceSnapshotToJson
    if _newclass:
        CSIIndexSnapshotToJson = staticmethod(libtgw_python36.Tools_CSIIndexSnapshotToJson)
    else:
        CSIIndexSnapshotToJson = libtgw_python36.Tools_CSIIndexSnapshotToJson
    if _newclass:
        CnIndexSnapshotToJson = staticmethod(libtgw_python36.Tools_CnIndexSnapshotToJson)
    else:
        CnIndexSnapshotToJson = libtgw_python36.Tools_CnIndexSnapshotToJson
    if _newclass:
        HKTRealtimeLimitToJson = staticmethod(libtgw_python36.Tools_HKTRealtimeLimitToJson)
    else:
        HKTRealtimeLimitToJson = libtgw_python36.Tools_HKTRealtimeLimitToJson
    if _newclass:
        HKTProductStatusToJson = staticmethod(libtgw_python36.Tools_HKTProductStatusToJson)
    else:
        HKTProductStatusToJson = libtgw_python36.Tools_HKTProductStatusToJson
    if _newclass:
        HKTVCMToJson = staticmethod(libtgw_python36.Tools_HKTVCMToJson)
    else:
        HKTVCMToJson = libtgw_python36.Tools_HKTVCMToJson
    if _newclass:
        SnapshotL2ToJson = staticmethod(libtgw_python36.Tools_SnapshotL2ToJson)
    else:
        SnapshotL2ToJson = libtgw_python36.Tools_SnapshotL2ToJson
    if _newclass:
        TickExecutionToJson = staticmethod(libtgw_python36.Tools_TickExecutionToJson)
    else:
        TickExecutionToJson = libtgw_python36.Tools_TickExecutionToJson
    if _newclass:
        TickOrderToJson = staticmethod(libtgw_python36.Tools_TickOrderToJson)
    else:
        TickOrderToJson = libtgw_python36.Tools_TickOrderToJson
    if _newclass:
        OrderQueueToJson = staticmethod(libtgw_python36.Tools_OrderQueueToJson)
    else:
        OrderQueueToJson = libtgw_python36.Tools_OrderQueueToJson
    if _newclass:
        CodeTableToJson = staticmethod(libtgw_python36.Tools_CodeTableToJson)
    else:
        CodeTableToJson = libtgw_python36.Tools_CodeTableToJson
    if _newclass:
        ExFactorTableToJson = staticmethod(libtgw_python36.Tools_ExFactorTableToJson)
    else:
        ExFactorTableToJson = libtgw_python36.Tools_ExFactorTableToJson
    if _newclass:
        StockInfoToJson = staticmethod(libtgw_python36.Tools_StockInfoToJson)
    else:
        StockInfoToJson = libtgw_python36.Tools_StockInfoToJson
    if _newclass:
        CodeTableRecordToJson = staticmethod(libtgw_python36.Tools_CodeTableRecordToJson)
    else:
        CodeTableRecordToJson = libtgw_python36.Tools_CodeTableRecordToJson
    if _newclass:
        OrderBookSnapshotToJson = staticmethod(libtgw_python36.Tools_OrderBookSnapshotToJson)
    else:
        OrderBookSnapshotToJson = libtgw_python36.Tools_OrderBookSnapshotToJson
    if _newclass:
        FactorToJson = staticmethod(libtgw_python36.Tools_FactorToJson)
    else:
        FactorToJson = libtgw_python36.Tools_FactorToJson
    if _newclass:
        ThirdInfoToJson = staticmethod(libtgw_python36.Tools_ThirdInfoToJson)
    else:
        ThirdInfoToJson = libtgw_python36.Tools_ThirdInfoToJson
    if _newclass:
        OrderBookToJson = staticmethod(libtgw_python36.Tools_OrderBookToJson)
    else:
        OrderBookToJson = libtgw_python36.Tools_OrderBookToJson
    if _newclass:
        ETFInfoToJson = staticmethod(libtgw_python36.Tools_ETFInfoToJson)
    else:
        ETFInfoToJson = libtgw_python36.Tools_ETFInfoToJson
    __swig_destroy__ = libtgw_python36.delete_Tools
    __del__ = lambda self: None
Tools_swigregister = libtgw_python36.Tools_swigregister
Tools_swigregister(Tools)

def Tools_CreateSubscribeItem(cnt):
    return libtgw_python36.Tools_CreateSubscribeItem(cnt)
Tools_CreateSubscribeItem = libtgw_python36.Tools_CreateSubscribeItem

def Tools_CreateSubFactorItem(cnt):
    return libtgw_python36.Tools_CreateSubFactorItem(cnt)
Tools_CreateSubFactorItem = libtgw_python36.Tools_CreateSubFactorItem

def Tools_CreateSubCodeTableItem(cnt):
    return libtgw_python36.Tools_CreateSubCodeTableItem(cnt)
Tools_CreateSubCodeTableItem = libtgw_python36.Tools_CreateSubCodeTableItem

def Tools_CreateReqHistoryItem(cnt):
    return libtgw_python36.Tools_CreateReqHistoryItem(cnt)
Tools_CreateReqHistoryItem = libtgw_python36.Tools_CreateReqHistoryItem

def Tools_SetSubscribeItem(item, index, value):
    return libtgw_python36.Tools_SetSubscribeItem(item, index, value)
Tools_SetSubscribeItem = libtgw_python36.Tools_SetSubscribeItem

def Tools_SetSubFactorItem(item, index, value):
    return libtgw_python36.Tools_SetSubFactorItem(item, index, value)
Tools_SetSubFactorItem = libtgw_python36.Tools_SetSubFactorItem

def Tools_SetSubCodeTableItem(item, index, value):
    return libtgw_python36.Tools_SetSubCodeTableItem(item, index, value)
Tools_SetSubCodeTableItem = libtgw_python36.Tools_SetSubCodeTableItem

def Tools_SetReqHistoryItem(item, index, value):
    return libtgw_python36.Tools_SetReqHistoryItem(item, index, value)
Tools_SetReqHistoryItem = libtgw_python36.Tools_SetReqHistoryItem

def Tools_CreateSubscribeDerivedDataItem(cnt):
    return libtgw_python36.Tools_CreateSubscribeDerivedDataItem(cnt)
Tools_CreateSubscribeDerivedDataItem = libtgw_python36.Tools_CreateSubscribeDerivedDataItem

def Tools_DestroySubscribeDerivedDataItem(item):
    return libtgw_python36.Tools_DestroySubscribeDerivedDataItem(item)
Tools_DestroySubscribeDerivedDataItem = libtgw_python36.Tools_DestroySubscribeDerivedDataItem

def Tools_SetSubscribeDerivedDataItem(item, index, value):
    return libtgw_python36.Tools_SetSubscribeDerivedDataItem(item, index, value)
Tools_SetSubscribeDerivedDataItem = libtgw_python36.Tools_SetSubscribeDerivedDataItem

def Tools_GetSubscribeDerivedDataItemByIndex(item, index):
    return libtgw_python36.Tools_GetSubscribeDerivedDataItemByIndex(item, index)
Tools_GetSubscribeDerivedDataItemByIndex = libtgw_python36.Tools_GetSubscribeDerivedDataItemByIndex

def Tools_DestroySubscribeItem(item):
    return libtgw_python36.Tools_DestroySubscribeItem(item)
Tools_DestroySubscribeItem = libtgw_python36.Tools_DestroySubscribeItem

def Tools_DestroySubFactorItem(item):
    return libtgw_python36.Tools_DestroySubFactorItem(item)
Tools_DestroySubFactorItem = libtgw_python36.Tools_DestroySubFactorItem

def Tools_DestroyCodeTableItem(item):
    return libtgw_python36.Tools_DestroyCodeTableItem(item)
Tools_DestroyCodeTableItem = libtgw_python36.Tools_DestroyCodeTableItem

def Tools_DestroyReqHistoryItem(item):
    return libtgw_python36.Tools_DestroyReqHistoryItem(item)
Tools_DestroyReqHistoryItem = libtgw_python36.Tools_DestroyReqHistoryItem

def Tools_GetSubscribeItemByIndex(item, index):
    return libtgw_python36.Tools_GetSubscribeItemByIndex(item, index)
Tools_GetSubscribeItemByIndex = libtgw_python36.Tools_GetSubscribeItemByIndex

def Tools_GetSubFactorItemByIndex(item, index):
    return libtgw_python36.Tools_GetSubFactorItemByIndex(item, index)
Tools_GetSubFactorItemByIndex = libtgw_python36.Tools_GetSubFactorItemByIndex

def Tools_GetSubCodeTableItemByIndex(item, index):
    return libtgw_python36.Tools_GetSubCodeTableItemByIndex(item, index)
Tools_GetSubCodeTableItemByIndex = libtgw_python36.Tools_GetSubCodeTableItemByIndex

def Tools_GetReqHistoryItemByIndex(item, index):
    return libtgw_python36.Tools_GetReqHistoryItemByIndex(item, index)
Tools_GetReqHistoryItemByIndex = libtgw_python36.Tools_GetReqHistoryItemByIndex

def Tools_GetInt64DataByIndex(array_data, index):
    return libtgw_python36.Tools_GetInt64DataByIndex(array_data, index)
Tools_GetInt64DataByIndex = libtgw_python36.Tools_GetInt64DataByIndex

def Tools_GetDataSize(*args):
    return libtgw_python36.Tools_GetDataSize(*args)
Tools_GetDataSize = libtgw_python36.Tools_GetDataSize

def Tools_GetDataByIndex(*args):
    return libtgw_python36.Tools_GetDataByIndex(*args)
Tools_GetDataByIndex = libtgw_python36.Tools_GetDataByIndex

def Tools_GetMDHKExListItemByIndex(array_data, index):
    return libtgw_python36.Tools_GetMDHKExListItemByIndex(array_data, index)
Tools_GetMDHKExListItemByIndex = libtgw_python36.Tools_GetMDHKExListItemByIndex

def Tools_GetMDHKExDetailItemByIndex(array_data, index):
    return libtgw_python36.Tools_GetMDHKExDetailItemByIndex(array_data, index)
Tools_GetMDHKExDetailItemByIndex = libtgw_python36.Tools_GetMDHKExDetailItemByIndex

def Tools_Serialize(*args):
    return libtgw_python36.Tools_Serialize(*args)
Tools_Serialize = libtgw_python36.Tools_Serialize

def Tools_ShowFactorInfo(vec):
    return libtgw_python36.Tools_ShowFactorInfo(vec)
Tools_ShowFactorInfo = libtgw_python36.Tools_ShowFactorInfo

def Tools_Init(path):
    return libtgw_python36.Tools_Init(path)
Tools_Init = libtgw_python36.Tools_Init

def Tools_WriteTitle():
    return libtgw_python36.Tools_WriteTitle()
Tools_WriteTitle = libtgw_python36.Tools_WriteTitle

def Tools_WriteStockSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteStockSnapshot(data, cnt)
Tools_WriteStockSnapshot = libtgw_python36.Tools_WriteStockSnapshot

def Tools_WriteIndexSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteIndexSnapshot(data, cnt)
Tools_WriteIndexSnapshot = libtgw_python36.Tools_WriteIndexSnapshot

def Tools_WriteOptionSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteOptionSnapshot(data, cnt)
Tools_WriteOptionSnapshot = libtgw_python36.Tools_WriteOptionSnapshot

def Tools_WriteHKTSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteHKTSnapshot(data, cnt)
Tools_WriteHKTSnapshot = libtgw_python36.Tools_WriteHKTSnapshot

def Tools_WriteAfterHourFixPriceSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteAfterHourFixPriceSnapshot(data, cnt)
Tools_WriteAfterHourFixPriceSnapshot = libtgw_python36.Tools_WriteAfterHourFixPriceSnapshot

def Tools_WriteCSIIndexSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteCSIIndexSnapshot(data, cnt)
Tools_WriteCSIIndexSnapshot = libtgw_python36.Tools_WriteCSIIndexSnapshot

def Tools_WriteCnIndexSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteCnIndexSnapshot(data, cnt)
Tools_WriteCnIndexSnapshot = libtgw_python36.Tools_WriteCnIndexSnapshot

def Tools_WriteHKTRealLimit(data, cnt):
    return libtgw_python36.Tools_WriteHKTRealLimit(data, cnt)
Tools_WriteHKTRealLimit = libtgw_python36.Tools_WriteHKTRealLimit

def Tools_WriteHKTProduStatus(data, cnt):
    return libtgw_python36.Tools_WriteHKTProduStatus(data, cnt)
Tools_WriteHKTProduStatus = libtgw_python36.Tools_WriteHKTProduStatus

def Tools_WriteHKTVCM(data, cnt):
    return libtgw_python36.Tools_WriteHKTVCM(data, cnt)
Tools_WriteHKTVCM = libtgw_python36.Tools_WriteHKTVCM

def Tools_WriteFutureSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteFutureSnapshot(data, cnt)
Tools_WriteFutureSnapshot = libtgw_python36.Tools_WriteFutureSnapshot

def Tools_WriteKline(data, cnt, kline_type):
    return libtgw_python36.Tools_WriteKline(data, cnt, kline_type)
Tools_WriteKline = libtgw_python36.Tools_WriteKline

def Tools_WriteSnapshotDerive(data, cnt):
    return libtgw_python36.Tools_WriteSnapshotDerive(data, cnt)
Tools_WriteSnapshotDerive = libtgw_python36.Tools_WriteSnapshotDerive

def Tools_WriteFactor(data):
    return libtgw_python36.Tools_WriteFactor(data)
Tools_WriteFactor = libtgw_python36.Tools_WriteFactor

def Tools_Release():
    return libtgw_python36.Tools_Release()
Tools_Release = libtgw_python36.Tools_Release

def Tools_WriteQueryTickOrder(data, cnt):
    return libtgw_python36.Tools_WriteQueryTickOrder(data, cnt)
Tools_WriteQueryTickOrder = libtgw_python36.Tools_WriteQueryTickOrder

def Tools_WriteQueryTickExecution(data, cnt):
    return libtgw_python36.Tools_WriteQueryTickExecution(data, cnt)
Tools_WriteQueryTickExecution = libtgw_python36.Tools_WriteQueryTickExecution

def Tools_WriteQueryOrderQueue(data, cnt):
    return libtgw_python36.Tools_WriteQueryOrderQueue(data, cnt)
Tools_WriteQueryOrderQueue = libtgw_python36.Tools_WriteQueryOrderQueue

def Tools_WriteQueryCodeTable(data, cnt):
    return libtgw_python36.Tools_WriteQueryCodeTable(data, cnt)
Tools_WriteQueryCodeTable = libtgw_python36.Tools_WriteQueryCodeTable

def Tools_WriteQuerySecurInfo(data, cnt):
    return libtgw_python36.Tools_WriteQuerySecurInfo(data, cnt)
Tools_WriteQuerySecurInfo = libtgw_python36.Tools_WriteQuerySecurInfo

def Tools_WriteQueryETFInfo(data, cnt):
    return libtgw_python36.Tools_WriteQueryETFInfo(data, cnt)
Tools_WriteQueryETFInfo = libtgw_python36.Tools_WriteQueryETFInfo

def Tools_WriteQueryExFactor(data, cnt):
    return libtgw_python36.Tools_WriteQueryExFactor(data, cnt)
Tools_WriteQueryExFactor = libtgw_python36.Tools_WriteQueryExFactor

def Tools_WriteQueryThirdInfo(data, cnt):
    return libtgw_python36.Tools_WriteQueryThirdInfo(data, cnt)
Tools_WriteQueryThirdInfo = libtgw_python36.Tools_WriteQueryThirdInfo

def Tools_WriteQueryStockSnapshot(*args):
    return libtgw_python36.Tools_WriteQueryStockSnapshot(*args)
Tools_WriteQueryStockSnapshot = libtgw_python36.Tools_WriteQueryStockSnapshot

def Tools_WriteQueryIndexSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteQueryIndexSnapshot(data, cnt)
Tools_WriteQueryIndexSnapshot = libtgw_python36.Tools_WriteQueryIndexSnapshot

def Tools_WriteQueryOptionSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteQueryOptionSnapshot(data, cnt)
Tools_WriteQueryOptionSnapshot = libtgw_python36.Tools_WriteQueryOptionSnapshot

def Tools_WriteQueryOrderSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteQueryOrderSnapshot(data, cnt)
Tools_WriteQueryOrderSnapshot = libtgw_python36.Tools_WriteQueryOrderSnapshot

def Tools_WriteQueryOrderBrokerSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteQueryOrderBrokerSnapshot(data, cnt)
Tools_WriteQueryOrderBrokerSnapshot = libtgw_python36.Tools_WriteQueryOrderBrokerSnapshot

def Tools_WriteQueryHKTSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteQueryHKTSnapshot(data, cnt)
Tools_WriteQueryHKTSnapshot = libtgw_python36.Tools_WriteQueryHKTSnapshot

def Tools_WriteQueryFutureSnapshot(data, cnt):
    return libtgw_python36.Tools_WriteQueryFutureSnapshot(data, cnt)
Tools_WriteQueryFutureSnapshot = libtgw_python36.Tools_WriteQueryFutureSnapshot

def Tools_WriteQueryKline(data, cnt, kline_type):
    return libtgw_python36.Tools_WriteQueryKline(data, cnt, kline_type)
Tools_WriteQueryKline = libtgw_python36.Tools_WriteQueryKline

def Tools_WriteQueryFactor(factors, cnt):
    return libtgw_python36.Tools_WriteQueryFactor(factors, cnt)
Tools_WriteQueryFactor = libtgw_python36.Tools_WriteQueryFactor

def Tools_WriteReplayTickExecution(data, cnt):
    return libtgw_python36.Tools_WriteReplayTickExecution(data, cnt)
Tools_WriteReplayTickExecution = libtgw_python36.Tools_WriteReplayTickExecution

def Tools_WriteReplaySnapshot(data, cnt):
    return libtgw_python36.Tools_WriteReplaySnapshot(data, cnt)
Tools_WriteReplaySnapshot = libtgw_python36.Tools_WriteReplaySnapshot

def Tools_WriteReplayKline(data, cnt, kline_type):
    return libtgw_python36.Tools_WriteReplayKline(data, cnt, kline_type)
Tools_WriteReplayKline = libtgw_python36.Tools_WriteReplayKline

def Tools_FreeMemory(*args):
    return libtgw_python36.Tools_FreeMemory(*args)
Tools_FreeMemory = libtgw_python36.Tools_FreeMemory

def Tools_KLineToJson(data, cnt):
    return libtgw_python36.Tools_KLineToJson(data, cnt)
Tools_KLineToJson = libtgw_python36.Tools_KLineToJson

def Tools_SnapshotDeriveToJson(data, cnt):
    return libtgw_python36.Tools_SnapshotDeriveToJson(data, cnt)
Tools_SnapshotDeriveToJson = libtgw_python36.Tools_SnapshotDeriveToJson

def Tools_SnapshotL1ToJson(data, cnt):
    return libtgw_python36.Tools_SnapshotL1ToJson(data, cnt)
Tools_SnapshotL1ToJson = libtgw_python36.Tools_SnapshotL1ToJson

def Tools_IndexSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_IndexSnapshotToJson(data, cnt)
Tools_IndexSnapshotToJson = libtgw_python36.Tools_IndexSnapshotToJson

def Tools_OptionSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_OptionSnapshotToJson(data, cnt)
Tools_OptionSnapshotToJson = libtgw_python36.Tools_OptionSnapshotToJson

def Tools_HKTSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_HKTSnapshotToJson(data, cnt)
Tools_HKTSnapshotToJson = libtgw_python36.Tools_HKTSnapshotToJson

def Tools_FutureSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_FutureSnapshotToJson(data, cnt)
Tools_FutureSnapshotToJson = libtgw_python36.Tools_FutureSnapshotToJson

def Tools_OrderSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_OrderSnapshotToJson(data, cnt)
Tools_OrderSnapshotToJson = libtgw_python36.Tools_OrderSnapshotToJson

def Tools_OrderBrokerSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_OrderBrokerSnapshotToJson(data, cnt)
Tools_OrderBrokerSnapshotToJson = libtgw_python36.Tools_OrderBrokerSnapshotToJson

def Tools_AfterHourFixedPriceSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_AfterHourFixedPriceSnapshotToJson(data, cnt)
Tools_AfterHourFixedPriceSnapshotToJson = libtgw_python36.Tools_AfterHourFixedPriceSnapshotToJson

def Tools_CSIIndexSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_CSIIndexSnapshotToJson(data, cnt)
Tools_CSIIndexSnapshotToJson = libtgw_python36.Tools_CSIIndexSnapshotToJson

def Tools_CnIndexSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_CnIndexSnapshotToJson(data, cnt)
Tools_CnIndexSnapshotToJson = libtgw_python36.Tools_CnIndexSnapshotToJson

def Tools_HKTRealtimeLimitToJson(data, cnt):
    return libtgw_python36.Tools_HKTRealtimeLimitToJson(data, cnt)
Tools_HKTRealtimeLimitToJson = libtgw_python36.Tools_HKTRealtimeLimitToJson

def Tools_HKTProductStatusToJson(data, cnt):
    return libtgw_python36.Tools_HKTProductStatusToJson(data, cnt)
Tools_HKTProductStatusToJson = libtgw_python36.Tools_HKTProductStatusToJson

def Tools_HKTVCMToJson(data, cnt):
    return libtgw_python36.Tools_HKTVCMToJson(data, cnt)
Tools_HKTVCMToJson = libtgw_python36.Tools_HKTVCMToJson

def Tools_SnapshotL2ToJson(data, cnt):
    return libtgw_python36.Tools_SnapshotL2ToJson(data, cnt)
Tools_SnapshotL2ToJson = libtgw_python36.Tools_SnapshotL2ToJson

def Tools_TickExecutionToJson(data, cnt):
    return libtgw_python36.Tools_TickExecutionToJson(data, cnt)
Tools_TickExecutionToJson = libtgw_python36.Tools_TickExecutionToJson

def Tools_TickOrderToJson(data, cnt):
    return libtgw_python36.Tools_TickOrderToJson(data, cnt)
Tools_TickOrderToJson = libtgw_python36.Tools_TickOrderToJson

def Tools_OrderQueueToJson(data, cnt):
    return libtgw_python36.Tools_OrderQueueToJson(data, cnt)
Tools_OrderQueueToJson = libtgw_python36.Tools_OrderQueueToJson

def Tools_CodeTableToJson(data, cnt):
    return libtgw_python36.Tools_CodeTableToJson(data, cnt)
Tools_CodeTableToJson = libtgw_python36.Tools_CodeTableToJson

def Tools_ExFactorTableToJson(data, cnt):
    return libtgw_python36.Tools_ExFactorTableToJson(data, cnt)
Tools_ExFactorTableToJson = libtgw_python36.Tools_ExFactorTableToJson

def Tools_StockInfoToJson(data, cnt):
    return libtgw_python36.Tools_StockInfoToJson(data, cnt)
Tools_StockInfoToJson = libtgw_python36.Tools_StockInfoToJson

def Tools_CodeTableRecordToJson(data, cnt):
    return libtgw_python36.Tools_CodeTableRecordToJson(data, cnt)
Tools_CodeTableRecordToJson = libtgw_python36.Tools_CodeTableRecordToJson

def Tools_OrderBookSnapshotToJson(data, cnt):
    return libtgw_python36.Tools_OrderBookSnapshotToJson(data, cnt)
Tools_OrderBookSnapshotToJson = libtgw_python36.Tools_OrderBookSnapshotToJson

def Tools_FactorToJson(*args):
    return libtgw_python36.Tools_FactorToJson(*args)
Tools_FactorToJson = libtgw_python36.Tools_FactorToJson

def Tools_ThirdInfoToJson(data, cnt):
    return libtgw_python36.Tools_ThirdInfoToJson(data, cnt)
Tools_ThirdInfoToJson = libtgw_python36.Tools_ThirdInfoToJson

def Tools_OrderBookToJson(order_books):
    return libtgw_python36.Tools_OrderBookToJson(order_books)
Tools_OrderBookToJson = libtgw_python36.Tools_OrderBookToJson

def Tools_ETFInfoToJson(etf_info, cnt):
    return libtgw_python36.Tools_ETFInfoToJson(etf_info, cnt)
Tools_ETFInfoToJson = libtgw_python36.Tools_ETFInfoToJson

class IGMDHistorySpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDHistorySpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDHistorySpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDHistorySpi
    __del__ = lambda self: None

    def OnMDSnapshot(self, task_id, snapshots, cnt):
        return libtgw_python36.IGMDHistorySpi_OnMDSnapshot(self, task_id, snapshots, cnt)

    def OnMDIndexSnapshot(self, task_id, index_snapshots, cnt):
        return libtgw_python36.IGMDHistorySpi_OnMDIndexSnapshot(self, task_id, index_snapshots, cnt)

    def OnMDHKTSnapshot(self, task_id, hkt_snapshots, cnt):
        return libtgw_python36.IGMDHistorySpi_OnMDHKTSnapshot(self, task_id, hkt_snapshots, cnt)

    def OnMDOptionSnapshot(self, task_id, opt_snapshots, cnt):
        return libtgw_python36.IGMDHistorySpi_OnMDOptionSnapshot(self, task_id, opt_snapshots, cnt)

    def OnMDTickExecution(self, task_id, ticks, cnt):
        return libtgw_python36.IGMDHistorySpi_OnMDTickExecution(self, task_id, ticks, cnt)

    def OnMDKline(self, task_id, klines, cnt, kline_type):
        return libtgw_python36.IGMDHistorySpi_OnMDKline(self, task_id, klines, cnt, kline_type)

    def OnRspTaskStatus(self, task_id, task_status):
        return libtgw_python36.IGMDHistorySpi_OnRspTaskStatus(self, task_id, task_status)

    def __init__(self):
        if self.__class__ == IGMDHistorySpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDHistorySpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDHistorySpi(self)
        return weakref_proxy(self)
IGMDHistorySpi_swigregister = libtgw_python36.IGMDHistorySpi_swigregister
IGMDHistorySpi_swigregister(IGMDHistorySpi)

class IGMDSnapshotSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDSnapshotSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDSnapshotSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDSnapshotSpi
    __del__ = lambda self: None

    def OnMDSnapshotL2(self, snapshots, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDSnapshotL2(self, snapshots, cnt)

    def OnMDSnapshotL1(self, snapshots, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDSnapshotL1(self, snapshots, cnt)

    def OnMDIndexSnapshot(self, index_snapshots, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDIndexSnapshot(self, index_snapshots, cnt)

    def OnMDHKTSnapshot(self, hkt_snapshots, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDHKTSnapshot(self, hkt_snapshots, cnt)

    def OnMDOptionSnapshot(self, opt_snapshots, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDOptionSnapshot(self, opt_snapshots, cnt)

    def OnMDFutureSnapshot(self, future_snapshots, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDFutureSnapshot(self, future_snapshots, cnt)

    def OnMDHKExOrderSnapshot(self, hke_order_snapshot, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDHKExOrderSnapshot(self, hke_order_snapshot, cnt)

    def OnMDHKExOrderBrokerSnapshot(self, hke_order_broker_snapshot, cnt):
        return libtgw_python36.IGMDSnapshotSpi_OnMDHKExOrderBrokerSnapshot(self, hke_order_broker_snapshot, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDSnapshotSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDSnapshotSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDSnapshotSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDSnapshotSpi(self)
        return weakref_proxy(self)
IGMDSnapshotSpi_swigregister = libtgw_python36.IGMDSnapshotSpi_swigregister
IGMDSnapshotSpi_swigregister(IGMDSnapshotSpi)

class IGMDTickOrderSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDTickOrderSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDTickOrderSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDTickOrderSpi
    __del__ = lambda self: None

    def OnMDTickOrder(self, tick_orders, cnt):
        return libtgw_python36.IGMDTickOrderSpi_OnMDTickOrder(self, tick_orders, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDTickOrderSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDTickOrderSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDTickOrderSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDTickOrderSpi(self)
        return weakref_proxy(self)
IGMDTickOrderSpi_swigregister = libtgw_python36.IGMDTickOrderSpi_swigregister
IGMDTickOrderSpi_swigregister(IGMDTickOrderSpi)

class IGMDTickExecutionSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDTickExecutionSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDTickExecutionSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDTickExecutionSpi
    __del__ = lambda self: None

    def OnMDTickExecution(self, tick_execs, cnt):
        return libtgw_python36.IGMDTickExecutionSpi_OnMDTickExecution(self, tick_execs, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDTickExecutionSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDTickExecutionSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDTickExecutionSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDTickExecutionSpi(self)
        return weakref_proxy(self)
IGMDTickExecutionSpi_swigregister = libtgw_python36.IGMDTickExecutionSpi_swigregister
IGMDTickExecutionSpi_swigregister(IGMDTickExecutionSpi)

class IGMDOrderQueueSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDOrderQueueSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDOrderQueueSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDOrderQueueSpi
    __del__ = lambda self: None

    def OnMDOrderQueue(self, order_queues, cnt):
        return libtgw_python36.IGMDOrderQueueSpi_OnMDOrderQueue(self, order_queues, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDOrderQueueSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDOrderQueueSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDOrderQueueSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDOrderQueueSpi(self)
        return weakref_proxy(self)
IGMDOrderQueueSpi_swigregister = libtgw_python36.IGMDOrderQueueSpi_swigregister
IGMDOrderQueueSpi_swigregister(IGMDOrderQueueSpi)

class IGMDKlineSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDKlineSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDKlineSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDKlineSpi
    __del__ = lambda self: None

    def OnMDKLine(self, klines, cnt, kline_type):
        return libtgw_python36.IGMDKlineSpi_OnMDKLine(self, klines, cnt, kline_type)

    def OnStatus(self, status):
        return libtgw_python36.IGMDKlineSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDKlineSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDKlineSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDKlineSpi(self)
        return weakref_proxy(self)
IGMDKlineSpi_swigregister = libtgw_python36.IGMDKlineSpi_swigregister
IGMDKlineSpi_swigregister(IGMDKlineSpi)

class IGMDCodeTableSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDCodeTableSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDCodeTableSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDCodeTableSpi
    __del__ = lambda self: None

    def OnMDCodeTable(self, code_tables, cnt):
        return libtgw_python36.IGMDCodeTableSpi_OnMDCodeTable(self, code_tables, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDCodeTableSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDCodeTableSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDCodeTableSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDCodeTableSpi(self)
        return weakref_proxy(self)
IGMDCodeTableSpi_swigregister = libtgw_python36.IGMDCodeTableSpi_swigregister
IGMDCodeTableSpi_swigregister(IGMDCodeTableSpi)

class IGMDSecuritiesInfoSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDSecuritiesInfoSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDSecuritiesInfoSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDSecuritiesInfoSpi
    __del__ = lambda self: None

    def OnMDSecuritiesInfo(self, code_tables, cnt):
        return libtgw_python36.IGMDSecuritiesInfoSpi_OnMDSecuritiesInfo(self, code_tables, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDSecuritiesInfoSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDSecuritiesInfoSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDSecuritiesInfoSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDSecuritiesInfoSpi(self)
        return weakref_proxy(self)
IGMDSecuritiesInfoSpi_swigregister = libtgw_python36.IGMDSecuritiesInfoSpi_swigregister
IGMDSecuritiesInfoSpi_swigregister(IGMDSecuritiesInfoSpi)

class IGMDETFInfoSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDETFInfoSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDETFInfoSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDETFInfoSpi
    __del__ = lambda self: None

    def OnMDETFInfo(self, etf_info, cnt):
        return libtgw_python36.IGMDETFInfoSpi_OnMDETFInfo(self, etf_info, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDETFInfoSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDETFInfoSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDETFInfoSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDETFInfoSpi(self)
        return weakref_proxy(self)
IGMDETFInfoSpi_swigregister = libtgw_python36.IGMDETFInfoSpi_swigregister
IGMDETFInfoSpi_swigregister(IGMDETFInfoSpi)

class IGMDExFactorSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDExFactorSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDExFactorSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDExFactorSpi
    __del__ = lambda self: None

    def OnMDExFactor(self, ex_factor_tables, cnt):
        return libtgw_python36.IGMDExFactorSpi_OnMDExFactor(self, ex_factor_tables, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDExFactorSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDExFactorSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDExFactorSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDExFactorSpi(self)
        return weakref_proxy(self)
IGMDExFactorSpi_swigregister = libtgw_python36.IGMDExFactorSpi_swigregister
IGMDExFactorSpi_swigregister(IGMDExFactorSpi)

class IGMDFactorSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDFactorSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDFactorSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDFactorSpi
    __del__ = lambda self: None

    def OnFactor(self, factors, cnt):
        return libtgw_python36.IGMDFactorSpi_OnFactor(self, factors, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDFactorSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDFactorSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDFactorSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDFactorSpi(self)
        return weakref_proxy(self)
IGMDFactorSpi_swigregister = libtgw_python36.IGMDFactorSpi_swigregister
IGMDFactorSpi_swigregister(IGMDFactorSpi)

class IGMDThirdInfoSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDThirdInfoSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDThirdInfoSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python36.delete_IGMDThirdInfoSpi
    __del__ = lambda self: None

    def OnThirdInfo(self, data, cnt):
        return libtgw_python36.IGMDThirdInfoSpi_OnThirdInfo(self, data, cnt)

    def OnStatus(self, status):
        return libtgw_python36.IGMDThirdInfoSpi_OnStatus(self, status)

    def __init__(self):
        if self.__class__ == IGMDThirdInfoSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python36.new_IGMDThirdInfoSpi(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python36.disown_IGMDThirdInfoSpi(self)
        return weakref_proxy(self)
IGMDThirdInfoSpi_swigregister = libtgw_python36.IGMDThirdInfoSpi_swigregister
IGMDThirdInfoSpi_swigregister(IGMDThirdInfoSpi)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return libtgw_python36.Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return libtgw_python36.Vector___nonzero__(self)

    def __bool__(self):
        return libtgw_python36.Vector___bool__(self)

    def __len__(self):
        return libtgw_python36.Vector___len__(self)

    def __getslice__(self, i, j):
        return libtgw_python36.Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return libtgw_python36.Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return libtgw_python36.Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return libtgw_python36.Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return libtgw_python36.Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return libtgw_python36.Vector___setitem__(self, *args)

    def pop(self):
        return libtgw_python36.Vector_pop(self)

    def append(self, x):
        return libtgw_python36.Vector_append(self, x)

    def empty(self):
        return libtgw_python36.Vector_empty(self)

    def size(self):
        return libtgw_python36.Vector_size(self)

    def swap(self, v):
        return libtgw_python36.Vector_swap(self, v)

    def begin(self):
        return libtgw_python36.Vector_begin(self)

    def end(self):
        return libtgw_python36.Vector_end(self)

    def rbegin(self):
        return libtgw_python36.Vector_rbegin(self)

    def rend(self):
        return libtgw_python36.Vector_rend(self)

    def clear(self):
        return libtgw_python36.Vector_clear(self)

    def get_allocator(self):
        return libtgw_python36.Vector_get_allocator(self)

    def pop_back(self):
        return libtgw_python36.Vector_pop_back(self)

    def erase(self, *args):
        return libtgw_python36.Vector_erase(self, *args)

    def __init__(self, *args):
        this = libtgw_python36.new_Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return libtgw_python36.Vector_push_back(self, x)

    def front(self):
        return libtgw_python36.Vector_front(self)

    def back(self):
        return libtgw_python36.Vector_back(self)

    def assign(self, n, x):
        return libtgw_python36.Vector_assign(self, n, x)

    def resize(self, *args):
        return libtgw_python36.Vector_resize(self, *args)

    def insert(self, *args):
        return libtgw_python36.Vector_insert(self, *args)

    def reserve(self, n):
        return libtgw_python36.Vector_reserve(self, n)

    def capacity(self):
        return libtgw_python36.Vector_capacity(self)
    __swig_destroy__ = libtgw_python36.delete_Vector
    __del__ = lambda self: None
Vector_swigregister = libtgw_python36.Vector_swigregister
Vector_swigregister(Vector)

# This file is compatible with both classic and new-style classes.


