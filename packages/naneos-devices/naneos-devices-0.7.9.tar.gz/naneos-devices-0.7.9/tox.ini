; ; Sonar Qube Verision 
; [tox]
; envlist = py39
; skipsdist = True

; [testenv]
; deps =
;     pytest
;     pytest-cov
;     pytest-dotenv
; commands =
;     ; python -m pytest -m unit
;     coverage run -m pytest
; commands_pre =
;     coverage erase
; commands_post =
;     coverage combine --append
;     coverage report
;     coverage xml

; [coverage:run]
; relative_files = True
; ; source = naneos
; ; source_pkgs = naneos
; branch = True

; [coverage:paths]
; source = 
;     /Users/huegi/Code/naneos/python/python-naneos-devices/.tox/py39/lib/python3.9/site-packages/
;     /naneos

; [tox]
; envlist = clean,py310

; [testenv]
; deps =
;     pytest
;     pytest-cov
;     pytest-dotenv
; commands = pytest --cov --cov-append --cov-report=term-missing --cov-report=xml --cov-config=tox.ini --cov-branch

; [testenv:cleancoverage]
; deps = coverage
; skip_install = true
; commands = coverage erase


; [testenv]
; deps =
;     pytest
;     pytest-cov
;     pytest-dotenv
; commands =
;     coverage run -m pytest
;     coverage xml

; [coverage:run]
; relative_files = True
; source = src/naneos/
; branch = True


; [testenv]
; deps =
;     pytest
;     pytest-cov
;     pytest-dotenv
; commands =
;     pytest --cov=src/ --cov-report=xml:.coverage-reports/coverage.xml  --cov-config=tox.ini --cov-branch
;     ; coverage run -m pytest 
;     ; coverage xml -o .coverage-reports/coverage.xml

; # coveragrrc
; [coverage:run]
; branch = True
; omit = *migrations*, *tests*
; relative_files = True


[tox]
minversion >= 4
; envlist = py3{8,9,10,11,12}
envlist = py3{11}
; isolated_build = True

[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
extras =
    testing
deps =
    pytest
    ; pytest-cov
    pytest-dotenv
commands =
    pytest {posargs}
;     coverage run -m pytest {posargs}
; commands_pre =
;     coverage erase
; commands_post =
;     coverage combine --append
;     coverage report
;     coverage xml

; [coverage:run]
; relative_files = True
; source = my_project/
; branch = True


# # To run `tox -e lint` you need to make sure you have a
# # `.pre-commit-config.yaml` file. See https://pre-commit.com
# [testenv:lint]
# description = Perform static analysis and style checks
# skip_install = True
# deps = pre-commit
# passenv =
#     HOMEPATH
#     PROGRAMDATA
# commands =
#     pre-commit run --all-files {posargs:--show-diff-on-failure}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
