# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .fine_tuning_response_model_finetuning_state import FineTuningResponseModelFinetuningState
from .manual_verification_response_model import ManualVerificationResponseModel
from .verification_attempt_response_model import VerificationAttemptResponseModel

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FineTuningResponseModel(pydantic.BaseModel):
    language: str
    is_allowed_to_fine_tune: bool
    fine_tuning_requested: bool
    finetuning_state: FineTuningResponseModelFinetuningState
    verification_attempts: typing.List[VerificationAttemptResponseModel]
    verification_failures: typing.List[str]
    verification_attempts_count: int
    slice_ids: typing.List[str]
    manual_verification: ManualVerificationResponseModel
    manual_verification_requested: bool

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
