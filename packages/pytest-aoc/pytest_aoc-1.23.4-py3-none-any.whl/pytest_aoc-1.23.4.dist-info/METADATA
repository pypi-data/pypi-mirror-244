Metadata-Version: 2.1
Name: pytest-aoc
Version: 1.23.4
Summary: Downloads puzzle inputs for Advent of Code and synthesizes PyTest fixtures
Author-email: Joost Molenaar <jjm@j0057.nl>
License: MIT
Project-URL: Homepage, https://gitlab.com/j0057-git/puzzle/pytest-aoc
Project-URL: Source, https://gitlab.com/j0057-git/puzzle/pytest-aoc
Project-URL: Tracker, https://gitlab.com/j0057-git/puzzle/pytest-aoc/-/issues
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: Pytest
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: beautifulsoup4[html5lib]
Provides-Extra: dev
Requires-Dist: pip ; extra == 'dev'
Requires-Dist: setuptools ; extra == 'dev'
Requires-Dist: setuptools-scm ; extra == 'dev'
Requires-Dist: build ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: twine ; extra == 'dev'
Requires-Dist: tox ; extra == 'dev'
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: pytest-responses ; extra == 'test'
Requires-Dist: pytest-mock ; extra == 'test'
Requires-Dist: time-machine ; extra == 'test'

# pytest-aoc

This pytest plugin downloads puzzle inputs for [Advent of Code][] and
synthesizes fixtures that you can use in your tests.

[![PyPI](https://img.shields.io/pypi/v/pytest-aoc)][pypi]
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytest-aoc)][pypi]
[![PyPI - Implementation](https://img.shields.io/pypi/implementation/pytest-aoc)][pypi]
[![GitLab issues by-label](https://img.shields.io/gitlab/issues/open/j0057-git%2Fpuzzle%2Fpytest-aoc)][issues]
[![Static Badge](https://img.shields.io/badge/%40-report_issue_via_email-blue)][issue-email]
[![PyPI - License](https://img.shields.io/pypi/l/pytest-aoc)][license]

[Advent of Code]: https://adventofcode.com/

[pypi]: https://pypi.org/project/pytest-aoc
[issues]: https://gitlab.com/j0057-git/puzzle/pytest-aoc/-/issues
[issue-email]: mailto:contact-project+j0057-git-puzzle-pytest-aoc-50462969-issue-@incoming.gitlab.com
[license]: ./LICENSE

## Does this DDoS the adventofcode.com website?

This plugin tries pretty hard to not hit the adventofcode.com website unless
absolutely necessary. When the test session starts, the puzzle inputs that
should be available are calculated based on the system clock. For every input
that should be available (after 05:00:00 GMT), if no corresponding text file is
found on disk, it gets downloaded and saved, if the HTTP status code is 200 OK.

The personal downloaded puzzle inputs should be committed to source control, so
that pytest doesn't need to hit the adventofcode.com API to run the tests in
another environment.

New in version 1.22.0: the code also sleeps (2.5 seconds by default) after
hitting the server. This can be disabled if you have leaderboard aspirations,
but really, do you have time to be practising TDD in that case?

## Installing and configuring

Installing is easy: `python -m pip install pytest-aoc`. Next you will need to configure
_two_ things: for which event (year) the plugin should download inputs, and a
valid session cookie. These are normally valid for about a month or so.

To set the year, put it in `setup.cfg`:

    [tool:pytest]
    aoc_year = 2018

Better yet, ditch `setup.cfg` and use `pyproject.toml`:

    [tool.pytest.ini_options]
    aoc_year = 2023

Then, put a valid session ID in a file named `.cookie` and also name this file
in your `.gitignore`.

With these two things in place, when running pytest, this plugin will download
any missing inputs, and generate pytest fixtures that you can use in your test
functions, see 'Using' and 'Fixtures', below.

## Using

With this plugin properly configured, you can write tests like this:

    def test_01a(day01_numbers):
        assert sum(day01_numbers) == 123

Here, the parameter `day01_numbers` is a fixture that contains the numbers on
each line in the file `input/day01.txt`.

## Fixtures

These fixtures are synthesized for each available day. They're not executed
until you ask for them in a test.

fixture             | example                                       | help
--------------------|-----------------------------------------------|---------------------------------------------------------------------------------
`dayNN_text`        | `"eggs"`                                      | The text in the input file, but stripped of any leading and trailing whitespace.
`dayNN_raw`         | `"eggs\n"`                                    | The raw text in the input file.
`dayNN_lines`       | `["spam", "eggs", "albatross"]`               | A list of stripped lines.
`dayNN_numbers`     | `[1, 1, 2, 3, 5, 8]`                          | A list of numbers.
`dayNN_number`      | `5`                                           | A single number.
`dayNN_grid`        | `[["spam", "eggs"], ["ham", "albatross"]]`    | A list of lists, representing a grid of textual values.
`dayNN_number_grid` | `[[8, 1, 6], [3, 5, 7], [4, 9, 2]]`           | A list of lists, representing a grid of numbers.

## Command-line and configuration options

You can pass the options from the command line or set them in setup.cfg. The
command line takes precedence.

command line flag       | config file option    | help
------------------------|-----------------------|------------------------------------------------------------------------------------------------------------------------------------
`--aoc-year`            | `aoc_year`            | The year for which to download puzzle inputs. (Mandatory)
`--aoc-session-id`      | -                     | The session ID to use for requesting puzzle inputs. This one has no equivalent setup.cfg key; that's a security feature. (Optional)
`--aoc-session-file`    | `aoc_session_file`    | The file from which to read the session ID. (Optional; default `.cookie`)
`--aoc-input-dir`       | `aoc_input_dir`       | The directory in which inputs are stored. Will be created if it doesn't exist. (Optional; default `input`)
`--aoc_sleep_time`      | `aoc_sleep_time`      | Time to sleep after downloading puzzle input, set to 0 to skip sleeping. (Optional; default `2.5`)

## Developing / testing

Set environment variables using `. .envrc` or by automatically loading them
using `direnv allow`.

Create a virtualenv named `env` and install an editable version of this package
with all extra development dependencies:

    python -m venv env
    python -m pip install -U -e .[dev,test]

Run tests directly, to test against the current Python, or via tox to test
against multiple Python versions:

    python -m pytest
    python -m tox run

## Releasing

The procedure goes like this:

- Set a git tag to let [setuptools-scm][] derive a version from it
- Use [build][] to package up the sdist and the wheel
- Upload sdist and wheel to Pypi using [twine][]
- Create a release on Gitlab using [gitlab-cli][]

### Tagging the release commit

(Optional) Tag the release version (or it will be a dev release on the next version as
derived by `setuptools-scm`) where `x.y.z` is the version:

    git tag -a x.y.z

...or even use bash history to refer to the third argument (`:3`) of the current command (`!#`):

    git tag -a x.y.z -m !#:3

But: prefer to write the release notes in here, so don't actually use `-m` for
non-rc releases.

Check that the version is actually sane:

    python -m setuptools_scm

### Build the package files

Bake an sdist and a wheel into a clean `dist` directory:

    rm -f dist/*
    python -m build

### Upload to PyPI

Upload the goods to PyPI:

    python -m twine upload dist/*

(I tried the `--sign` option once, got an email from PyPI saying GPG signatures
are unsupported on PyPI, and am now [reconsidering some very recent life
choices][pypi-removing-pgp]. Dammit, I went decades without needing a PGP key,
could I not have continued to do without?)

### Create release on Gitlab

Upload the goods to Gitlab, where again `x.y.z` is the version:

    git push gitlab main --tags
    glab release create x.y.z dist/*.{tar.gz,whl}

[setuptools-scm]: https://pypi.org/project/setuptools-scm/
[build]: https://pypi.org/project/build/
[twine]: https://pypi.org/project/twine/
[gitlab-cli]: https://gitlab.com/gitlab-org/cli
[pypi-removing-pgp]: https://blog.pypi.org/posts/2023-05-23-removing-pgp/
