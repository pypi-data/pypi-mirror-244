# coding: utf-8

"""
    Songtradr API

    This is the Songtradr API. Use it to retrieve deep music metadata and trigger processes like auto-tagging.  You can also use the API to manage your account and musicube cloud data.  **Authentication**  1. Reach out to support@songtradr.com to receive a free account or use your login data if you are already signed up.  2. To authenticate, you need to login via the POST /api/v1/user/login endpoint.  3. The endpoint responds with a jwtToken which you can use in all following API requests as a bearer token.  **Rate Limiting**  The current limit is 120 Requests per minute. Reach out to us via support@songtradr.com if you need to request more.  **Getting Started with auto-tagging**  1. If you want to get your own files auto-tagged, use the POST /api/v1/user/file/{name}/initUpload endpoint. It responds with a presigned S3 link where you can upload your file. 2. You can check the processing status of your file via the GET /api/v1/user/file/{name}/filesStatus endpoint. 3. As soon as processing is done, you can request the generated data via the GET /api/v1/user/files endpoint.  **Getting Started with search**  You can either search the released music via the /public/recording endpoints or your own private uploaded music via the /user/file/ endpoints.  1. If you want to search the world's released music, a good starting point is the GET /api/v1/public/recording/search endpoint. Please find the extensive list of parameters that serve as semantic search filters. 2. If you want to search your own previously uploaded music, a good starting point is the GET GET /api/v1/user/files endpoint. It has the same extensive list of parameters that serve as semantic search filters.

    The version of the OpenAPI document: 1.16.0
    Contact: info@songtradr.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from songtradr_api_client_python.models.face_detection import FaceDetection

class TestFaceDetection(unittest.TestCase):
    """FaceDetection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FaceDetection:
        """Test FaceDetection
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FaceDetection`
        """
        model = FaceDetection()
        if include_optional:
            return FaceDetection(
                timestamp = 56,
                face = songtradr_api_client_python.models.face_detail.FaceDetail(
                    bounding_box = songtradr_api_client_python.models.bounding_box.BoundingBox(
                        width = 1.337, 
                        height = 1.337, 
                        left = 1.337, 
                        top = 1.337, ), 
                    age_range = songtradr_api_client_python.models.age_range.AgeRange(
                        low = 56, 
                        high = 56, ), 
                    smile = songtradr_api_client_python.models.smile.Smile(
                        value = True, 
                        confidence = 1.337, ), 
                    eyeglasses = songtradr_api_client_python.models.eyeglasses.Eyeglasses(
                        value = True, 
                        confidence = 1.337, ), 
                    sunglasses = songtradr_api_client_python.models.sunglasses.Sunglasses(
                        value = True, 
                        confidence = 1.337, ), 
                    gender = songtradr_api_client_python.models.gender.Gender(
                        value = '', 
                        confidence = 1.337, ), 
                    beard = songtradr_api_client_python.models.beard.Beard(
                        value = True, 
                        confidence = 1.337, ), 
                    mustache = songtradr_api_client_python.models.mustache.Mustache(
                        value = True, 
                        confidence = 1.337, ), 
                    eyes_open = songtradr_api_client_python.models.eye_open.EyeOpen(
                        value = True, 
                        confidence = 1.337, ), 
                    mouth_open = songtradr_api_client_python.models.mouth_open.MouthOpen(
                        value = True, 
                        confidence = 1.337, ), 
                    emotions = [
                        songtradr_api_client_python.models.emotion.Emotion(
                            type = '', 
                            confidence = 1.337, )
                        ], 
                    landmarks = [
                        songtradr_api_client_python.models.landmark.Landmark(
                            type = '', 
                            x = 1.337, 
                            y = 1.337, )
                        ], 
                    pose = songtradr_api_client_python.models.pose.Pose(
                        roll = 1.337, 
                        yaw = 1.337, 
                        pitch = 1.337, ), 
                    quality = songtradr_api_client_python.models.image_quality.ImageQuality(
                        brightness = 1.337, 
                        sharpness = 1.337, ), 
                    confidence = 1.337, 
                    face_occluded = songtradr_api_client_python.models.face_occluded.FaceOccluded(
                        value = True, 
                        confidence = 1.337, ), 
                    eye_direction = songtradr_api_client_python.models.eye_direction.EyeDirection(
                        yaw = 1.337, 
                        pitch = 1.337, 
                        confidence = 1.337, ), )
            )
        else:
            return FaceDetection(
        )
        """

    def testFaceDetection(self):
        """Test FaceDetection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
