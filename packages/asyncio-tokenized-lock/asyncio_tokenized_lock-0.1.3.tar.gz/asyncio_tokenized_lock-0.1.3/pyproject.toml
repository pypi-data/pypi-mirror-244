[tool.poetry]
name = "asyncio-tokenized-lock"
version = "0.1.3"
description = "A Python library providing token-based locking for efficient coordination of asynchronous tasks in asyncio."
authors = ["Lucas Cicco <lucasciccomy@gmail.com>"]
maintainers = ["Lucas Cicco <lucasciccomy@gmail.com>"]
repository = "https://github.com/lucascicco/asyncio-tokenized-lock"
license = "MIT"
readme = "README.md"
keywords = ["asyncio", "lock", "token", "concurrency"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
pytest = "^7.1.2"
pytest-asyncio = "^0.21.0"
pytest-pythonpath = "^0.7.3"
pytest-watch = "^4.2.0"
pytest-mock = "^3.5.1"
ruff = "^0.1.3"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py39"
preview = true
select = [
  "A",
  "ASYNC100",
  "ASYNC101",
  "ASYNC102",
  "B",
  "BLE",
  "C4",
  "COM",
  "D",
  "D2",
  "D3",
  "D4",
  "DTZ",
  "E",
  "ERA",
  "EXE",
  "F",
  "FURB",
  "G",
  "I",
  "ICN001",
  "INP",
  "ISC",
  "N",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "D1",
  "D203",
  "D213",
  "D417",
  "E203",
  "PGH003",
  "PLR09",
  "SLF001",
  "TRY003",
  "PLR6301",
  "PLC0415",
  # ruff formatter recommends to disable those
  "COM812",
  "COM819",
  "D206",
  "E111",
  "E114",
  "E117",
  "E501",
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
]
unfixable = ["UP006"]
exclude = [
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".tox",
  ".venv",
  "__pycached__",
  "_build",
  "buck-out",
  "build",
  "dist",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["A003", "PLW0603", "PLR2004"]
"examples/*" = ["A003"]

[tool.ruff.isort]

[tool.ruff.format]

[tool.pyright]
pythonVersion = "3.9"
useLibraryCodeForTypes = true
exclude = [".venv", "dist", "docs"]
reportCallInDefaultInitializer = "warning"
reportMatchNotExhaustive = "warning"
reportMissingSuperCall = "warning"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUntypedNamedTuple = "error"
reportUnusedExpression = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
strictDictionaryInference = true
strictListInference = true
strictSetInference = true

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = "ignore:.*is deprecated.*:DeprecationWarning"
addopts = "--cov=./ --cov-report term-missing:skip-covered"
asyncio_mode = "auto"
