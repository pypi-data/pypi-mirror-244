"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.helios.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.helios.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.helios.model.alerts_list import AlertsList
from cohesity_sdk.helios.model.alerts_summary_response import AlertsSummaryResponse
from cohesity_sdk.helios.model.error import Error


class AlertApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_alert_summary(
            self,
            **kwargs
        ):
            """Get alerts summary.  # noqa: E501

            Get alerts summary grouped by category.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_alert_summary(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                start_time_usecs (int): Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.. [optional]
                end_time_usecs (int): Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.. [optional]
                include_tenants (bool, none_type): IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.. [optional]
                tenant_ids ([str], none_type): TenantIds contains ids of the tenants for which alerts are to be used to compute summary.. [optional]
                states_list ([str], none_type): Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlertsSummaryResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_alert_summary = _Endpoint(
            settings={
                'response_type': (AlertsSummaryResponse,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/alerts-summary',
                'operation_id': 'get_alert_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'access_cluster_id',
                    'region_id',
                    'start_time_usecs',
                    'end_time_usecs',
                    'include_tenants',
                    'tenant_ids',
                    'states_list',
                ],
                'required': [],
                'nullable': [
                    'include_tenants',
                    'tenant_ids',
                    'states_list',
                ],
                'enum': [
                    'states_list',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('states_list',): {
                        'None': None,
                        "KRESOLVED": "kResolved",
                        "KOPEN": "kOpen",
                        "KNOTE": "kNote",
                        "KSUPPRESSED": "kSuppressed"
                    },
                },
                'openapi_types': {
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'start_time_usecs':
                        (int,),
                    'end_time_usecs':
                        (int,),
                    'include_tenants':
                        (bool, none_type,),
                    'tenant_ids':
                        ([str], none_type,),
                    'states_list':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'start_time_usecs': 'startTimeUsecs',
                    'end_time_usecs': 'endTimeUsecs',
                    'include_tenants': 'includeTenants',
                    'tenant_ids': 'tenantIds',
                    'states_list': 'statesList',
                },
                'location_map': {
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'start_time_usecs': 'query',
                    'end_time_usecs': 'query',
                    'include_tenants': 'query',
                    'tenant_ids': 'query',
                    'states_list': 'query',
                },
                'collection_format_map': {
                    'tenant_ids': 'csv',
                    'states_list': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_alert_summary
        )

        def __get_helios_alerts(
            self,
            **kwargs
        ):
            """Get list of helios alerts.  # noqa: E501

            Get the list of helios alerts.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_helios_alerts(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                alert_id_list ([str]): Filter by list of alert ids.. [optional]
                alert_state_list ([str]): Filter by list of alert states.. [optional]
                alert_type_list ([int]): Filter by list of alert types.. [optional]
                alert_severity_list ([str]): Filter by list of alert severity types.. [optional]
                region_ids ([str]): Filter by list of region ids.. [optional]
                cluster_identifiers ([str]): Filter by list of cluster ids.. [optional]
                start_date_usecs (int): Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.. [optional]
                end_date_usecs (int): Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.. [optional]
                max_alerts (int): Specifies maximum number of alerts to return. [optional]
                alert_category_list ([str, none_type]): Filter by list of alert categories.. [optional]
                alert_type_bucket_list ([str, none_type]): Filter by list of alert type buckets.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlertsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_helios_alerts = _Endpoint(
            settings={
                'response_type': (AlertsList,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/alerts',
                'operation_id': 'get_helios_alerts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'alert_id_list',
                    'alert_state_list',
                    'alert_type_list',
                    'alert_severity_list',
                    'region_ids',
                    'cluster_identifiers',
                    'start_date_usecs',
                    'end_date_usecs',
                    'max_alerts',
                    'alert_category_list',
                    'alert_type_bucket_list',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'alert_severity_list',
                    'alert_category_list',
                    'alert_type_bucket_list',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('alert_severity_list',): {

                        "KCRITICAL": "kCritical",
                        "KWARNING": "kWarning",
                        "KINFO": "kInfo"
                    },
                    ('alert_category_list',): {

                        "KDISK": "kDisk",
                        "KNODE": "kNode",
                        "KCLUSTER": "kCluster",
                        "KCHASSIS": "kChassis",
                        "KPOWERSUPPLY": "kPowerSupply",
                        "KCPU": "kCPU",
                        "KMEMORY": "kMemory",
                        "KTEMPERATURE": "kTemperature",
                        "KFAN": "kFan",
                        "KNIC": "kNIC",
                        "KFIRMWARE": "kFirmware",
                        "KNODEHEALTH": "kNodeHealth",
                        "KOPERATINGSYSTEM": "kOperatingSystem",
                        "KDATAPATH": "kDataPath",
                        "KMETADATA": "kMetadata",
                        "KINDEXING": "kIndexing",
                        "KHELIOS": "kHelios",
                        "KAPPMARKETPLACE": "kAppMarketPlace",
                        "KSYSTEMSERVICE": "kSystemService",
                        "KLICENSE": "kLicense",
                        "KSECURITY": "kSecurity",
                        "KUPGRADE": "kUpgrade",
                        "KCLUSTERMANAGEMENT": "kClusterManagement",
                        "KAUDITLOG": "kAuditLog",
                        "KNETWORKING": "kNetworking",
                        "KCONFIGURATION": "kConfiguration",
                        "KSTORAGEUSAGE": "kStorageUsage",
                        "KFAULTTOLERANCE": "kFaultTolerance",
                        "KBACKUPRESTORE": "kBackupRestore",
                        "KARCHIVALRESTORE": "kArchivalRestore",
                        "KREMOTEREPLICATION": "kRemoteReplication",
                        "KQUOTA": "kQuota",
                        "KCDP": "kCDP",
                        "KVIEWFAILOVER": "kViewFailover",
                        "KDISASTERRECOVERY": "kDisasterRecovery"
                    },
                    ('alert_type_bucket_list',): {

                        "KHARDWARE": "kHardware",
                        "KSOFTWARE": "kSoftware",
                        "KDATASERVICE": "kDataService",
                        "KMAINTENANCE": "kMaintenance"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'alert_id_list':
                        ([str],),
                    'alert_state_list':
                        ([str],),
                    'alert_type_list':
                        ([int],),
                    'alert_severity_list':
                        ([str],),
                    'region_ids':
                        ([str],),
                    'cluster_identifiers':
                        ([str],),
                    'start_date_usecs':
                        (int,),
                    'end_date_usecs':
                        (int,),
                    'max_alerts':
                        (int,),
                    'alert_category_list':
                        ([str, none_type],),
                    'alert_type_bucket_list':
                        ([str, none_type],),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'alert_id_list': 'alertIdList',
                    'alert_state_list': 'alertStateList',
                    'alert_type_list': 'alertTypeList',
                    'alert_severity_list': 'alertSeverityList',
                    'region_ids': 'regionIds',
                    'cluster_identifiers': 'clusterIdentifiers',
                    'start_date_usecs': 'startDateUsecs',
                    'end_date_usecs': 'endDateUsecs',
                    'max_alerts': 'maxAlerts',
                    'alert_category_list': 'alertCategoryList',
                    'alert_type_bucket_list': 'alertTypeBucketList',
                },
                'location_map': {
                    'region_id': 'header',
                    'alert_id_list': 'query',
                    'alert_state_list': 'query',
                    'alert_type_list': 'query',
                    'alert_severity_list': 'query',
                    'region_ids': 'query',
                    'cluster_identifiers': 'query',
                    'start_date_usecs': 'query',
                    'end_date_usecs': 'query',
                    'max_alerts': 'query',
                    'alert_category_list': 'query',
                    'alert_type_bucket_list': 'query',
                },
                'collection_format_map': {
                    'alert_id_list': 'csv',
                    'alert_state_list': 'csv',
                    'alert_type_list': 'csv',
                    'alert_severity_list': 'csv',
                    'region_ids': 'csv',
                    'cluster_identifiers': 'csv',
                    'alert_category_list': 'csv',
                    'alert_type_bucket_list': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_helios_alerts
        )

        def __get_helios_alerts_summary(
            self,
            **kwargs
        ):
            """Get alerts summary on Helios.  # noqa: E501

            Get alerts summary grouped by category.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_helios_alerts_summary(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                cluster_identifiers ([str], none_type): Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.. [optional]
                start_time_usecs (int): Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.. [optional]
                end_time_usecs (int): Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.. [optional]
                states_list ([str], none_type): Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlertsSummaryResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_helios_alerts_summary = _Endpoint(
            settings={
                'response_type': (AlertsSummaryResponse,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/stats/alerts-summary',
                'operation_id': 'get_helios_alerts_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'cluster_identifiers',
                    'start_time_usecs',
                    'end_time_usecs',
                    'states_list',
                ],
                'required': [],
                'nullable': [
                    'cluster_identifiers',
                    'states_list',
                ],
                'enum': [
                    'states_list',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('states_list',): {
                        'None': None,
                        "KRESOLVED": "kResolved",
                        "KOPEN": "kOpen",
                        "KNOTE": "kNote",
                        "KSUPPRESSED": "kSuppressed"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'cluster_identifiers':
                        ([str], none_type,),
                    'start_time_usecs':
                        (int,),
                    'end_time_usecs':
                        (int,),
                    'states_list':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'cluster_identifiers': 'clusterIdentifiers',
                    'start_time_usecs': 'startTimeUsecs',
                    'end_time_usecs': 'endTimeUsecs',
                    'states_list': 'statesList',
                },
                'location_map': {
                    'region_id': 'header',
                    'cluster_identifiers': 'query',
                    'start_time_usecs': 'query',
                    'end_time_usecs': 'query',
                    'states_list': 'query',
                },
                'collection_format_map': {
                    'cluster_identifiers': 'csv',
                    'states_list': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_helios_alerts_summary
        )
