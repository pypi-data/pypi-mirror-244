"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.helios.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.helios.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.helios.model.create_recovery_request import CreateRecoveryRequest
from cohesity_sdk.helios.model.download_files_and_folders_request_params import DownloadFilesAndFoldersRequestParams
from cohesity_sdk.helios.model.error import Error
from cohesity_sdk.helios.model.fetch_uptier_data_response import FetchUptierDataResponse
from cohesity_sdk.helios.model.mcm_recovery_task import McmRecoveryTask
from cohesity_sdk.helios.model.mcm_recovery_tasks import McmRecoveryTasks
from cohesity_sdk.helios.model.recoveries import Recoveries
from cohesity_sdk.helios.model.recovery import Recovery


class RecoveryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __cancel_recovery_by_id(
            self,
            id,
            **kwargs
        ):
            """Cancel Recovery for a given id.  # noqa: E501

            Cancel Recovery for a given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cancel_recovery_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.cancel_recovery_by_id = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}/cancel',
                'operation_id': 'cancel_recovery_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__cancel_recovery_by_id
        )

        def __create_download_files_and_folders_recovery(
            self,
            body,
            **kwargs
        ):
            """Create a download files and folders recovery.  # noqa: E501

            Creates a download files and folders recovery.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_download_files_and_folders_recovery(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (DownloadFilesAndFoldersRequestParams): Specifies the parameters to create a download files and folder recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Recovery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_download_files_and_folders_recovery = _Endpoint(
            settings={
                'response_type': (Recovery,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/download-files-folders',
                'operation_id': 'create_download_files_and_folders_recovery',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (DownloadFilesAndFoldersRequestParams,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'body': 'body',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_download_files_and_folders_recovery
        )

        def __create_recovery(
            self,
            body,
            **kwargs
        ):
            """Performs a Recovery.  # noqa: E501

            Performs a Recovery.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_recovery(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (CreateRecoveryRequest): Specifies the parameters to create a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                request_initiator_type (str): Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Recovery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_recovery = _Endpoint(
            settings={
                'response_type': (Recovery,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries',
                'operation_id': 'create_recovery',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'access_cluster_id',
                    'region_id',
                    'request_initiator_type',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'request_initiator_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('request_initiator_type',): {

                        "UIUSER": "UIUser",
                        "UIAUTO": "UIAuto"
                    },
                },
                'openapi_types': {
                    'body':
                        (CreateRecoveryRequest,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'request_initiator_type':
                        (str,),
                },
                'attribute_map': {
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'request_initiator_type': 'requestInitiatorType',
                },
                'location_map': {
                    'body': 'body',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'request_initiator_type': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_recovery
        )

        def __download_files_from_recovery(
            self,
            id,
            **kwargs
        ):
            """Download files from the given download file recovery.  # noqa: E501

            Download files from the given download file recovery.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.download_files_from_recovery(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                start_offset (int): Specifies the start offset of file chunk to be downloaded.. [optional]
                length (int): Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets). [optional]
                file_type (str): Specifies the downloaded type, i.e: error, success_files_list. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.download_files_from_recovery = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}/download-files',
                'operation_id': 'download_files_from_recovery',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                    'start_offset',
                    'length',
                    'file_type',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'start_offset':
                        (int,),
                    'length':
                        (int,),
                    'file_type':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'start_offset': 'startOffset',
                    'length': 'length',
                    'file_type': 'fileType',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'start_offset': 'query',
                    'length': 'query',
                    'file_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__download_files_from_recovery
        )

        def __download_indexed_file(
            self,
            snapshots_id,
            **kwargs
        ):
            """Download an indexed file.  # noqa: E501

            Download an indexed file from a snapshot.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.download_indexed_file(snapshots_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshots_id (str): Specifies the snapshot id to download from.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                file_path (str): Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.. [optional]
                retry_attempt (int): Specifies the number of attempts the protection run took to create this file.. [optional]
                start_offset (int): Specifies the start offset of file chunk to be downloaded.. [optional]
                length (int): Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshots_id'] = \
                snapshots_id
            return self.call_with_http_info(**kwargs)

        self.download_indexed_file = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/snapshots/{snapshotsId}/download-file',
                'operation_id': 'download_indexed_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshots_id',
                    'access_cluster_id',
                    'region_id',
                    'file_path',
                    'retry_attempt',
                    'start_offset',
                    'length',
                ],
                'required': [
                    'snapshots_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshots_id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'file_path':
                        (str,),
                    'retry_attempt':
                        (int,),
                    'start_offset':
                        (int,),
                    'length':
                        (int,),
                },
                'attribute_map': {
                    'snapshots_id': 'snapshotsId',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'file_path': 'filePath',
                    'retry_attempt': 'retryAttempt',
                    'start_offset': 'startOffset',
                    'length': 'length',
                },
                'location_map': {
                    'snapshots_id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'file_path': 'query',
                    'retry_attempt': 'query',
                    'start_offset': 'query',
                    'length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__download_indexed_file
        )

        def __fetch_uptier_data(
            self,
            archive_uid,
            **kwargs
        ):
            """Fetches the uptier data.  # noqa: E501

            Fetches the uptier data for a restore job.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fetch_uptier_data(archive_uid, async_req=True)
            >>> result = thread.get()

            Args:
                archive_uid (str): Archive UID of the current restore.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FetchUptierDataResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['archive_uid'] = \
                archive_uid
            return self.call_with_http_info(**kwargs)

        self.fetch_uptier_data = _Endpoint(
            settings={
                'response_type': (FetchUptierDataResponse,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/fetch-uptier-data',
                'operation_id': 'fetch_uptier_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'archive_uid',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'archive_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'archive_uid',
                ]
            },
            root_map={
                'validations': {
                    ('archive_uid',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'archive_uid':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'archive_uid': 'archiveUId',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'archive_uid': 'query',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fetch_uptier_data
        )

        def __get_mcm_recoveries(
            self,
            **kwargs
        ):
            """Get Recoveries on Helios.  # noqa: E501

            Get Recoveries on Helios.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mcm_recoveries(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                region_ids ([str]): Filter by a list of region ids.. [optional]
                rpaas_region_ids ([str]): Filter by a list of region ids. This is used for Rpaas only.. [optional]
                cluster_identifiers ([str]): Filter by a list of cluster identifiers in format of clusterId:clusterIncarnationId.. [optional]
                recovery_identifiers ([str], none_type): Specifies the list of Recovery identifiers to filter.. [optional]
                environments ([str], none_type): Specifies the list of environments of recovered objects.. [optional]
                statuses ([str], none_type): Specifies the list of statuses to filter.. [optional]
                from_time_usecs (int, none_type): Specifies the time in Unix timestamp epoch in microsecond which filters all the recoveries started after this value.. [optional]
                to_time_usecs (int, none_type): Specifies the time in Unix timestamp epoch in microsecond which filters all the recoveries started before this value.. [optional]
                recovery_types ([str], none_type): Specifies the recovery types to filter recoveries.. [optional]
                is_rpaas (bool, none_type): Specifies whether the recovery is recovered from a RPaaS snapshot or not. If this is true then only recoveries from RPaaS snapshots runs are returned. Default is false.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmRecoveryTasks
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_mcm_recoveries = _Endpoint(
            settings={
                'response_type': (McmRecoveryTasks,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/recoveries',
                'operation_id': 'get_mcm_recoveries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'region_ids',
                    'rpaas_region_ids',
                    'cluster_identifiers',
                    'recovery_identifiers',
                    'environments',
                    'statuses',
                    'from_time_usecs',
                    'to_time_usecs',
                    'recovery_types',
                    'is_rpaas',
                ],
                'required': [],
                'nullable': [
                    'recovery_identifiers',
                    'environments',
                    'statuses',
                    'from_time_usecs',
                    'to_time_usecs',
                    'recovery_types',
                    'is_rpaas',
                ],
                'enum': [
                    'environments',
                    'statuses',
                    'recovery_types',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('environments',): {
                        'None': None,
                        "KVMWARE": "kVMware",
                        "KHYPERV": "kHyperV",
                        "KAZURE": "kAzure",
                        "KGCP": "kGCP",
                        "KKVM": "kKVM",
                        "KACROPOLIS": "kAcropolis",
                        "KAWS": "kAWS",
                        "KPHYSICAL": "kPhysical",
                        "KGPFS": "kGPFS",
                        "KELASTIFILE": "kElastifile",
                        "KNETAPP": "kNetapp",
                        "KGENERICNAS": "kGenericNas",
                        "KISILON": "kIsilon",
                        "KFLASHBLADE": "kFlashBlade",
                        "KPURE": "kPure",
                        "KSQL": "kSQL",
                        "KEXCHANGE": "kExchange",
                        "KAD": "kAD",
                        "KORACLE": "kOracle",
                        "KVIEW": "kView",
                        "KREMOTEADAPTER": "kRemoteAdapter",
                        "KO365": "kO365",
                        "KKUBERNETES": "kKubernetes",
                        "KCASSANDRA": "kCassandra",
                        "KMONGODB": "kMongoDB",
                        "KCOUCHBASE": "kCouchbase",
                        "KHDFS": "kHdfs",
                        "KHIVE": "kHive",
                        "KHBASE": "kHBase",
                        "KUDA": "kUDA",
                        "KSFDC": "kSfdc"
                    },
                    ('statuses',): {
                        'None': None,
                        "ACCEPTED": "Accepted",
                        "RUNNING": "Running",
                        "CANCELED": "Canceled",
                        "CANCELING": "Canceling",
                        "FAILED": "Failed",
                        "MISSED": "Missed",
                        "SUCCEEDED": "Succeeded",
                        "SUCCEEDEDWITHWARNING": "SucceededWithWarning",
                        "ONHOLD": "OnHold",
                        "FINALIZING": "Finalizing"
                    },
                    ('recovery_types',): {
                        'None': None,
                        "RECOVERVMS": "RecoverVMs",
                        "RECOVERFILES": "RecoverFiles",
                        "INSTANTVOLUMEMOUNT": "InstantVolumeMount",
                        "RECOVERVMDISKS": "RecoverVmDisks",
                        "RECOVERVAPPS": "RecoverVApps",
                        "RECOVERVAPPTEMPLATES": "RecoverVAppTemplates",
                        "UPTIERSNAPSHOT": "UptierSnapshot",
                        "RECOVERRDS": "RecoverRDS",
                        "RECOVERAURORA": "RecoverAurora",
                        "RECOVERAPPS": "RecoverApps",
                        "RECOVERNASVOLUME": "RecoverNasVolume",
                        "RECOVERPHYSICALVOLUMES": "RecoverPhysicalVolumes",
                        "RECOVERSYSTEM": "RecoverSystem",
                        "CLONEAPPVIEW": "CloneAppView",
                        "RECOVERSANVOLUMES": "RecoverSanVolumes",
                        "RECOVERMAILBOX": "RecoverMailbox",
                        "RECOVERONEDRIVE": "RecoverOneDrive",
                        "RECOVERSHAREPOINT": "RecoverSharePoint",
                        "RECOVERPUBLICFOLDERS": "RecoverPublicFolders",
                        "RECOVERMSGROUP": "RecoverMsGroup",
                        "RECOVERMSTEAM": "RecoverMsTeam",
                        "CONVERTTOPST": "ConvertToPst",
                        "RECOVERNAMESPACES": "RecoverNamespaces",
                        "RECOVEROBJECTS": "RecoverObjects",
                        "RECOVERSFDCOBJECTS": "RecoverSfdcObjects",
                        "RECOVERSFDCORG": "RecoverSfdcOrg",
                        "RECOVERSFDCRECORDS": "RecoverSfdcRecords",
                        "DOWNLOADFILESANDFOLDERS": "DownloadFilesAndFolders"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'region_ids':
                        ([str],),
                    'rpaas_region_ids':
                        ([str],),
                    'cluster_identifiers':
                        ([str],),
                    'recovery_identifiers':
                        ([str], none_type,),
                    'environments':
                        ([str], none_type,),
                    'statuses':
                        ([str], none_type,),
                    'from_time_usecs':
                        (int, none_type,),
                    'to_time_usecs':
                        (int, none_type,),
                    'recovery_types':
                        ([str], none_type,),
                    'is_rpaas':
                        (bool, none_type,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'region_ids': 'regionIds',
                    'rpaas_region_ids': 'rpaasRegionIds',
                    'cluster_identifiers': 'clusterIdentifiers',
                    'recovery_identifiers': 'recoveryIdentifiers',
                    'environments': 'environments',
                    'statuses': 'statuses',
                    'from_time_usecs': 'fromTimeUsecs',
                    'to_time_usecs': 'toTimeUsecs',
                    'recovery_types': 'recoveryTypes',
                    'is_rpaas': 'isRpaas',
                },
                'location_map': {
                    'region_id': 'header',
                    'region_ids': 'query',
                    'rpaas_region_ids': 'query',
                    'cluster_identifiers': 'query',
                    'recovery_identifiers': 'query',
                    'environments': 'query',
                    'statuses': 'query',
                    'from_time_usecs': 'query',
                    'to_time_usecs': 'query',
                    'recovery_types': 'query',
                    'is_rpaas': 'query',
                },
                'collection_format_map': {
                    'region_ids': 'csv',
                    'rpaas_region_ids': 'csv',
                    'cluster_identifiers': 'csv',
                    'recovery_identifiers': 'csv',
                    'environments': 'csv',
                    'statuses': 'csv',
                    'recovery_types': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mcm_recoveries
        )

        def __get_mcm_recoveries_by_id(
            self,
            id,
            **kwargs
        ):
            """Get Recovery by Id on Helios.  # noqa: E501

            Get Recovery on Helios by ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mcm_recoveries_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of the recovery.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmRecoveryTask
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_mcm_recoveries_by_id = _Endpoint(
            settings={
                'response_type': (McmRecoveryTask,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/recoveries/{id}',
                'operation_id': 'get_mcm_recoveries_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mcm_recoveries_by_id
        )

        def __get_recoveries(
            self,
            **kwargs
        ):
            """Lists the Recoveries.  # noqa: E501

            Lists the Recoveries.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_recoveries(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                ids ([str]): Filter Recoveries for given ids.. [optional]
                return_only_child_recoveries (bool): Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. . [optional]
                tenant_ids ([str]): TenantIds contains ids of the organizations for which recoveries are to be returned.. [optional]
                include_tenants (bool): Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.. [optional]
                start_time_usecs (int): Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.. [optional]
                end_time_usecs (int): Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.. [optional]
                storage_domain_id (int): Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.. [optional]
                snapshot_target_type ([str]): Specifies the snapshot's target type from which recovery has been performed.. [optional]
                archival_target_type ([str]): Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.. [optional]
                snapshot_environments ([str]): Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.. [optional]
                status ([str]): Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.. [optional]
                recovery_actions ([str]): Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Recoveries
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_recoveries = _Endpoint(
            settings={
                'response_type': (Recoveries,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries',
                'operation_id': 'get_recoveries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'access_cluster_id',
                    'region_id',
                    'ids',
                    'return_only_child_recoveries',
                    'tenant_ids',
                    'include_tenants',
                    'start_time_usecs',
                    'end_time_usecs',
                    'storage_domain_id',
                    'snapshot_target_type',
                    'archival_target_type',
                    'snapshot_environments',
                    'status',
                    'recovery_actions',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'snapshot_target_type',
                    'archival_target_type',
                    'snapshot_environments',
                    'status',
                    'recovery_actions',
                ],
                'validation': [
                    'snapshot_target_type',
                    'archival_target_type',
                    'snapshot_environments',
                    'status',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_target_type',): {

                    },
                    ('archival_target_type',): {

                    },
                    ('snapshot_environments',): {

                    },
                    ('status',): {

                    },
                },
                'allowed_values': {
                    ('snapshot_target_type',): {

                        "LOCAL": "Local",
                        "ARCHIVAL": "Archival",
                        "RPAASARCHIVAL": "RpaasArchival",
                        "STORAGEARRAYSNAPSHOT": "StorageArraySnapshot"
                    },
                    ('archival_target_type',): {

                        "TAPE": "Tape",
                        "CLOUD": "Cloud",
                        "NAS": "Nas"
                    },
                    ('snapshot_environments',): {

                        "KVMWARE": "kVMware",
                        "KHYPERV": "kHyperV",
                        "KAZURE": "kAzure",
                        "KGCP": "kGCP",
                        "KKVM": "kKVM",
                        "KACROPOLIS": "kAcropolis",
                        "KAWS": "kAWS",
                        "KPHYSICAL": "kPhysical",
                        "KGPFS": "kGPFS",
                        "KELASTIFILE": "kElastifile",
                        "KNETAPP": "kNetapp",
                        "KGENERICNAS": "kGenericNas",
                        "KISILON": "kIsilon",
                        "KFLASHBLADE": "kFlashBlade",
                        "KPURE": "kPure",
                        "KSQL": "kSQL",
                        "KEXCHANGE": "kExchange",
                        "KAD": "kAD",
                        "KORACLE": "kOracle",
                        "KVIEW": "kView",
                        "KREMOTEADAPTER": "kRemoteAdapter",
                        "KO365": "kO365",
                        "KKUBERNETES": "kKubernetes",
                        "KCASSANDRA": "kCassandra",
                        "KMONGODB": "kMongoDB",
                        "KCOUCHBASE": "kCouchbase",
                        "KHDFS": "kHdfs",
                        "KHIVE": "kHive",
                        "KHBASE": "kHBase",
                        "KUDA": "kUDA",
                        "KSFDC": "kSfdc"
                    },
                    ('status',): {

                        "ACCEPTED": "Accepted",
                        "RUNNING": "Running",
                        "CANCELED": "Canceled",
                        "CANCELING": "Canceling",
                        "FAILED": "Failed",
                        "MISSED": "Missed",
                        "SUCCEEDED": "Succeeded",
                        "SUCCEEDEDWITHWARNING": "SucceededWithWarning",
                        "ONHOLD": "OnHold",
                        "FINALIZING": "Finalizing"
                    },
                    ('recovery_actions',): {

                        "RECOVERVMS": "RecoverVMs",
                        "RECOVERFILES": "RecoverFiles",
                        "INSTANTVOLUMEMOUNT": "InstantVolumeMount",
                        "RECOVERVMDISKS": "RecoverVmDisks",
                        "RECOVERVAPPS": "RecoverVApps",
                        "RECOVERVAPPTEMPLATES": "RecoverVAppTemplates",
                        "UPTIERSNAPSHOT": "UptierSnapshot",
                        "RECOVERRDS": "RecoverRDS",
                        "RECOVERAURORA": "RecoverAurora",
                        "RECOVERAPPS": "RecoverApps",
                        "RECOVERNASVOLUME": "RecoverNasVolume",
                        "RECOVERPHYSICALVOLUMES": "RecoverPhysicalVolumes",
                        "RECOVERSYSTEM": "RecoverSystem",
                        "CLONEAPPVIEW": "CloneAppView",
                        "RECOVERSANVOLUMES": "RecoverSanVolumes",
                        "RECOVERMAILBOX": "RecoverMailbox",
                        "RECOVERONEDRIVE": "RecoverOneDrive",
                        "RECOVERSHAREPOINT": "RecoverSharePoint",
                        "RECOVERPUBLICFOLDERS": "RecoverPublicFolders",
                        "RECOVERMSGROUP": "RecoverMsGroup",
                        "RECOVERMSTEAM": "RecoverMsTeam",
                        "CONVERTTOPST": "ConvertToPst",
                        "RECOVERNAMESPACES": "RecoverNamespaces",
                        "RECOVEROBJECTS": "RecoverObjects",
                        "RECOVERSFDCOBJECTS": "RecoverSfdcObjects",
                        "RECOVERSFDCORG": "RecoverSfdcOrg",
                        "RECOVERSFDCRECORDS": "RecoverSfdcRecords",
                        "DOWNLOADFILESANDFOLDERS": "DownloadFilesAndFolders"
                    },
                },
                'openapi_types': {
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'ids':
                        ([str],),
                    'return_only_child_recoveries':
                        (bool,),
                    'tenant_ids':
                        ([str],),
                    'include_tenants':
                        (bool,),
                    'start_time_usecs':
                        (int,),
                    'end_time_usecs':
                        (int,),
                    'storage_domain_id':
                        (int,),
                    'snapshot_target_type':
                        ([str],),
                    'archival_target_type':
                        ([str],),
                    'snapshot_environments':
                        ([str],),
                    'status':
                        ([str],),
                    'recovery_actions':
                        ([str],),
                },
                'attribute_map': {
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'ids': 'ids',
                    'return_only_child_recoveries': 'returnOnlyChildRecoveries',
                    'tenant_ids': 'tenantIds',
                    'include_tenants': 'includeTenants',
                    'start_time_usecs': 'startTimeUsecs',
                    'end_time_usecs': 'endTimeUsecs',
                    'storage_domain_id': 'storageDomainId',
                    'snapshot_target_type': 'snapshotTargetType',
                    'archival_target_type': 'archivalTargetType',
                    'snapshot_environments': 'snapshotEnvironments',
                    'status': 'status',
                    'recovery_actions': 'recoveryActions',
                },
                'location_map': {
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'ids': 'query',
                    'return_only_child_recoveries': 'query',
                    'tenant_ids': 'query',
                    'include_tenants': 'query',
                    'start_time_usecs': 'query',
                    'end_time_usecs': 'query',
                    'storage_domain_id': 'query',
                    'snapshot_target_type': 'query',
                    'archival_target_type': 'query',
                    'snapshot_environments': 'query',
                    'status': 'query',
                    'recovery_actions': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                    'tenant_ids': 'csv',
                    'snapshot_target_type': 'csv',
                    'archival_target_type': 'csv',
                    'snapshot_environments': 'csv',
                    'status': 'csv',
                    'recovery_actions': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_recoveries
        )

        def __get_recovery_by_id(
            self,
            id,
            **kwargs
        ):
            """Get Recovery for a given id.  # noqa: E501

            Get Recovery for a given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_recovery_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                include_tenants (bool): Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Recovery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_recovery_by_id = _Endpoint(
            settings={
                'response_type': (Recovery,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}',
                'operation_id': 'get_recovery_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                    'include_tenants',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'include_tenants':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'include_tenants': 'includeTenants',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'include_tenants': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_recovery_by_id
        )

        def __get_recovery_debug_logs(
            self,
            id,
            **kwargs
        ):
            """Get the debug logs for a particular recovery operation.  # noqa: E501

            Get the debug logs for a particular recovery operation.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_recovery_debug_logs(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of a Recovery job.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_recovery_debug_logs = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}/debug-logs',
                'operation_id': 'get_recovery_debug_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_recovery_debug_logs
        )

        def __get_recovery_errors_report(
            self,
            id,
            **kwargs
        ):
            """Get the CSV of errors/warnings for a given recovery operation.  # noqa: E501

            Get a CSV error report for given recovery operation. Each row in CSV report contains the File Path, error/warning code and error/warning message.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_recovery_errors_report(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies a unique ID of a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_recovery_errors_report = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}/download-messages',
                'operation_id': 'get_recovery_errors_report',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_recovery_errors_report
        )

        def __internal_api_create_download_files_and_folders_recovery(
            self,
            body,
            **kwargs
        ):
            """Create a download files and folders recovery.  # noqa: E501

            Creates a download files and folders recovery.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.internal_api_create_download_files_and_folders_recovery(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (DownloadFilesAndFoldersRequestParams): Specifies the parameters to create a download files and folder recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Recovery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.internal_api_create_download_files_and_folders_recovery = _Endpoint(
            settings={
                'response_type': (Recovery,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/downloadFilesAndFoldersRecovery',
                'operation_id': 'internal_api_create_download_files_and_folders_recovery',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (DownloadFilesAndFoldersRequestParams,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'body': 'body',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__internal_api_create_download_files_and_folders_recovery
        )

        def __internal_api_download_files_from_recovery(
            self,
            id,
            **kwargs
        ):
            """Download files from the given download file recovery.  # noqa: E501

            Download files from the given download file recovery.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.internal_api_download_files_from_recovery(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                start_offset (int): Specifies the start offset of file chunk to be downloaded.. [optional]
                length (int): Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.internal_api_download_files_from_recovery = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}/downloadFiles',
                'operation_id': 'internal_api_download_files_from_recovery',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                    'start_offset',
                    'length',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'start_offset':
                        (int,),
                    'length':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'start_offset': 'startOffset',
                    'length': 'length',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'start_offset': 'query',
                    'length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__internal_api_download_files_from_recovery
        )

        def __internal_api_download_indexed_file(
            self,
            snapshots_id,
            **kwargs
        ):
            """Download an indexed file.  # noqa: E501

            Download an indexed file from a snapshot.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.internal_api_download_indexed_file(snapshots_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshots_id (str): Specifies the snapshot id to download from.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                file_path (str): Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.. [optional]
                retry_attempt (int): Specifies the number of attempts the protection run took to create this file.. [optional]
                start_offset (int): Specifies the start offset of file chunk to be downloaded.. [optional]
                length (int): Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshots_id'] = \
                snapshots_id
            return self.call_with_http_info(**kwargs)

        self.internal_api_download_indexed_file = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/snapshots/{snapshotsId}/downloadFile',
                'operation_id': 'internal_api_download_indexed_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshots_id',
                    'access_cluster_id',
                    'region_id',
                    'file_path',
                    'retry_attempt',
                    'start_offset',
                    'length',
                ],
                'required': [
                    'snapshots_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshots_id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                    'file_path':
                        (str,),
                    'retry_attempt':
                        (int,),
                    'start_offset':
                        (int,),
                    'length':
                        (int,),
                },
                'attribute_map': {
                    'snapshots_id': 'snapshotsId',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                    'file_path': 'filePath',
                    'retry_attempt': 'retryAttempt',
                    'start_offset': 'startOffset',
                    'length': 'length',
                },
                'location_map': {
                    'snapshots_id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                    'file_path': 'query',
                    'retry_attempt': 'query',
                    'start_offset': 'query',
                    'length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__internal_api_download_indexed_file
        )

        def __tear_down_recovery_by_id(
            self,
            id,
            **kwargs
        ):
            """Tear down Recovery for a given id.  # noqa: E501

            Tear down Recovery for a given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tear_down_recovery_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of a Recovery.

            Keyword Args:
                access_cluster_id (int): This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.. [optional]
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.tear_down_recovery_by_id = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/data-protect/recoveries/{id}/tear-down',
                'operation_id': 'tear_down_recovery_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'access_cluster_id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'regex': {
                            'pattern': r'^\d+:\d+:\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'access_cluster_id': 'accessClusterId',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'access_cluster_id': 'header',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__tear_down_recovery_by_id
        )
