"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.helios.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.helios.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.helios.model.data_protect_usage import DataProtectUsage
from cohesity_sdk.helios.model.error import Error
from cohesity_sdk.helios.model.rpaas_usage import RpaasUsage


class HeliosDataProtectStatsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_data_protect_usage(
            self,
            **kwargs
        ):
            """Data-Protect Usage Statistics  # noqa: E501

            Returns the current months usage for DMaaS. This internal api is to be used for display stats on DMaaS.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_data_protect_usage(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                from_usecs (int, none_type): Start time to query for consumption of the current month. [optional]
                to_usecs (int, none_type): End time to query for consumption of the current month. [optional]
                region_ids ([str], none_type): Specifies the list of region ids. Only applicable in case of DMaaS.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataProtectUsage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_data_protect_usage = _Endpoint(
            settings={
                'response_type': (DataProtectUsage,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/usage-stats',
                'operation_id': 'get_data_protect_usage',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'from_usecs',
                    'to_usecs',
                    'region_ids',
                ],
                'required': [],
                'nullable': [
                    'from_usecs',
                    'to_usecs',
                    'region_ids',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'from_usecs':
                        (int, none_type,),
                    'to_usecs':
                        (int, none_type,),
                    'region_ids':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'from_usecs': 'fromUsecs',
                    'to_usecs': 'toUsecs',
                    'region_ids': 'regionIds',
                },
                'location_map': {
                    'region_id': 'header',
                    'from_usecs': 'query',
                    'to_usecs': 'query',
                    'region_ids': 'query',
                },
                'collection_format_map': {
                    'region_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_data_protect_usage
        )

        def __get_rpaas_usage(
            self,
            **kwargs
        ):
            """RPaaS Usage Statistics  # noqa: E501

            Returns the data usage usage for RPaaS.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_rpaas_usage(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                from_time_usecs (int, none_type): Start time in microseconds to query for RPaaS data consumption.. [optional]
                to_time_usecs (int, none_type): End time in microseconds to query for RPaaS data consumption.. [optional]
                region_ids ([str], none_type): Specifies the list of region ids.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RpaasUsage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_rpaas_usage = _Endpoint(
            settings={
                'response_type': (RpaasUsage,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/ransomware-shield/usage-stats',
                'operation_id': 'get_rpaas_usage',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'from_time_usecs',
                    'to_time_usecs',
                    'region_ids',
                ],
                'required': [],
                'nullable': [
                    'from_time_usecs',
                    'to_time_usecs',
                    'region_ids',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'from_time_usecs':
                        (int, none_type,),
                    'to_time_usecs':
                        (int, none_type,),
                    'region_ids':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'from_time_usecs': 'fromTimeUsecs',
                    'to_time_usecs': 'toTimeUsecs',
                    'region_ids': 'regionIds',
                },
                'location_map': {
                    'region_id': 'header',
                    'from_time_usecs': 'query',
                    'to_time_usecs': 'query',
                    'region_ids': 'query',
                },
                'collection_format_map': {
                    'region_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_rpaas_usage
        )
