# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ssc_codegen',
 'ssc_codegen.configs',
 'ssc_codegen.configs.dart',
 'ssc_codegen.configs.python']

package_data = \
{'': ['*']}

install_requires = \
['Jinja2>=3.1.2,<4.0.0',
 'PyYAML>=6.0.1,<7.0.0',
 'cssselect>=1.2.0,<2.0.0',
 'lxml>=4.9.3,<5.0.0']

entry_points = \
{'console_scripts': ['ssc-gen = ssc_codegen.cli:main']}

setup_kwargs = {
    'name': 'ssc-codegen',
    'version': '0.1.9',
    'description': 'generate selector schemas classes from yaml config and DSL-lang script',
    'long_description': '# Selector schema codegen\n[RUSSIAN](README_RU.md) [ENGLISH](README.md)\n\nssc_codegen - generator of parsers for various programming languages (for html priority) using\nyaml-DSL configurations with built-in declarative language.\n\nDesigned to port parsers to various programming languages\n\n## Install\n\n### pipx (recommended)\n\n```shell\npipx install ssc_codegen\n```\n\n### pip\n\n```shell\npip install ssc_codegen\n```\n\n## Supported languages\n\n| language | lib            | xpath | css | formatter   |\n|----------|----------------|-------|-----|-------------|\n| python   | bs4            | NO    | YES | black       |\n| python   | parsel         | YES   | YES | black       |\n| dart     | universal_html | NO    | YES | dart format |\n\n## User guide\n\n### Language features\n\n- DSL (Domain-Specific Language), declarative (no assignment, arithmetic, priority operations)\n- Minimalistic syntax for working with selectors, regular expressions and simple string operations\n- All methods take **one** argument as input and it is always selector-like type\n- 4 types\n- Regular expression syntax is like in python. For maximum compatibility, use for example `[0-9]` instead of `\\d`\n- Empty lines and comments (`//`) are ignored by the parser.\n\n### Types description\nThere are 4 data types for this scripting language\n\n| type           | Description                                                                                                       |\n|----------------|-------------------------------------------------------------------------------------------------------------------|\n| SELECTOR       | class instance (Document, Element, Selector) from which css/xpath selectors are called. Always the first argument |\n| SELECTOR_ARRAY | representation of a list of nodes (elements?) of all found elements from the SELECTOR instance                    |\n| TEXT           | string                                                                                                            |\n| ARRAY          | array of strings                                                                                                  |\n\n### Recommendations\n\n- usage css selector: they can be **guaranteed** converted to xpath (if target language not support CSS selectors)\n- there is a xpath to css converter for simple queries **without guarantees of functionality**. \nFor example, in css there is no analogue of `contains` from xpath, etc.\n\n### Schematic representation of generator operation\n\n![img.png](docs/img.png)\n\n\n### Description of directives\n- statements are separated by line indentation `\\n`\n- All string arguments are specified with **double** `"` quotes.\n- Space are ignored\n\n| Operator | Arguments                 | Description                                                                                                                                  | Return type value | Example                    |\n|----------|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|-------------------|----------------------------|\n| default  | "<value>"                 | Default value if an error occurred during parsing. **Listed first**                                                                          | -                 | default "empty"            |\n| xpath    | "<expr>"                  | xpath selector, returns the first value found                                                                                                | SELECTOR          | xpath "//title"            |\n| xpathAll | "<expr>"                  | xpath selector, returns all values                                                                                                           | SELECTOR          | xpathAll "//div"           |\n| css      | "<expr>"                  | css selector, returns the first value found                                                                                                  | SELECTOR          | css "title"                |\n| cssAll   | "<expr>"                  | css selector, returns all values                                                                                                             | SELECTOR          | cssAll "div > a"           |\n| attr     | "<tag attr>"              | get tag(s). Called after xpath/xpathAll/css/cssAll                                                                                           | TEXT/ARRAY        | attr "href"                |\n| text     |                           | get the text inside the tag. Called after xpath/xpathAll/css/cssAll. Can be called first to completely convert a `SELECTOR` object to `TEXT` | TEXT/ARRAY        | text                       |\n| raw      |                           | get the raw tag as text. Called after xpath/xpathAll/css/cssAll                                                                              | TEXT/ARRAY        | raw                        |\n| re       | "<exrp>"                  | regular expression. Returns the first element found. Argument must be TEXT                                                                   | TEXT              | re "(\\d+)"                 |\n| reAll    | "<expr>"                  | regular expression. Returns all found elements. Argument must be TEXT                                                                        | ARRAY             | reAll "(\\d+)"              |\n| reSub    | "<expr>" "<repl>" <count> | Replacement by regular expression. Argument must be TEXT                                                                                     | TEXT              | reSub "(\\d+)" "digit(lol)" |\n| strip    | "<string>"                | Removes the given string LEFT and RIGHT. Argument must be TEXT                                                                               | TEXT              | strip "\\n"                 |\n| lstrip   | "<string>"                | Deletes the specified line from the LEFT. Argument must be TEXT                                                                              | TEXT              | lstrip " "                 |\n| rstrip   | "<string>"                | Deletes the specified row on the RIGHT. Argument must be TEXT                                                                                | TEXT              | rstrip " "                 |\n| format   | "<string>"                | Format string. Specify a substitution argument using the `{{}}` operator. Argument must be TEXT                                              | TEXT              | format "spam {{}} egg"     |\n| split    | "<value>" <count>         | Splitting a line. If count = -1 or not transmitted, divide by the maximum available. Argument must be TEXT                                   | ARRAY             | split ", "                 |\n| replace  | "<old>" "<old>" <count>   | String replacement. If count = -1 or not passed, replace it with the maximum available one. Argument must be TEXT                            | ARRAY             | split ", "                 |\n| limit    | <count>                   | Maximum number of elements                                                                                                                   | ARRAY             | limit 50                   |\n| index    | <index>                   | Take element by index. Argument must be ARRAY                                                                                                | TEXT              | index 1                    |\n| first    |                           | `index 1` alias                                                                                                                              | TEXT              | first                      |\n| last     |                           | `index -1` alias                                                                                                                             | TEXT              | last                       |\n| join     | "<string>"                | Collects ARRAY into a string. Argument must be ARRAY                                                                                         | TEXT              | join ", "                  |\n| ret      |                           | Tell the translator to return a value. Automatically added if not specified in the script                                                    |                   | ret                        |\n| noRet    | "<string>"                | Tell the translator not to return anything. Added for document pre-validation                                                                |                   | noRet                      |\n| //       | ...                       | One line comment. Ignored by the final code generator                                                                                        |                   | // this is comment line    |\n\n### Example code generation\n\n```\n// set default value if parse process is failing\nxpath "//title"\ntext\nformat "Cool title: {{}}"\n```\n\ngenerated python equivalent code:\n\n```python\nfrom parsel import Selector\n\n\ndef dummy_parse(part: Selector):\n    val_0 = part.xpath(\'//title\')\n    val_1 = val_0.xpath(\'/text()\').get()\n    val_2 = "Cool title: {}".format(val_1)\n    return val_2\n```\n\ngenerated dart equivalent code:\n\n```dart\nimport \'package:html/parser.dart\' as html;\n\ndummy_parse(part){\n    var val_0 = part.querySelector(\'title\');\n    String val_1 = val_0?.text ?? "";\n    var val_2 = "Cool title: $val_1";\n    return val_2;\n}\n```\nadd default value:\n\n```\n// set default value if parse process is failing\ndefault "spam egg"\nxpath "//title"\ntext\nformat "Cool title: {{}}"\n```\n\n```python\nfrom parsel import Selector\n\n\ndef dummy_parse(part: Selector):\n    try:  \n      val_1 = part.xpath(\'//title\')\n      val_2 = val_1.xpath(\'/text()\').get()\n      val_3 = "Cool title: {}".format(val_2)\n      return val_3\n    except Exception:\n        return "spam egg"\n```\n\n```dart\nimport \'package:html/parser.dart\' as html;\n\ndummy_parse(html.Document part){\n  try{\n    var val_0 = part.querySelector(\'title\');\n    String val_1 = val_0?.text ?? "";\n    var val_2 = "Cool title: $val_1";\n    return val_2;\n  } catch (e){\n    return "spam egg";\n  }\n    \n}\n```\nadd assert validator\n\n```\n// not null check operation\nassertCss "head > title"\nxpath "//title"\ntext\nformat "Cool title: {{}}"\n```\n\n\n```python\nfrom parsel import Selector\n\n\ndef dummy_parse(part: Selector):\n    assert part.css("head > title")\n    val_1 = part.xpath(\'//title\')\n    val_2 = val_1.xpath(\'/text()\').get()\n    val_3 = "Cool title: {}".format(val_2)\n    return val_3\n```\n\n```dart\nimport \'package:html/parser.dart\' as html;\n\ndummy_parse(html.Document part){\n    assert(part.querySelector(\'title\') != null);\n    var val_0 = part.querySelector(\'title\');\n    String val_1 = val_0?.text ?? "";\n    var val_2 = "Cool title: $val_1";\n    return val_2;\n}\n```\n\n### Document validation\n\nThe following commands are needed to pre-validate the input document using `assert` and they **do not change**\nfinal and intermediate values.\n\nIn this DSL language there are no `boolean`, `null` types, so if the result is false it will throw an error\nlike `AssertionError`.\n\nThe operators accept `SELECTOR`:\n- assertCss\n- assertXpath\n\n\nAll other operators accept `TEXT`:\n\n| Command        | Description                                                                     | Example                         |\n|----------------|---------------------------------------------------------------------------------|---------------------------------|\n| assertEqual    | Full string comparison (`==`) (case sensitive)                                  | assertEqual "lorem upsum dolor" |\n| assertContains | Comparison by presence of part of a string in `TEXT`                            | assertContains "sum"            |\n| assertStarts   | Comparison based on the presence of part of a string at the beginning of `TEXT` | assertStarts "lorem"            |\n| assertEnds     | Comparison based on the presence of part of a string at the end of `TEXT`       | assertEnds "dolor"              |\n| assertMatch    | Compare `TEXT` by regular expression                                            | assertMatch "lorem \\w+ dolor"   |\n| assertCss      | Checking the validity of the query in `SELECTOR`.                               | assertCss "head > title"        |\n| assertXpath    | Checking the validity of the query in `SELECTOR`.                               | assertXpath "//head/title"      |\n\n### yaml config\nAn example of the structure of the generated parser class:\n![img_2.png](docs/img_2.png)\n\n- selector - Selector/Document instance, initialized using document\n- _aliases - remapping keys for the view() method\n- _viewKeys - output keys for the view() method\n- _cachedResult - cache of obtained values from the parse() method\n- parse() - launching the parser\n- view() - getting the received values\n- _preValidate() - an optional method of preliminary validation of the input document according to the rules from the configuration. If the result is false/null, it throws `AssertError`\n- _partDocument() - an optional method of dividing a document into parts using a given selector. Useful, for example, for obtaining elements of the same type (product cards, etc.)\n- _parseA, _parseB, _parseC, ... - automatically generated parser methods for each key (A,B,C) according to the rules from the configuration\n\n\nExample configuration file, see in [examples](examples)\n\n\n### Usage pseudocode example:\n```\ndocument = ... // extracted html document\ninstance = Klass(document)\ninstance.parse()\nprint(instance.view())\n```\n\n## dev \n[DEV](README_DEV.md)\n\n\n## TODO\n- generated schemas checksum\n- filter operations (?)\n- constants support\n- more languages, libs support\n- codegen optimizations (usage SELECTOR fluent interfaces, one-line code generation)\n- css/xpath analyzer in pre-generate step\n- css/xpath patches (for example, if css selectors in target language not support `:nth-child` operation?)\n- translate regex expressions. Eg: `\\d` to `[0-9]`\n- string methods: `title`, `upper`, `lower`, `capitalize` or any useful\n',
    'author': 'vypivshiy',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
