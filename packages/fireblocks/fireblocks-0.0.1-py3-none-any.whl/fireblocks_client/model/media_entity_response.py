# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class MediaEntityResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "contentType",
            "url",
        }
        
        class properties:
            url = schemas.StrSchema
            
            
            class contentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "IMAGE": "IMAGE",
                        "VIDEO": "VIDEO",
                        "ANIMATION": "ANIMATION",
                        "THREE_D": "THREE_D",
                        "TEXT": "TEXT",
                        "GIF": "GIF",
                        "UNKNOWN_TYPE": "UNKNOWN_TYPE",
                        "SVG": "SVG",
                        "AUDIO": "AUDIO",
                    }
                
                @schemas.classproperty
                def IMAGE(cls):
                    return cls("IMAGE")
                
                @schemas.classproperty
                def VIDEO(cls):
                    return cls("VIDEO")
                
                @schemas.classproperty
                def ANIMATION(cls):
                    return cls("ANIMATION")
                
                @schemas.classproperty
                def THREE_D(cls):
                    return cls("THREE_D")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
                
                @schemas.classproperty
                def GIF(cls):
                    return cls("GIF")
                
                @schemas.classproperty
                def UNKNOWN_TYPE(cls):
                    return cls("UNKNOWN_TYPE")
                
                @schemas.classproperty
                def SVG(cls):
                    return cls("SVG")
                
                @schemas.classproperty
                def AUDIO(cls):
                    return cls("AUDIO")
            __annotations__ = {
                "url": url,
                "contentType": contentType,
            }
    
    contentType: MetaOapg.properties.contentType
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentType"]) -> MetaOapg.properties.contentType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "contentType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentType"]) -> MetaOapg.properties.contentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "contentType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        contentType: typing.Union[MetaOapg.properties.contentType, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MediaEntityResponse':
        return super().__new__(
            cls,
            *_args,
            contentType=contentType,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
