# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class AuthorizationInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)
    """


    class MetaOapg:
        
        class properties:
            allowOperatorAsAuthorizer = schemas.BoolSchema
            
            
            class logic(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AND(cls):
                    return cls("AND")
                
                @schemas.classproperty
                def OR(cls):
                    return cls("OR")
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AuthorizationGroups']:
                        return AuthorizationGroups
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AuthorizationGroups'], typing.List['AuthorizationGroups']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AuthorizationGroups':
                    return super().__getitem__(i)
            __annotations__ = {
                "allowOperatorAsAuthorizer": allowOperatorAsAuthorizer,
                "logic": logic,
                "groups": groups,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowOperatorAsAuthorizer"]) -> MetaOapg.properties.allowOperatorAsAuthorizer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logic"]) -> MetaOapg.properties.logic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowOperatorAsAuthorizer", "logic", "groups", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowOperatorAsAuthorizer"]) -> typing.Union[MetaOapg.properties.allowOperatorAsAuthorizer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logic"]) -> typing.Union[MetaOapg.properties.logic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowOperatorAsAuthorizer", "logic", "groups", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        allowOperatorAsAuthorizer: typing.Union[MetaOapg.properties.allowOperatorAsAuthorizer, bool, schemas.Unset] = schemas.unset,
        logic: typing.Union[MetaOapg.properties.logic, str, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthorizationInfo':
        return super().__new__(
            cls,
            *_args,
            allowOperatorAsAuthorizer=allowOperatorAsAuthorizer,
            logic=logic,
            groups=groups,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.authorization_groups import AuthorizationGroups
