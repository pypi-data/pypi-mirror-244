# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class TokenOwnershipResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "standard",
            "blockchainDescriptor",
            "balance",
            "tokenId",
            "ownershipStartTime",
            "name",
            "description",
            "vaultAccountId",
            "id",
            "media",
            "ownershipLastUpdateTime",
        }
        
        class properties:
            id = schemas.StrSchema
            tokenId = schemas.StrSchema
            standard = schemas.StrSchema
            
            
            class media(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaEntityResponse']:
                        return MediaEntityResponse
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MediaEntityResponse'], typing.List['MediaEntityResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MediaEntityResponse':
                    return super().__getitem__(i)
            balance = schemas.StrSchema
            vaultAccountId = schemas.StrSchema
            ownershipStartTime = schemas.NumberSchema
            ownershipLastUpdateTime = schemas.NumberSchema
            
            
            class blockchainDescriptor(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ETH(cls):
                    return cls("ETH")
                
                @schemas.classproperty
                def ETH_TEST3(cls):
                    return cls("ETH_TEST3")
                
                @schemas.classproperty
                def POLYGON(cls):
                    return cls("POLYGON")
                
                @schemas.classproperty
                def POLYGON_TEST_MUMBAI(cls):
                    return cls("POLYGON_TEST_MUMBAI")
            description = schemas.StrSchema
            name = schemas.StrSchema
            metadataURI = schemas.StrSchema
            cachedMetadataURI = schemas.StrSchema
            
            
            class collection(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TokenCollectionResponse,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'collection':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "tokenId": tokenId,
                "standard": standard,
                "media": media,
                "balance": balance,
                "vaultAccountId": vaultAccountId,
                "ownershipStartTime": ownershipStartTime,
                "ownershipLastUpdateTime": ownershipLastUpdateTime,
                "blockchainDescriptor": blockchainDescriptor,
                "description": description,
                "name": name,
                "metadataURI": metadataURI,
                "cachedMetadataURI": cachedMetadataURI,
                "collection": collection,
            }
    
    standard: MetaOapg.properties.standard
    blockchainDescriptor: MetaOapg.properties.blockchainDescriptor
    balance: MetaOapg.properties.balance
    tokenId: MetaOapg.properties.tokenId
    ownershipStartTime: MetaOapg.properties.ownershipStartTime
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    vaultAccountId: MetaOapg.properties.vaultAccountId
    id: MetaOapg.properties.id
    media: MetaOapg.properties.media
    ownershipLastUpdateTime: MetaOapg.properties.ownershipLastUpdateTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard"]) -> MetaOapg.properties.standard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vaultAccountId"]) -> MetaOapg.properties.vaultAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownershipStartTime"]) -> MetaOapg.properties.ownershipStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownershipLastUpdateTime"]) -> MetaOapg.properties.ownershipLastUpdateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockchainDescriptor"]) -> MetaOapg.properties.blockchainDescriptor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataURI"]) -> MetaOapg.properties.metadataURI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cachedMetadataURI"]) -> MetaOapg.properties.cachedMetadataURI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "tokenId", "standard", "media", "balance", "vaultAccountId", "ownershipStartTime", "ownershipLastUpdateTime", "blockchainDescriptor", "description", "name", "metadataURI", "cachedMetadataURI", "collection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard"]) -> MetaOapg.properties.standard: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vaultAccountId"]) -> MetaOapg.properties.vaultAccountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownershipStartTime"]) -> MetaOapg.properties.ownershipStartTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownershipLastUpdateTime"]) -> MetaOapg.properties.ownershipLastUpdateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockchainDescriptor"]) -> MetaOapg.properties.blockchainDescriptor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataURI"]) -> typing.Union[MetaOapg.properties.metadataURI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cachedMetadataURI"]) -> typing.Union[MetaOapg.properties.cachedMetadataURI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> typing.Union[MetaOapg.properties.collection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "tokenId", "standard", "media", "balance", "vaultAccountId", "ownershipStartTime", "ownershipLastUpdateTime", "blockchainDescriptor", "description", "name", "metadataURI", "cachedMetadataURI", "collection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        standard: typing.Union[MetaOapg.properties.standard, str, ],
        blockchainDescriptor: typing.Union[MetaOapg.properties.blockchainDescriptor, str, ],
        balance: typing.Union[MetaOapg.properties.balance, str, ],
        tokenId: typing.Union[MetaOapg.properties.tokenId, str, ],
        ownershipStartTime: typing.Union[MetaOapg.properties.ownershipStartTime, decimal.Decimal, int, float, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        vaultAccountId: typing.Union[MetaOapg.properties.vaultAccountId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        media: typing.Union[MetaOapg.properties.media, list, tuple, ],
        ownershipLastUpdateTime: typing.Union[MetaOapg.properties.ownershipLastUpdateTime, decimal.Decimal, int, float, ],
        metadataURI: typing.Union[MetaOapg.properties.metadataURI, str, schemas.Unset] = schemas.unset,
        cachedMetadataURI: typing.Union[MetaOapg.properties.cachedMetadataURI, str, schemas.Unset] = schemas.unset,
        collection: typing.Union[MetaOapg.properties.collection, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenOwnershipResponse':
        return super().__new__(
            cls,
            *_args,
            standard=standard,
            blockchainDescriptor=blockchainDescriptor,
            balance=balance,
            tokenId=tokenId,
            ownershipStartTime=ownershipStartTime,
            name=name,
            description=description,
            vaultAccountId=vaultAccountId,
            id=id,
            media=media,
            ownershipLastUpdateTime=ownershipLastUpdateTime,
            metadataURI=metadataURI,
            cachedMetadataURI=cachedMetadataURI,
            collection=collection,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.media_entity_response import MediaEntityResponse
from fireblocks_client.model.token_collection_response import TokenCollectionResponse
