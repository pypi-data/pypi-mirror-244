# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class ToCollateralTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            asset = schemas.StrSchema
            amount = schemas.StrSchema
            srcAddress = schemas.StrSchema
            srcTag = schemas.StrSchema
            fee = schemas.StrSchema
            __annotations__ = {
                "asset": asset,
                "amount": amount,
                "srcAddress": srcAddress,
                "srcTag": srcTag,
                "fee": fee,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset"]) -> MetaOapg.properties.asset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["srcAddress"]) -> MetaOapg.properties.srcAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["srcTag"]) -> MetaOapg.properties.srcTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["asset", "amount", "srcAddress", "srcTag", "fee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset"]) -> typing.Union[MetaOapg.properties.asset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["srcAddress"]) -> typing.Union[MetaOapg.properties.srcAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["srcTag"]) -> typing.Union[MetaOapg.properties.srcTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union[MetaOapg.properties.fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["asset", "amount", "srcAddress", "srcTag", "fee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        asset: typing.Union[MetaOapg.properties.asset, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        srcAddress: typing.Union[MetaOapg.properties.srcAddress, str, schemas.Unset] = schemas.unset,
        srcTag: typing.Union[MetaOapg.properties.srcTag, str, schemas.Unset] = schemas.unset,
        fee: typing.Union[MetaOapg.properties.fee, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ToCollateralTransaction':
        return super().__new__(
            cls,
            *_args,
            asset=asset,
            amount=amount,
            srcAddress=srcAddress,
            srcTag=srcTag,
            fee=fee,
            _configuration=_configuration,
            **kwargs,
        )
