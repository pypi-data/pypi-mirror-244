# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class PayoutInstruction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "amount",
            "payeeAccount",
        }
        
        class properties:
        
            @staticmethod
            def payeeAccount() -> typing.Type['PayeeAccount']:
                return PayeeAccount
        
            @staticmethod
            def amount() -> typing.Type['InstructionAmount']:
                return InstructionAmount
            id = schemas.StrSchema
            __annotations__ = {
                "payeeAccount": payeeAccount,
                "amount": amount,
                "id": id,
            }
    
    amount: 'InstructionAmount'
    payeeAccount: 'PayeeAccount'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payeeAccount"]) -> 'PayeeAccount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'InstructionAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payeeAccount", "amount", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payeeAccount"]) -> 'PayeeAccount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'InstructionAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payeeAccount", "amount", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'InstructionAmount',
        payeeAccount: 'PayeeAccount',
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayoutInstruction':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            payeeAccount=payeeAccount,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.instruction_amount import InstructionAmount
from fireblocks_client.model.payee_account import PayeeAccount
