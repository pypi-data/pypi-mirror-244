# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class TravelRulePiiIVMS(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "placeOfBirth",
            "address",
            "nationality",
            "fullName",
            "identificationNumber",
            "dateOfBirth",
            "countryOfResidence",
            "customerNumber",
            "taxIdentificationNumber",
        }
        
        class properties:
            fullName = schemas.StrSchema
            dateOfBirth = schemas.StrSchema
            placeOfBirth = schemas.StrSchema
            address = schemas.StrSchema
            identificationNumber = schemas.StrSchema
            nationality = schemas.StrSchema
            countryOfResidence = schemas.StrSchema
            taxIdentificationNumber = schemas.StrSchema
            customerNumber = schemas.StrSchema
            __annotations__ = {
                "fullName": fullName,
                "dateOfBirth": dateOfBirth,
                "placeOfBirth": placeOfBirth,
                "address": address,
                "identificationNumber": identificationNumber,
                "nationality": nationality,
                "countryOfResidence": countryOfResidence,
                "taxIdentificationNumber": taxIdentificationNumber,
                "customerNumber": customerNumber,
            }
    
    placeOfBirth: MetaOapg.properties.placeOfBirth
    address: MetaOapg.properties.address
    nationality: MetaOapg.properties.nationality
    fullName: MetaOapg.properties.fullName
    identificationNumber: MetaOapg.properties.identificationNumber
    dateOfBirth: MetaOapg.properties.dateOfBirth
    countryOfResidence: MetaOapg.properties.countryOfResidence
    customerNumber: MetaOapg.properties.customerNumber
    taxIdentificationNumber: MetaOapg.properties.taxIdentificationNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placeOfBirth"]) -> MetaOapg.properties.placeOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identificationNumber"]) -> MetaOapg.properties.identificationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryOfResidence"]) -> MetaOapg.properties.countryOfResidence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxIdentificationNumber"]) -> MetaOapg.properties.taxIdentificationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerNumber"]) -> MetaOapg.properties.customerNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fullName", "dateOfBirth", "placeOfBirth", "address", "identificationNumber", "nationality", "countryOfResidence", "taxIdentificationNumber", "customerNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placeOfBirth"]) -> MetaOapg.properties.placeOfBirth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identificationNumber"]) -> MetaOapg.properties.identificationNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryOfResidence"]) -> MetaOapg.properties.countryOfResidence: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxIdentificationNumber"]) -> MetaOapg.properties.taxIdentificationNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerNumber"]) -> MetaOapg.properties.customerNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fullName", "dateOfBirth", "placeOfBirth", "address", "identificationNumber", "nationality", "countryOfResidence", "taxIdentificationNumber", "customerNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        placeOfBirth: typing.Union[MetaOapg.properties.placeOfBirth, str, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        nationality: typing.Union[MetaOapg.properties.nationality, str, ],
        fullName: typing.Union[MetaOapg.properties.fullName, str, ],
        identificationNumber: typing.Union[MetaOapg.properties.identificationNumber, str, ],
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, str, ],
        countryOfResidence: typing.Union[MetaOapg.properties.countryOfResidence, str, ],
        customerNumber: typing.Union[MetaOapg.properties.customerNumber, str, ],
        taxIdentificationNumber: typing.Union[MetaOapg.properties.taxIdentificationNumber, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TravelRulePiiIVMS':
        return super().__new__(
            cls,
            *_args,
            placeOfBirth=placeOfBirth,
            address=address,
            nationality=nationality,
            fullName=fullName,
            identificationNumber=identificationNumber,
            dateOfBirth=dateOfBirth,
            countryOfResidence=countryOfResidence,
            customerNumber=customerNumber,
            taxIdentificationNumber=taxIdentificationNumber,
            _configuration=_configuration,
            **kwargs,
        )
