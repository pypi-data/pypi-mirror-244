# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class SessionMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "appUrl",
        }
        
        class properties:
            appUrl = schemas.StrSchema
            appName = schemas.StrSchema
            appDescription = schemas.StrSchema
            appIcon = schemas.StrSchema
            __annotations__ = {
                "appUrl": appUrl,
                "appName": appName,
                "appDescription": appDescription,
                "appIcon": appIcon,
            }
    
    appUrl: MetaOapg.properties.appUrl
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appUrl"]) -> MetaOapg.properties.appUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appName"]) -> MetaOapg.properties.appName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appDescription"]) -> MetaOapg.properties.appDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appIcon"]) -> MetaOapg.properties.appIcon: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["appUrl", "appName", "appDescription", "appIcon", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appUrl"]) -> MetaOapg.properties.appUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appName"]) -> typing.Union[MetaOapg.properties.appName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appDescription"]) -> typing.Union[MetaOapg.properties.appDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appIcon"]) -> typing.Union[MetaOapg.properties.appIcon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["appUrl", "appName", "appDescription", "appIcon", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        appUrl: typing.Union[MetaOapg.properties.appUrl, str, ],
        appName: typing.Union[MetaOapg.properties.appName, str, schemas.Unset] = schemas.unset,
        appDescription: typing.Union[MetaOapg.properties.appDescription, str, schemas.Unset] = schemas.unset,
        appIcon: typing.Union[MetaOapg.properties.appIcon, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SessionMetadata':
        return super().__new__(
            cls,
            *_args,
            appUrl=appUrl,
            appName=appName,
            appDescription=appDescription,
            appIcon=appIcon,
            _configuration=_configuration,
            **kwargs,
        )
