# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class CreateVaultAssetResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            address = schemas.StrSchema
            legacyAddress = schemas.StrSchema
            enterpriseAddress = schemas.StrSchema
            tag = schemas.StrSchema
            eosAccountName = schemas.StrSchema
            status = schemas.StrSchema
            activationTxId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "address": address,
                "legacyAddress": legacyAddress,
                "enterpriseAddress": enterpriseAddress,
                "tag": tag,
                "eosAccountName": eosAccountName,
                "status": status,
                "activationTxId": activationTxId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacyAddress"]) -> MetaOapg.properties.legacyAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enterpriseAddress"]) -> MetaOapg.properties.enterpriseAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eosAccountName"]) -> MetaOapg.properties.eosAccountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activationTxId"]) -> MetaOapg.properties.activationTxId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "address", "legacyAddress", "enterpriseAddress", "tag", "eosAccountName", "status", "activationTxId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacyAddress"]) -> typing.Union[MetaOapg.properties.legacyAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enterpriseAddress"]) -> typing.Union[MetaOapg.properties.enterpriseAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eosAccountName"]) -> typing.Union[MetaOapg.properties.eosAccountName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activationTxId"]) -> typing.Union[MetaOapg.properties.activationTxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "address", "legacyAddress", "enterpriseAddress", "tag", "eosAccountName", "status", "activationTxId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        legacyAddress: typing.Union[MetaOapg.properties.legacyAddress, str, schemas.Unset] = schemas.unset,
        enterpriseAddress: typing.Union[MetaOapg.properties.enterpriseAddress, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        eosAccountName: typing.Union[MetaOapg.properties.eosAccountName, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        activationTxId: typing.Union[MetaOapg.properties.activationTxId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateVaultAssetResponse':
        return super().__new__(
            cls,
            *_args,
            id=id,
            address=address,
            legacyAddress=legacyAddress,
            enterpriseAddress=enterpriseAddress,
            tag=tag,
            eosAccountName=eosAccountName,
            status=status,
            activationTxId=activationTxId,
            _configuration=_configuration,
            **kwargs,
        )
