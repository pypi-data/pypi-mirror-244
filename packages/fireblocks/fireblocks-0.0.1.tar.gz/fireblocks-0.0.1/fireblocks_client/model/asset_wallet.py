# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class AssetWallet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            vaultId = schemas.StrSchema
            assetId = schemas.StrSchema
            available = schemas.StrSchema
            total = schemas.StrSchema
            pending = schemas.StrSchema
            staked = schemas.StrSchema
            frozen = schemas.StrSchema
            lockedAmount = schemas.StrSchema
            blockHeight = schemas.StrSchema
            blockHash = schemas.StrSchema
            creationTimestamp = schemas.StrSchema
            __annotations__ = {
                "vaultId": vaultId,
                "assetId": assetId,
                "available": available,
                "total": total,
                "pending": pending,
                "staked": staked,
                "frozen": frozen,
                "lockedAmount": lockedAmount,
                "blockHeight": blockHeight,
                "blockHash": blockHash,
                "creationTimestamp": creationTimestamp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vaultId"]) -> MetaOapg.properties.vaultId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available"]) -> MetaOapg.properties.available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staked"]) -> MetaOapg.properties.staked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frozen"]) -> MetaOapg.properties.frozen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockedAmount"]) -> MetaOapg.properties.lockedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockHeight"]) -> MetaOapg.properties.blockHeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockHash"]) -> MetaOapg.properties.blockHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTimestamp"]) -> MetaOapg.properties.creationTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vaultId", "assetId", "available", "total", "pending", "staked", "frozen", "lockedAmount", "blockHeight", "blockHash", "creationTimestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vaultId"]) -> typing.Union[MetaOapg.properties.vaultId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available"]) -> typing.Union[MetaOapg.properties.available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> typing.Union[MetaOapg.properties.pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staked"]) -> typing.Union[MetaOapg.properties.staked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frozen"]) -> typing.Union[MetaOapg.properties.frozen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockedAmount"]) -> typing.Union[MetaOapg.properties.lockedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockHeight"]) -> typing.Union[MetaOapg.properties.blockHeight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockHash"]) -> typing.Union[MetaOapg.properties.blockHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTimestamp"]) -> typing.Union[MetaOapg.properties.creationTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vaultId", "assetId", "available", "total", "pending", "staked", "frozen", "lockedAmount", "blockHeight", "blockHash", "creationTimestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        vaultId: typing.Union[MetaOapg.properties.vaultId, str, schemas.Unset] = schemas.unset,
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        available: typing.Union[MetaOapg.properties.available, str, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, str, schemas.Unset] = schemas.unset,
        pending: typing.Union[MetaOapg.properties.pending, str, schemas.Unset] = schemas.unset,
        staked: typing.Union[MetaOapg.properties.staked, str, schemas.Unset] = schemas.unset,
        frozen: typing.Union[MetaOapg.properties.frozen, str, schemas.Unset] = schemas.unset,
        lockedAmount: typing.Union[MetaOapg.properties.lockedAmount, str, schemas.Unset] = schemas.unset,
        blockHeight: typing.Union[MetaOapg.properties.blockHeight, str, schemas.Unset] = schemas.unset,
        blockHash: typing.Union[MetaOapg.properties.blockHash, str, schemas.Unset] = schemas.unset,
        creationTimestamp: typing.Union[MetaOapg.properties.creationTimestamp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssetWallet':
        return super().__new__(
            cls,
            *_args,
            vaultId=vaultId,
            assetId=assetId,
            available=available,
            total=total,
            pending=pending,
            staked=staked,
            frozen=frozen,
            lockedAmount=lockedAmount,
            blockHeight=blockHeight,
            blockHash=blockHash,
            creationTimestamp=creationTimestamp,
            _configuration=_configuration,
            **kwargs,
        )
