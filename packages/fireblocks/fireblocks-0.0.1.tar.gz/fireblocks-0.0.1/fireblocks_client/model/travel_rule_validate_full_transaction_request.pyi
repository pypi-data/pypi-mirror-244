# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class TravelRuleValidateFullTransactionRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "originatorProof",
            "transactionAsset",
            "originator",
            "notificationEmail",
            "beneficiaryVASPname",
            "pii",
            "protocol",
            "skipBeneficiaryDataValidation",
            "beneficiary",
            "encrypted",
            "originatorDid",
            "transactionAmount",
            "travelRuleBehavior",
            "transactionBlockchainInfo",
            "beneficiaryProof",
            "beneficiaryDid",
            "originatorVASPdid",
            "beneficiaryVASPdid",
        }
        
        class properties:
            transactionAsset = schemas.StrSchema
            transactionAmount = schemas.StrSchema
            originatorDid = schemas.StrSchema
            beneficiaryDid = schemas.StrSchema
            originatorVASPdid = schemas.StrSchema
            beneficiaryVASPdid = schemas.StrSchema
            beneficiaryVASPname = schemas.StrSchema
            
            
            class transactionBlockchainInfo(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TravelRuleTransactionBlockchainInfo,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'transactionBlockchainInfo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class originator(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TravelRulePiiIVMS,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'originator':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class beneficiary(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TravelRulePiiIVMS,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'beneficiary':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            encrypted = schemas.StrSchema
            protocol = schemas.StrSchema
            notificationEmail = schemas.StrSchema
            skipBeneficiaryDataValidation = schemas.BoolSchema
            travelRuleBehavior = schemas.BoolSchema
            
            
            class originatorProof(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TravelRuleOwnershipProof,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'originatorProof':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class beneficiaryProof(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TravelRuleOwnershipProof,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'beneficiaryProof':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class pii(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TravelRulePiiIVMS,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'pii':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "transactionAsset": transactionAsset,
                "transactionAmount": transactionAmount,
                "originatorDid": originatorDid,
                "beneficiaryDid": beneficiaryDid,
                "originatorVASPdid": originatorVASPdid,
                "beneficiaryVASPdid": beneficiaryVASPdid,
                "beneficiaryVASPname": beneficiaryVASPname,
                "transactionBlockchainInfo": transactionBlockchainInfo,
                "originator": originator,
                "beneficiary": beneficiary,
                "encrypted": encrypted,
                "protocol": protocol,
                "notificationEmail": notificationEmail,
                "skipBeneficiaryDataValidation": skipBeneficiaryDataValidation,
                "travelRuleBehavior": travelRuleBehavior,
                "originatorProof": originatorProof,
                "beneficiaryProof": beneficiaryProof,
                "pii": pii,
            }
    
    originatorProof: MetaOapg.properties.originatorProof
    transactionAsset: MetaOapg.properties.transactionAsset
    originator: MetaOapg.properties.originator
    notificationEmail: MetaOapg.properties.notificationEmail
    beneficiaryVASPname: MetaOapg.properties.beneficiaryVASPname
    pii: MetaOapg.properties.pii
    protocol: MetaOapg.properties.protocol
    skipBeneficiaryDataValidation: MetaOapg.properties.skipBeneficiaryDataValidation
    beneficiary: MetaOapg.properties.beneficiary
    encrypted: MetaOapg.properties.encrypted
    originatorDid: MetaOapg.properties.originatorDid
    transactionAmount: MetaOapg.properties.transactionAmount
    travelRuleBehavior: MetaOapg.properties.travelRuleBehavior
    transactionBlockchainInfo: MetaOapg.properties.transactionBlockchainInfo
    beneficiaryProof: MetaOapg.properties.beneficiaryProof
    beneficiaryDid: MetaOapg.properties.beneficiaryDid
    originatorVASPdid: MetaOapg.properties.originatorVASPdid
    beneficiaryVASPdid: MetaOapg.properties.beneficiaryVASPdid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionAsset"]) -> MetaOapg.properties.transactionAsset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionAmount"]) -> MetaOapg.properties.transactionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originatorDid"]) -> MetaOapg.properties.originatorDid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryDid"]) -> MetaOapg.properties.beneficiaryDid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originatorVASPdid"]) -> MetaOapg.properties.originatorVASPdid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryVASPdid"]) -> MetaOapg.properties.beneficiaryVASPdid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryVASPname"]) -> MetaOapg.properties.beneficiaryVASPname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionBlockchainInfo"]) -> MetaOapg.properties.transactionBlockchainInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originator"]) -> MetaOapg.properties.originator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiary"]) -> MetaOapg.properties.beneficiary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encrypted"]) -> MetaOapg.properties.encrypted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> MetaOapg.properties.protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationEmail"]) -> MetaOapg.properties.notificationEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skipBeneficiaryDataValidation"]) -> MetaOapg.properties.skipBeneficiaryDataValidation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travelRuleBehavior"]) -> MetaOapg.properties.travelRuleBehavior: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originatorProof"]) -> MetaOapg.properties.originatorProof: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryProof"]) -> MetaOapg.properties.beneficiaryProof: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pii"]) -> MetaOapg.properties.pii: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactionAsset", "transactionAmount", "originatorDid", "beneficiaryDid", "originatorVASPdid", "beneficiaryVASPdid", "beneficiaryVASPname", "transactionBlockchainInfo", "originator", "beneficiary", "encrypted", "protocol", "notificationEmail", "skipBeneficiaryDataValidation", "travelRuleBehavior", "originatorProof", "beneficiaryProof", "pii", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionAsset"]) -> MetaOapg.properties.transactionAsset: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionAmount"]) -> MetaOapg.properties.transactionAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originatorDid"]) -> MetaOapg.properties.originatorDid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryDid"]) -> MetaOapg.properties.beneficiaryDid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originatorVASPdid"]) -> MetaOapg.properties.originatorVASPdid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryVASPdid"]) -> MetaOapg.properties.beneficiaryVASPdid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryVASPname"]) -> MetaOapg.properties.beneficiaryVASPname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionBlockchainInfo"]) -> MetaOapg.properties.transactionBlockchainInfo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originator"]) -> MetaOapg.properties.originator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiary"]) -> MetaOapg.properties.beneficiary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encrypted"]) -> MetaOapg.properties.encrypted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> MetaOapg.properties.protocol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationEmail"]) -> MetaOapg.properties.notificationEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skipBeneficiaryDataValidation"]) -> MetaOapg.properties.skipBeneficiaryDataValidation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travelRuleBehavior"]) -> MetaOapg.properties.travelRuleBehavior: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originatorProof"]) -> MetaOapg.properties.originatorProof: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryProof"]) -> MetaOapg.properties.beneficiaryProof: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pii"]) -> MetaOapg.properties.pii: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactionAsset", "transactionAmount", "originatorDid", "beneficiaryDid", "originatorVASPdid", "beneficiaryVASPdid", "beneficiaryVASPname", "transactionBlockchainInfo", "originator", "beneficiary", "encrypted", "protocol", "notificationEmail", "skipBeneficiaryDataValidation", "travelRuleBehavior", "originatorProof", "beneficiaryProof", "pii", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        originatorProof: typing.Union[MetaOapg.properties.originatorProof, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        transactionAsset: typing.Union[MetaOapg.properties.transactionAsset, str, ],
        originator: typing.Union[MetaOapg.properties.originator, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        notificationEmail: typing.Union[MetaOapg.properties.notificationEmail, str, ],
        beneficiaryVASPname: typing.Union[MetaOapg.properties.beneficiaryVASPname, str, ],
        pii: typing.Union[MetaOapg.properties.pii, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        protocol: typing.Union[MetaOapg.properties.protocol, str, ],
        skipBeneficiaryDataValidation: typing.Union[MetaOapg.properties.skipBeneficiaryDataValidation, bool, ],
        beneficiary: typing.Union[MetaOapg.properties.beneficiary, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        encrypted: typing.Union[MetaOapg.properties.encrypted, str, ],
        originatorDid: typing.Union[MetaOapg.properties.originatorDid, str, ],
        transactionAmount: typing.Union[MetaOapg.properties.transactionAmount, str, ],
        travelRuleBehavior: typing.Union[MetaOapg.properties.travelRuleBehavior, bool, ],
        transactionBlockchainInfo: typing.Union[MetaOapg.properties.transactionBlockchainInfo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        beneficiaryProof: typing.Union[MetaOapg.properties.beneficiaryProof, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        beneficiaryDid: typing.Union[MetaOapg.properties.beneficiaryDid, str, ],
        originatorVASPdid: typing.Union[MetaOapg.properties.originatorVASPdid, str, ],
        beneficiaryVASPdid: typing.Union[MetaOapg.properties.beneficiaryVASPdid, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TravelRuleValidateFullTransactionRequest':
        return super().__new__(
            cls,
            *_args,
            originatorProof=originatorProof,
            transactionAsset=transactionAsset,
            originator=originator,
            notificationEmail=notificationEmail,
            beneficiaryVASPname=beneficiaryVASPname,
            pii=pii,
            protocol=protocol,
            skipBeneficiaryDataValidation=skipBeneficiaryDataValidation,
            beneficiary=beneficiary,
            encrypted=encrypted,
            originatorDid=originatorDid,
            transactionAmount=transactionAmount,
            travelRuleBehavior=travelRuleBehavior,
            transactionBlockchainInfo=transactionBlockchainInfo,
            beneficiaryProof=beneficiaryProof,
            beneficiaryDid=beneficiaryDid,
            originatorVASPdid=originatorVASPdid,
            beneficiaryVASPdid=beneficiaryVASPdid,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.travel_rule_ownership_proof import TravelRuleOwnershipProof
from fireblocks_client.model.travel_rule_pii_ivms import TravelRulePiiIVMS
from fireblocks_client.model.travel_rule_transaction_blockchain_info import TravelRuleTransactionBlockchainInfo
