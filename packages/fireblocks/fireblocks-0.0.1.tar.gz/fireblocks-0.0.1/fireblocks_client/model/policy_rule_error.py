# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class PolicyRuleError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Rule validation result error
    """


    class MetaOapg:
        required = {
            "errorCodeName",
            "errorField",
            "errorMessage",
            "errorCode",
        }
        
        class properties:
            errorMessage = schemas.StrSchema
            errorCode = schemas.NumberSchema
            errorCodeName = schemas.StrSchema
            
            
            class errorField(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "operator": "OPERATOR",
                        "operators": "OPERATORS",
                        "authorizationGroups": "AUTHORIZATION_GROUPS",
                        "designatedSigner": "DESIGNATED_SIGNER",
                        "designatedSigners": "DESIGNATED_SIGNERS",
                        "contractMethods": "CONTRACT_METHODS",
                        "amountAggregation": "AMOUNT_AGGREGATION",
                        "src": "SRC",
                        "dst": "DST",
                    }
                
                @schemas.classproperty
                def OPERATOR(cls):
                    return cls("operator")
                
                @schemas.classproperty
                def OPERATORS(cls):
                    return cls("operators")
                
                @schemas.classproperty
                def AUTHORIZATION_GROUPS(cls):
                    return cls("authorizationGroups")
                
                @schemas.classproperty
                def DESIGNATED_SIGNER(cls):
                    return cls("designatedSigner")
                
                @schemas.classproperty
                def DESIGNATED_SIGNERS(cls):
                    return cls("designatedSigners")
                
                @schemas.classproperty
                def CONTRACT_METHODS(cls):
                    return cls("contractMethods")
                
                @schemas.classproperty
                def AMOUNT_AGGREGATION(cls):
                    return cls("amountAggregation")
                
                @schemas.classproperty
                def SRC(cls):
                    return cls("src")
                
                @schemas.classproperty
                def DST(cls):
                    return cls("dst")
            __annotations__ = {
                "errorMessage": errorMessage,
                "errorCode": errorCode,
                "errorCodeName": errorCodeName,
                "errorField": errorField,
            }
    
    errorCodeName: MetaOapg.properties.errorCodeName
    errorField: MetaOapg.properties.errorField
    errorMessage: MetaOapg.properties.errorMessage
    errorCode: MetaOapg.properties.errorCode
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessage"]) -> MetaOapg.properties.errorMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCodeName"]) -> MetaOapg.properties.errorCodeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorField"]) -> MetaOapg.properties.errorField: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorMessage", "errorCode", "errorCodeName", "errorField", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessage"]) -> MetaOapg.properties.errorMessage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCodeName"]) -> MetaOapg.properties.errorCodeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorField"]) -> MetaOapg.properties.errorField: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorMessage", "errorCode", "errorCodeName", "errorField", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCodeName: typing.Union[MetaOapg.properties.errorCodeName, str, ],
        errorField: typing.Union[MetaOapg.properties.errorField, str, ],
        errorMessage: typing.Union[MetaOapg.properties.errorMessage, str, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PolicyRuleError':
        return super().__new__(
            cls,
            *_args,
            errorCodeName=errorCodeName,
            errorField=errorField,
            errorMessage=errorMessage,
            errorCode=errorCode,
            _configuration=_configuration,
            **kwargs,
        )
