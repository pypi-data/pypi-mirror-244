# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class VaultAsset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            total = schemas.StrSchema
            balance = schemas.StrSchema
            available = schemas.StrSchema
            pending = schemas.StrSchema
            frozen = schemas.StrSchema
            lockedAmount = schemas.StrSchema
            staked = schemas.StrSchema
            totalStakedCPU = schemas.NumberSchema
            totalStakedNetwork = schemas.StrSchema
            selfStakedCPU = schemas.StrSchema
            selfStakedNetwork = schemas.StrSchema
            pendingRefundCPU = schemas.StrSchema
            pendingRefundNetwork = schemas.StrSchema
            blockHeight = schemas.StrSchema
            blockHash = schemas.StrSchema
        
            @staticmethod
            def rewardsInfo() -> typing.Type['RewardsInfo']:
                return RewardsInfo
            __annotations__ = {
                "id": id,
                "total": total,
                "balance": balance,
                "available": available,
                "pending": pending,
                "frozen": frozen,
                "lockedAmount": lockedAmount,
                "staked": staked,
                "totalStakedCPU": totalStakedCPU,
                "totalStakedNetwork": totalStakedNetwork,
                "selfStakedCPU": selfStakedCPU,
                "selfStakedNetwork": selfStakedNetwork,
                "pendingRefundCPU": pendingRefundCPU,
                "pendingRefundNetwork": pendingRefundNetwork,
                "blockHeight": blockHeight,
                "blockHash": blockHash,
                "rewardsInfo": rewardsInfo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available"]) -> MetaOapg.properties.available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frozen"]) -> MetaOapg.properties.frozen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockedAmount"]) -> MetaOapg.properties.lockedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staked"]) -> MetaOapg.properties.staked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalStakedCPU"]) -> MetaOapg.properties.totalStakedCPU: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalStakedNetwork"]) -> MetaOapg.properties.totalStakedNetwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfStakedCPU"]) -> MetaOapg.properties.selfStakedCPU: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfStakedNetwork"]) -> MetaOapg.properties.selfStakedNetwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pendingRefundCPU"]) -> MetaOapg.properties.pendingRefundCPU: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pendingRefundNetwork"]) -> MetaOapg.properties.pendingRefundNetwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockHeight"]) -> MetaOapg.properties.blockHeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockHash"]) -> MetaOapg.properties.blockHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewardsInfo"]) -> 'RewardsInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "total", "balance", "available", "pending", "frozen", "lockedAmount", "staked", "totalStakedCPU", "totalStakedNetwork", "selfStakedCPU", "selfStakedNetwork", "pendingRefundCPU", "pendingRefundNetwork", "blockHeight", "blockHash", "rewardsInfo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available"]) -> typing.Union[MetaOapg.properties.available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> typing.Union[MetaOapg.properties.pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frozen"]) -> typing.Union[MetaOapg.properties.frozen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockedAmount"]) -> typing.Union[MetaOapg.properties.lockedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staked"]) -> typing.Union[MetaOapg.properties.staked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalStakedCPU"]) -> typing.Union[MetaOapg.properties.totalStakedCPU, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalStakedNetwork"]) -> typing.Union[MetaOapg.properties.totalStakedNetwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfStakedCPU"]) -> typing.Union[MetaOapg.properties.selfStakedCPU, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfStakedNetwork"]) -> typing.Union[MetaOapg.properties.selfStakedNetwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pendingRefundCPU"]) -> typing.Union[MetaOapg.properties.pendingRefundCPU, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pendingRefundNetwork"]) -> typing.Union[MetaOapg.properties.pendingRefundNetwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockHeight"]) -> typing.Union[MetaOapg.properties.blockHeight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockHash"]) -> typing.Union[MetaOapg.properties.blockHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewardsInfo"]) -> typing.Union['RewardsInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "total", "balance", "available", "pending", "frozen", "lockedAmount", "staked", "totalStakedCPU", "totalStakedNetwork", "selfStakedCPU", "selfStakedNetwork", "pendingRefundCPU", "pendingRefundNetwork", "blockHeight", "blockHash", "rewardsInfo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, str, schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, str, schemas.Unset] = schemas.unset,
        available: typing.Union[MetaOapg.properties.available, str, schemas.Unset] = schemas.unset,
        pending: typing.Union[MetaOapg.properties.pending, str, schemas.Unset] = schemas.unset,
        frozen: typing.Union[MetaOapg.properties.frozen, str, schemas.Unset] = schemas.unset,
        lockedAmount: typing.Union[MetaOapg.properties.lockedAmount, str, schemas.Unset] = schemas.unset,
        staked: typing.Union[MetaOapg.properties.staked, str, schemas.Unset] = schemas.unset,
        totalStakedCPU: typing.Union[MetaOapg.properties.totalStakedCPU, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalStakedNetwork: typing.Union[MetaOapg.properties.totalStakedNetwork, str, schemas.Unset] = schemas.unset,
        selfStakedCPU: typing.Union[MetaOapg.properties.selfStakedCPU, str, schemas.Unset] = schemas.unset,
        selfStakedNetwork: typing.Union[MetaOapg.properties.selfStakedNetwork, str, schemas.Unset] = schemas.unset,
        pendingRefundCPU: typing.Union[MetaOapg.properties.pendingRefundCPU, str, schemas.Unset] = schemas.unset,
        pendingRefundNetwork: typing.Union[MetaOapg.properties.pendingRefundNetwork, str, schemas.Unset] = schemas.unset,
        blockHeight: typing.Union[MetaOapg.properties.blockHeight, str, schemas.Unset] = schemas.unset,
        blockHash: typing.Union[MetaOapg.properties.blockHash, str, schemas.Unset] = schemas.unset,
        rewardsInfo: typing.Union['RewardsInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VaultAsset':
        return super().__new__(
            cls,
            *_args,
            id=id,
            total=total,
            balance=balance,
            available=available,
            pending=pending,
            frozen=frozen,
            lockedAmount=lockedAmount,
            staked=staked,
            totalStakedCPU=totalStakedCPU,
            totalStakedNetwork=totalStakedNetwork,
            selfStakedCPU=selfStakedCPU,
            selfStakedNetwork=selfStakedNetwork,
            pendingRefundCPU=pendingRefundCPU,
            pendingRefundNetwork=pendingRefundNetwork,
            blockHeight=blockHeight,
            blockHash=blockHash,
            rewardsInfo=rewardsInfo,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.rewards_info import RewardsInfo
