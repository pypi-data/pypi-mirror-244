# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class SignedMessage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A list of signed messages returned for raw signing.
    """


    class MetaOapg:
        
        class properties:
            content = schemas.StrSchema
            
            
            class algorithm(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ECDSA_SECP256K1(cls):
                    return cls("MPC_ECDSA_SECP256K1")
                
                @schemas.classproperty
                def EDDSA_ED25519(cls):
                    return cls("MPC_EDDSA_ED25519")
            
            
            class derivationPath(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'derivationPath':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class signature(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        fullSig = schemas.StrSchema
                        r = schemas.StrSchema
                        s = schemas.StrSchema
                        v = schemas.NumberSchema
                        __annotations__ = {
                            "fullSig": fullSig,
                            "r": r,
                            "s": s,
                            "v": v,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fullSig"]) -> MetaOapg.properties.fullSig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["r"]) -> MetaOapg.properties.r: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["s"]) -> MetaOapg.properties.s: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["v"]) -> MetaOapg.properties.v: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["fullSig", "r", "s", "v", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fullSig"]) -> typing.Union[MetaOapg.properties.fullSig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["r"]) -> typing.Union[MetaOapg.properties.r, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["s"]) -> typing.Union[MetaOapg.properties.s, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["v"]) -> typing.Union[MetaOapg.properties.v, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fullSig", "r", "s", "v", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    fullSig: typing.Union[MetaOapg.properties.fullSig, str, schemas.Unset] = schemas.unset,
                    r: typing.Union[MetaOapg.properties.r, str, schemas.Unset] = schemas.unset,
                    s: typing.Union[MetaOapg.properties.s, str, schemas.Unset] = schemas.unset,
                    v: typing.Union[MetaOapg.properties.v, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'signature':
                    return super().__new__(
                        cls,
                        *_args,
                        fullSig=fullSig,
                        r=r,
                        s=s,
                        v=v,
                        _configuration=_configuration,
                        **kwargs,
                    )
            publicKey = schemas.StrSchema
            __annotations__ = {
                "content": content,
                "algorithm": algorithm,
                "derivationPath": derivationPath,
                "signature": signature,
                "publicKey": publicKey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["algorithm"]) -> MetaOapg.properties.algorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derivationPath"]) -> MetaOapg.properties.derivationPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicKey"]) -> MetaOapg.properties.publicKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["content", "algorithm", "derivationPath", "signature", "publicKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["algorithm"]) -> typing.Union[MetaOapg.properties.algorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derivationPath"]) -> typing.Union[MetaOapg.properties.derivationPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> typing.Union[MetaOapg.properties.signature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicKey"]) -> typing.Union[MetaOapg.properties.publicKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["content", "algorithm", "derivationPath", "signature", "publicKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        algorithm: typing.Union[MetaOapg.properties.algorithm, str, schemas.Unset] = schemas.unset,
        derivationPath: typing.Union[MetaOapg.properties.derivationPath, list, tuple, schemas.Unset] = schemas.unset,
        signature: typing.Union[MetaOapg.properties.signature, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        publicKey: typing.Union[MetaOapg.properties.publicKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignedMessage':
        return super().__new__(
            cls,
            *_args,
            content=content,
            algorithm=algorithm,
            derivationPath=derivationPath,
            signature=signature,
            publicKey=publicKey,
            _configuration=_configuration,
            **kwargs,
        )
