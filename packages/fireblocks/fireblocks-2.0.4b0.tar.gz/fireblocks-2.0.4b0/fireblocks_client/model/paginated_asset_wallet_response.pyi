# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class PaginatedAssetWalletResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class assetWallets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AssetWallet']:
                        return AssetWallet
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AssetWallet'], typing.List['AssetWallet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assetWallets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AssetWallet':
                    return super().__getitem__(i)
            
            
            class paging(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        before = schemas.StrSchema
                        after = schemas.StrSchema
                        __annotations__ = {
                            "before": before,
                            "after": after,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["before"]) -> MetaOapg.properties.before: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["after"]) -> MetaOapg.properties.after: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["before", "after", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["before"]) -> typing.Union[MetaOapg.properties.before, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["after"]) -> typing.Union[MetaOapg.properties.after, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["before", "after", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    before: typing.Union[MetaOapg.properties.before, str, schemas.Unset] = schemas.unset,
                    after: typing.Union[MetaOapg.properties.after, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'paging':
                    return super().__new__(
                        cls,
                        *_args,
                        before=before,
                        after=after,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "assetWallets": assetWallets,
                "paging": paging,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetWallets"]) -> MetaOapg.properties.assetWallets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paging"]) -> MetaOapg.properties.paging: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetWallets", "paging", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetWallets"]) -> typing.Union[MetaOapg.properties.assetWallets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paging"]) -> typing.Union[MetaOapg.properties.paging, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetWallets", "paging", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        assetWallets: typing.Union[MetaOapg.properties.assetWallets, list, tuple, schemas.Unset] = schemas.unset,
        paging: typing.Union[MetaOapg.properties.paging, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaginatedAssetWalletResponse':
        return super().__new__(
            cls,
            *_args,
            assetWallets=assetWallets,
            paging=paging,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.asset_wallet import AssetWallet
