# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class TravelRuleValidateTransactionResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "beneficiaryVASPname",
            "addressSource",
            "beneficiaryAddressType",
            "isValid",
            "warnings",
            "type",
            "beneficiaryVASPdid",
        }
        
        class properties:
            isValid = schemas.BoolSchema
            type = schemas.StrSchema
            beneficiaryAddressType = schemas.StrSchema
            addressSource = schemas.StrSchema
            beneficiaryVASPdid = schemas.StrSchema
            beneficiaryVASPname = schemas.StrSchema
            
            
            class warnings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'warnings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "isValid": isValid,
                "type": type,
                "beneficiaryAddressType": beneficiaryAddressType,
                "addressSource": addressSource,
                "beneficiaryVASPdid": beneficiaryVASPdid,
                "beneficiaryVASPname": beneficiaryVASPname,
                "warnings": warnings,
            }
    
    beneficiaryVASPname: MetaOapg.properties.beneficiaryVASPname
    addressSource: MetaOapg.properties.addressSource
    beneficiaryAddressType: MetaOapg.properties.beneficiaryAddressType
    isValid: MetaOapg.properties.isValid
    warnings: MetaOapg.properties.warnings
    type: MetaOapg.properties.type
    beneficiaryVASPdid: MetaOapg.properties.beneficiaryVASPdid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isValid"]) -> MetaOapg.properties.isValid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryAddressType"]) -> MetaOapg.properties.beneficiaryAddressType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressSource"]) -> MetaOapg.properties.addressSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryVASPdid"]) -> MetaOapg.properties.beneficiaryVASPdid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryVASPname"]) -> MetaOapg.properties.beneficiaryVASPname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warnings"]) -> MetaOapg.properties.warnings: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isValid", "type", "beneficiaryAddressType", "addressSource", "beneficiaryVASPdid", "beneficiaryVASPname", "warnings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isValid"]) -> MetaOapg.properties.isValid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryAddressType"]) -> MetaOapg.properties.beneficiaryAddressType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressSource"]) -> MetaOapg.properties.addressSource: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryVASPdid"]) -> MetaOapg.properties.beneficiaryVASPdid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryVASPname"]) -> MetaOapg.properties.beneficiaryVASPname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warnings"]) -> MetaOapg.properties.warnings: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isValid", "type", "beneficiaryAddressType", "addressSource", "beneficiaryVASPdid", "beneficiaryVASPname", "warnings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        beneficiaryVASPname: typing.Union[MetaOapg.properties.beneficiaryVASPname, str, ],
        addressSource: typing.Union[MetaOapg.properties.addressSource, str, ],
        beneficiaryAddressType: typing.Union[MetaOapg.properties.beneficiaryAddressType, str, ],
        isValid: typing.Union[MetaOapg.properties.isValid, bool, ],
        warnings: typing.Union[MetaOapg.properties.warnings, list, tuple, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        beneficiaryVASPdid: typing.Union[MetaOapg.properties.beneficiaryVASPdid, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TravelRuleValidateTransactionResponse':
        return super().__new__(
            cls,
            *_args,
            beneficiaryVASPname=beneficiaryVASPname,
            addressSource=addressSource,
            beneficiaryAddressType=beneficiaryAddressType,
            isValid=isValid,
            warnings=warnings,
            type=type,
            beneficiaryVASPdid=beneficiaryVASPdid,
            _configuration=_configuration,
            **kwargs,
        )
