# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class CreateConnectionRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "vaultAccountId",
            "chainIds",
            "feeLevel",
            "uri",
        }
        
        class properties:
            vaultAccountId = schemas.NumberSchema
            
            
            class feeLevel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MEDIUM(cls):
                    return cls("MEDIUM")
                
                @schemas.classproperty
                def HIGH(cls):
                    return cls("HIGH")
            uri = schemas.StrSchema
            
            
            class chainIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'chainIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "vaultAccountId": vaultAccountId,
                "feeLevel": feeLevel,
                "uri": uri,
                "chainIds": chainIds,
            }
    
    vaultAccountId: MetaOapg.properties.vaultAccountId
    chainIds: MetaOapg.properties.chainIds
    feeLevel: MetaOapg.properties.feeLevel
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vaultAccountId"]) -> MetaOapg.properties.vaultAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeLevel"]) -> MetaOapg.properties.feeLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chainIds"]) -> MetaOapg.properties.chainIds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vaultAccountId", "feeLevel", "uri", "chainIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vaultAccountId"]) -> MetaOapg.properties.vaultAccountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeLevel"]) -> MetaOapg.properties.feeLevel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chainIds"]) -> MetaOapg.properties.chainIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vaultAccountId", "feeLevel", "uri", "chainIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        vaultAccountId: typing.Union[MetaOapg.properties.vaultAccountId, decimal.Decimal, int, float, ],
        chainIds: typing.Union[MetaOapg.properties.chainIds, list, tuple, ],
        feeLevel: typing.Union[MetaOapg.properties.feeLevel, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateConnectionRequest':
        return super().__new__(
            cls,
            *_args,
            vaultAccountId=vaultAccountId,
            chainIds=chainIds,
            feeLevel=feeLevel,
            uri=uri,
            _configuration=_configuration,
            **kwargs,
        )
