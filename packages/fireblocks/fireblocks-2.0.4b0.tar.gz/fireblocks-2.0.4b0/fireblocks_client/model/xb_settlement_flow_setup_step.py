# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class XBSettlementFlowSetupStep(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "estimatedTime",
            "accountId",
            "estimatedFeeAmount",
            "outputAmount",
            "inputAmount",
            "isSignRequired",
        }
        
        class properties:
            accountId = schemas.StrSchema
        
            @staticmethod
            def inputAmount() -> typing.Type['XBSettlementAsset']:
                return XBSettlementAsset
        
            @staticmethod
            def outputAmount() -> typing.Type['XBSettlementAsset']:
                return XBSettlementAsset
        
            @staticmethod
            def estimatedFeeAmount() -> typing.Type['XBSettlementAsset']:
                return XBSettlementAsset
            estimatedTime = schemas.NumberSchema
            isSignRequired = schemas.BoolSchema
            __annotations__ = {
                "accountId": accountId,
                "inputAmount": inputAmount,
                "outputAmount": outputAmount,
                "estimatedFeeAmount": estimatedFeeAmount,
                "estimatedTime": estimatedTime,
                "isSignRequired": isSignRequired,
            }
    
    estimatedTime: MetaOapg.properties.estimatedTime
    accountId: MetaOapg.properties.accountId
    estimatedFeeAmount: 'XBSettlementAsset'
    outputAmount: 'XBSettlementAsset'
    inputAmount: 'XBSettlementAsset'
    isSignRequired: MetaOapg.properties.isSignRequired
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedFeeAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedTime"]) -> MetaOapg.properties.estimatedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSignRequired"]) -> MetaOapg.properties.isSignRequired: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountId", "inputAmount", "outputAmount", "estimatedFeeAmount", "estimatedTime", "isSignRequired", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedFeeAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedTime"]) -> MetaOapg.properties.estimatedTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSignRequired"]) -> MetaOapg.properties.isSignRequired: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountId", "inputAmount", "outputAmount", "estimatedFeeAmount", "estimatedTime", "isSignRequired", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        estimatedTime: typing.Union[MetaOapg.properties.estimatedTime, decimal.Decimal, int, float, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        estimatedFeeAmount: 'XBSettlementAsset',
        outputAmount: 'XBSettlementAsset',
        inputAmount: 'XBSettlementAsset',
        isSignRequired: typing.Union[MetaOapg.properties.isSignRequired, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XBSettlementFlowSetupStep':
        return super().__new__(
            cls,
            *_args,
            estimatedTime=estimatedTime,
            accountId=accountId,
            estimatedFeeAmount=estimatedFeeAmount,
            outputAmount=outputAmount,
            inputAmount=inputAmount,
            isSignRequired=isSignRequired,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.xb_settlement_asset import XBSettlementAsset
