# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class TransactionResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            externalTxId = schemas.StrSchema
            status = schemas.StrSchema
            subStatus = schemas.StrSchema
            txHash = schemas.StrSchema
        
            @staticmethod
            def operation() -> typing.Type['GetTransactionOperation']:
                return GetTransactionOperation
            note = schemas.StrSchema
            assetId = schemas.StrSchema
        
            @staticmethod
            def source() -> typing.Type['SourceTransferPeerPathResponse']:
                return SourceTransferPeerPathResponse
            sourceAddress = schemas.StrSchema
            tag = schemas.StrSchema
        
            @staticmethod
            def destination() -> typing.Type['DestinationTransferPeerPathResponse']:
                return DestinationTransferPeerPathResponse
            
            
            class destinations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionResponseDestination']:
                        return TransactionResponseDestination
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TransactionResponseDestination'], typing.List['TransactionResponseDestination']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destinations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransactionResponseDestination':
                    return super().__getitem__(i)
            destinationAddress = schemas.StrSchema
            destinationAddressDescription = schemas.StrSchema
            destinationTag = schemas.StrSchema
            
            
            class contractCallDecodedData(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        contractName = schemas.StrSchema
                        
                        
                        class functionCalls(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.DictSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'functionCalls':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "contractName": contractName,
                            "functionCalls": functionCalls,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["contractName"]) -> MetaOapg.properties.contractName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["functionCalls"]) -> MetaOapg.properties.functionCalls: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["contractName", "functionCalls", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["contractName"]) -> typing.Union[MetaOapg.properties.contractName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["functionCalls"]) -> typing.Union[MetaOapg.properties.functionCalls, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contractName", "functionCalls", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    contractName: typing.Union[MetaOapg.properties.contractName, str, schemas.Unset] = schemas.unset,
                    functionCalls: typing.Union[MetaOapg.properties.functionCalls, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'contractCallDecodedData':
                    return super().__new__(
                        cls,
                        *_args,
                        contractName=contractName,
                        functionCalls=functionCalls,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def amountInfo() -> typing.Type['AmountInfo']:
                return AmountInfo
            treatAsGrossAmount = schemas.BoolSchema
        
            @staticmethod
            def feeInfo() -> typing.Type['FeeInfo']:
                return FeeInfo
            feeCurrency = schemas.StrSchema
            
            
            class networkRecords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetworkRecord']:
                        return NetworkRecord
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NetworkRecord'], typing.List['NetworkRecord']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'networkRecords':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetworkRecord':
                    return super().__getitem__(i)
            createdAt = schemas.NumberSchema
            lastUpdated = schemas.NumberSchema
            createdBy = schemas.StrSchema
            
            
            class signedBy(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signedBy':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            rejectedBy = schemas.StrSchema
        
            @staticmethod
            def authorizationInfo() -> typing.Type['AuthorizationInfo']:
                return AuthorizationInfo
            exchangeTxId = schemas.StrSchema
            customerRefId = schemas.StrSchema
        
            @staticmethod
            def amlScreeningResult() -> typing.Type['AmlScreeningResult']:
                return AmlScreeningResult
            extraParameters = schemas.DictSchema
        
            @staticmethod
            def signedMessages() -> typing.Type['SignedMessage']:
                return SignedMessage
            numOfConfirmations = schemas.NumberSchema
        
            @staticmethod
            def blockInfo() -> typing.Type['BlockInfo']:
                return BlockInfo
            index = schemas.NumberSchema
        
            @staticmethod
            def rewardInfo() -> typing.Type['RewardInfo']:
                return RewardInfo
        
            @staticmethod
            def systemMessages() -> typing.Type['SystemMessageInfo']:
                return SystemMessageInfo
            
            
            class addressType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WHITELISTED": "WHITELISTED",
                        "ONE_TIME": "ONE_TIME",
                    }
                
                @schemas.classproperty
                def WHITELISTED(cls):
                    return cls("WHITELISTED")
                
                @schemas.classproperty
                def ONE_TIME(cls):
                    return cls("ONE_TIME")
            requestedAmount = schemas.NumberSchema
            amount = schemas.NumberSchema
            netAmount = schemas.NumberSchema
            
            
            class amountUSD(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amountUSD':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            serviceFee = schemas.NumberSchema
            fee = schemas.NumberSchema
            networkFee = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "externalTxId": externalTxId,
                "status": status,
                "subStatus": subStatus,
                "txHash": txHash,
                "operation": operation,
                "note": note,
                "assetId": assetId,
                "source": source,
                "sourceAddress": sourceAddress,
                "tag": tag,
                "destination": destination,
                "destinations": destinations,
                "destinationAddress": destinationAddress,
                "destinationAddressDescription": destinationAddressDescription,
                "destinationTag": destinationTag,
                "contractCallDecodedData": contractCallDecodedData,
                "amountInfo": amountInfo,
                "treatAsGrossAmount": treatAsGrossAmount,
                "feeInfo": feeInfo,
                "feeCurrency": feeCurrency,
                "networkRecords": networkRecords,
                "createdAt": createdAt,
                "lastUpdated": lastUpdated,
                "createdBy": createdBy,
                "signedBy": signedBy,
                "rejectedBy": rejectedBy,
                "authorizationInfo": authorizationInfo,
                "exchangeTxId": exchangeTxId,
                "customerRefId": customerRefId,
                "amlScreeningResult": amlScreeningResult,
                "extraParameters": extraParameters,
                "signedMessages": signedMessages,
                "numOfConfirmations": numOfConfirmations,
                "blockInfo": blockInfo,
                "index": index,
                "rewardInfo": rewardInfo,
                "systemMessages": systemMessages,
                "addressType": addressType,
                "requestedAmount": requestedAmount,
                "amount": amount,
                "netAmount": netAmount,
                "amountUSD": amountUSD,
                "serviceFee": serviceFee,
                "fee": fee,
                "networkFee": networkFee,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalTxId"]) -> MetaOapg.properties.externalTxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subStatus"]) -> MetaOapg.properties.subStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txHash"]) -> MetaOapg.properties.txHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> 'GetTransactionOperation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'SourceTransferPeerPathResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceAddress"]) -> MetaOapg.properties.sourceAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'DestinationTransferPeerPathResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinations"]) -> MetaOapg.properties.destinations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationAddress"]) -> MetaOapg.properties.destinationAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationAddressDescription"]) -> MetaOapg.properties.destinationAddressDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationTag"]) -> MetaOapg.properties.destinationTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractCallDecodedData"]) -> MetaOapg.properties.contractCallDecodedData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountInfo"]) -> 'AmountInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treatAsGrossAmount"]) -> MetaOapg.properties.treatAsGrossAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeInfo"]) -> 'FeeInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeCurrency"]) -> MetaOapg.properties.feeCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkRecords"]) -> MetaOapg.properties.networkRecords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signedBy"]) -> MetaOapg.properties.signedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejectedBy"]) -> MetaOapg.properties.rejectedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationInfo"]) -> 'AuthorizationInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeTxId"]) -> MetaOapg.properties.exchangeTxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerRefId"]) -> MetaOapg.properties.customerRefId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amlScreeningResult"]) -> 'AmlScreeningResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extraParameters"]) -> MetaOapg.properties.extraParameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signedMessages"]) -> 'SignedMessage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numOfConfirmations"]) -> MetaOapg.properties.numOfConfirmations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockInfo"]) -> 'BlockInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewardInfo"]) -> 'RewardInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemMessages"]) -> 'SystemMessageInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressType"]) -> MetaOapg.properties.addressType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedAmount"]) -> MetaOapg.properties.requestedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netAmount"]) -> MetaOapg.properties.netAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountUSD"]) -> MetaOapg.properties.amountUSD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceFee"]) -> MetaOapg.properties.serviceFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkFee"]) -> MetaOapg.properties.networkFee: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "externalTxId", "status", "subStatus", "txHash", "operation", "note", "assetId", "source", "sourceAddress", "tag", "destination", "destinations", "destinationAddress", "destinationAddressDescription", "destinationTag", "contractCallDecodedData", "amountInfo", "treatAsGrossAmount", "feeInfo", "feeCurrency", "networkRecords", "createdAt", "lastUpdated", "createdBy", "signedBy", "rejectedBy", "authorizationInfo", "exchangeTxId", "customerRefId", "amlScreeningResult", "extraParameters", "signedMessages", "numOfConfirmations", "blockInfo", "index", "rewardInfo", "systemMessages", "addressType", "requestedAmount", "amount", "netAmount", "amountUSD", "serviceFee", "fee", "networkFee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalTxId"]) -> typing.Union[MetaOapg.properties.externalTxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subStatus"]) -> typing.Union[MetaOapg.properties.subStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txHash"]) -> typing.Union[MetaOapg.properties.txHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union['GetTransactionOperation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['SourceTransferPeerPathResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceAddress"]) -> typing.Union[MetaOapg.properties.sourceAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union['DestinationTransferPeerPathResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinations"]) -> typing.Union[MetaOapg.properties.destinations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationAddress"]) -> typing.Union[MetaOapg.properties.destinationAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationAddressDescription"]) -> typing.Union[MetaOapg.properties.destinationAddressDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationTag"]) -> typing.Union[MetaOapg.properties.destinationTag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractCallDecodedData"]) -> typing.Union[MetaOapg.properties.contractCallDecodedData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountInfo"]) -> typing.Union['AmountInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treatAsGrossAmount"]) -> typing.Union[MetaOapg.properties.treatAsGrossAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeInfo"]) -> typing.Union['FeeInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeCurrency"]) -> typing.Union[MetaOapg.properties.feeCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkRecords"]) -> typing.Union[MetaOapg.properties.networkRecords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signedBy"]) -> typing.Union[MetaOapg.properties.signedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejectedBy"]) -> typing.Union[MetaOapg.properties.rejectedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationInfo"]) -> typing.Union['AuthorizationInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeTxId"]) -> typing.Union[MetaOapg.properties.exchangeTxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerRefId"]) -> typing.Union[MetaOapg.properties.customerRefId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amlScreeningResult"]) -> typing.Union['AmlScreeningResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extraParameters"]) -> typing.Union[MetaOapg.properties.extraParameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signedMessages"]) -> typing.Union['SignedMessage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numOfConfirmations"]) -> typing.Union[MetaOapg.properties.numOfConfirmations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockInfo"]) -> typing.Union['BlockInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> typing.Union[MetaOapg.properties.index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewardInfo"]) -> typing.Union['RewardInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemMessages"]) -> typing.Union['SystemMessageInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressType"]) -> typing.Union[MetaOapg.properties.addressType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedAmount"]) -> typing.Union[MetaOapg.properties.requestedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netAmount"]) -> typing.Union[MetaOapg.properties.netAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountUSD"]) -> typing.Union[MetaOapg.properties.amountUSD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceFee"]) -> typing.Union[MetaOapg.properties.serviceFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union[MetaOapg.properties.fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkFee"]) -> typing.Union[MetaOapg.properties.networkFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "externalTxId", "status", "subStatus", "txHash", "operation", "note", "assetId", "source", "sourceAddress", "tag", "destination", "destinations", "destinationAddress", "destinationAddressDescription", "destinationTag", "contractCallDecodedData", "amountInfo", "treatAsGrossAmount", "feeInfo", "feeCurrency", "networkRecords", "createdAt", "lastUpdated", "createdBy", "signedBy", "rejectedBy", "authorizationInfo", "exchangeTxId", "customerRefId", "amlScreeningResult", "extraParameters", "signedMessages", "numOfConfirmations", "blockInfo", "index", "rewardInfo", "systemMessages", "addressType", "requestedAmount", "amount", "netAmount", "amountUSD", "serviceFee", "fee", "networkFee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        externalTxId: typing.Union[MetaOapg.properties.externalTxId, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        subStatus: typing.Union[MetaOapg.properties.subStatus, str, schemas.Unset] = schemas.unset,
        txHash: typing.Union[MetaOapg.properties.txHash, str, schemas.Unset] = schemas.unset,
        operation: typing.Union['GetTransactionOperation', schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        source: typing.Union['SourceTransferPeerPathResponse', schemas.Unset] = schemas.unset,
        sourceAddress: typing.Union[MetaOapg.properties.sourceAddress, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        destination: typing.Union['DestinationTransferPeerPathResponse', schemas.Unset] = schemas.unset,
        destinations: typing.Union[MetaOapg.properties.destinations, list, tuple, schemas.Unset] = schemas.unset,
        destinationAddress: typing.Union[MetaOapg.properties.destinationAddress, str, schemas.Unset] = schemas.unset,
        destinationAddressDescription: typing.Union[MetaOapg.properties.destinationAddressDescription, str, schemas.Unset] = schemas.unset,
        destinationTag: typing.Union[MetaOapg.properties.destinationTag, str, schemas.Unset] = schemas.unset,
        contractCallDecodedData: typing.Union[MetaOapg.properties.contractCallDecodedData, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        amountInfo: typing.Union['AmountInfo', schemas.Unset] = schemas.unset,
        treatAsGrossAmount: typing.Union[MetaOapg.properties.treatAsGrossAmount, bool, schemas.Unset] = schemas.unset,
        feeInfo: typing.Union['FeeInfo', schemas.Unset] = schemas.unset,
        feeCurrency: typing.Union[MetaOapg.properties.feeCurrency, str, schemas.Unset] = schemas.unset,
        networkRecords: typing.Union[MetaOapg.properties.networkRecords, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        signedBy: typing.Union[MetaOapg.properties.signedBy, list, tuple, schemas.Unset] = schemas.unset,
        rejectedBy: typing.Union[MetaOapg.properties.rejectedBy, str, schemas.Unset] = schemas.unset,
        authorizationInfo: typing.Union['AuthorizationInfo', schemas.Unset] = schemas.unset,
        exchangeTxId: typing.Union[MetaOapg.properties.exchangeTxId, str, schemas.Unset] = schemas.unset,
        customerRefId: typing.Union[MetaOapg.properties.customerRefId, str, schemas.Unset] = schemas.unset,
        amlScreeningResult: typing.Union['AmlScreeningResult', schemas.Unset] = schemas.unset,
        extraParameters: typing.Union[MetaOapg.properties.extraParameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        signedMessages: typing.Union['SignedMessage', schemas.Unset] = schemas.unset,
        numOfConfirmations: typing.Union[MetaOapg.properties.numOfConfirmations, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        blockInfo: typing.Union['BlockInfo', schemas.Unset] = schemas.unset,
        index: typing.Union[MetaOapg.properties.index, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rewardInfo: typing.Union['RewardInfo', schemas.Unset] = schemas.unset,
        systemMessages: typing.Union['SystemMessageInfo', schemas.Unset] = schemas.unset,
        addressType: typing.Union[MetaOapg.properties.addressType, str, schemas.Unset] = schemas.unset,
        requestedAmount: typing.Union[MetaOapg.properties.requestedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netAmount: typing.Union[MetaOapg.properties.netAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountUSD: typing.Union[MetaOapg.properties.amountUSD, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        serviceFee: typing.Union[MetaOapg.properties.serviceFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fee: typing.Union[MetaOapg.properties.fee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        networkFee: typing.Union[MetaOapg.properties.networkFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionResponse':
        return super().__new__(
            cls,
            *_args,
            id=id,
            externalTxId=externalTxId,
            status=status,
            subStatus=subStatus,
            txHash=txHash,
            operation=operation,
            note=note,
            assetId=assetId,
            source=source,
            sourceAddress=sourceAddress,
            tag=tag,
            destination=destination,
            destinations=destinations,
            destinationAddress=destinationAddress,
            destinationAddressDescription=destinationAddressDescription,
            destinationTag=destinationTag,
            contractCallDecodedData=contractCallDecodedData,
            amountInfo=amountInfo,
            treatAsGrossAmount=treatAsGrossAmount,
            feeInfo=feeInfo,
            feeCurrency=feeCurrency,
            networkRecords=networkRecords,
            createdAt=createdAt,
            lastUpdated=lastUpdated,
            createdBy=createdBy,
            signedBy=signedBy,
            rejectedBy=rejectedBy,
            authorizationInfo=authorizationInfo,
            exchangeTxId=exchangeTxId,
            customerRefId=customerRefId,
            amlScreeningResult=amlScreeningResult,
            extraParameters=extraParameters,
            signedMessages=signedMessages,
            numOfConfirmations=numOfConfirmations,
            blockInfo=blockInfo,
            index=index,
            rewardInfo=rewardInfo,
            systemMessages=systemMessages,
            addressType=addressType,
            requestedAmount=requestedAmount,
            amount=amount,
            netAmount=netAmount,
            amountUSD=amountUSD,
            serviceFee=serviceFee,
            fee=fee,
            networkFee=networkFee,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.aml_screening_result import AmlScreeningResult
from fireblocks_client.model.amount_info import AmountInfo
from fireblocks_client.model.authorization_info import AuthorizationInfo
from fireblocks_client.model.block_info import BlockInfo
from fireblocks_client.model.destination_transfer_peer_path_response import DestinationTransferPeerPathResponse
from fireblocks_client.model.fee_info import FeeInfo
from fireblocks_client.model.get_transaction_operation import GetTransactionOperation
from fireblocks_client.model.network_record import NetworkRecord
from fireblocks_client.model.reward_info import RewardInfo
from fireblocks_client.model.signed_message import SignedMessage
from fireblocks_client.model.source_transfer_peer_path_response import SourceTransferPeerPathResponse
from fireblocks_client.model.system_message_info import SystemMessageInfo
from fireblocks_client.model.transaction_response_destination import TransactionResponseDestination
