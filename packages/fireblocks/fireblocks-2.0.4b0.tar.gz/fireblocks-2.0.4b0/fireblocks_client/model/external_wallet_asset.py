# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class ExternalWalletAsset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['ConfigChangeRequestStatus']:
                return ConfigChangeRequestStatus
            address = schemas.StrSchema
            balance = schemas.StrSchema
            lockedAmount = schemas.StrSchema
            tag = schemas.StrSchema
            activationTime = schemas.StrSchema
            
            
            class additionalInfo(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WalletAssetAdditionalInfo']:
                        return WalletAssetAdditionalInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WalletAssetAdditionalInfo'], typing.List['WalletAssetAdditionalInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalInfo':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WalletAssetAdditionalInfo':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "status": status,
                "address": address,
                "balance": balance,
                "lockedAmount": lockedAmount,
                "tag": tag,
                "activationTime": activationTime,
                "additionalInfo": additionalInfo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ConfigChangeRequestStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockedAmount"]) -> MetaOapg.properties.lockedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activationTime"]) -> MetaOapg.properties.activationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalInfo"]) -> MetaOapg.properties.additionalInfo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "address", "balance", "lockedAmount", "tag", "activationTime", "additionalInfo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['ConfigChangeRequestStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockedAmount"]) -> typing.Union[MetaOapg.properties.lockedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activationTime"]) -> typing.Union[MetaOapg.properties.activationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalInfo"]) -> typing.Union[MetaOapg.properties.additionalInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "address", "balance", "lockedAmount", "tag", "activationTime", "additionalInfo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        status: typing.Union['ConfigChangeRequestStatus', schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, str, schemas.Unset] = schemas.unset,
        lockedAmount: typing.Union[MetaOapg.properties.lockedAmount, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        activationTime: typing.Union[MetaOapg.properties.activationTime, str, schemas.Unset] = schemas.unset,
        additionalInfo: typing.Union[MetaOapg.properties.additionalInfo, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalWalletAsset':
        return super().__new__(
            cls,
            *_args,
            id=id,
            status=status,
            address=address,
            balance=balance,
            lockedAmount=lockedAmount,
            tag=tag,
            activationTime=activationTime,
            additionalInfo=additionalInfo,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.config_change_request_status import ConfigChangeRequestStatus
from fireblocks_client.model.wallet_asset_additional_info import WalletAssetAdditionalInfo
