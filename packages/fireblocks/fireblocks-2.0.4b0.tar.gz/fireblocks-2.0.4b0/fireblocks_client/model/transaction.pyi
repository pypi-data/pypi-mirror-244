# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class Transaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "id",
            "state",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("SUBMITTED")
                
                @schemas.classproperty
                def QUEUED(cls):
                    return cls("QUEUED")
                
                @schemas.classproperty
                def PENDING_AUTHORIZATION(cls):
                    return cls("PENDING_AUTHORIZATION")
                
                @schemas.classproperty
                def PENDING_SIGNATURE(cls):
                    return cls("PENDING_SIGNATURE")
                
                @schemas.classproperty
                def BROADCASTING(cls):
                    return cls("BROADCASTING")
                
                @schemas.classproperty
                def PENDING_3RD_PARTY_MANUAL_APPROVAL(cls):
                    return cls("PENDING_3RD_PARTY_MANUAL_APPROVAL")
                
                @schemas.classproperty
                def PENDING_3RD_PARTY(cls):
                    return cls("PENDING_3RD_PARTY")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def CONFIRMING(cls):
                    return cls("CONFIRMING")
                
                @schemas.classproperty
                def CONFIRMED(cls):
                    return cls("CONFIRMED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def PARTIALLY_COMPLETED(cls):
                    return cls("PARTIALLY_COMPLETED")
                
                @schemas.classproperty
                def PENDING_AML_SCREENING(cls):
                    return cls("PENDING_AML_SCREENING")
                
                @schemas.classproperty
                def CANCELLING(cls):
                    return cls("CANCELLING")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def BLOCKED(cls):
                    return cls("BLOCKED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def TIMEOUT(cls):
                    return cls("TIMEOUT")
            timestamp = schemas.NumberSchema
            instructionId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "state": state,
                "timestamp": timestamp,
                "instructionId": instructionId,
            }
    
    id: MetaOapg.properties.id
    state: MetaOapg.properties.state
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instructionId"]) -> MetaOapg.properties.instructionId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "state", "timestamp", "instructionId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instructionId"]) -> typing.Union[MetaOapg.properties.instructionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "state", "timestamp", "instructionId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        instructionId: typing.Union[MetaOapg.properties.instructionId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Transaction':
        return super().__new__(
            cls,
            *_args,
            id=id,
            state=state,
            timestamp=timestamp,
            instructionId=instructionId,
            _configuration=_configuration,
            **kwargs,
        )
