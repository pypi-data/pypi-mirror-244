# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class TravelRuleIssuers(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "country",
            "website",
            "city",
            "isRegulated",
            "description",
            "businessNumber",
            "yearFounded",
            "legalName",
            "legalStructure",
            "regulatoryAuthorities",
            "name",
            "addressLine1",
            "logo",
            "incorporationCountry",
        }
        
        class properties:
        
            @staticmethod
            def yearFounded() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def isRegulated() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def regulatoryAuthorities() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def name() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def logo() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def website() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def legalName() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def legalStructure() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def incorporationCountry() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def businessNumber() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def addressLine1() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def city() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def country() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
        
            @staticmethod
            def description() -> typing.Type['TravelRuleIssuer']:
                return TravelRuleIssuer
            __annotations__ = {
                "yearFounded": yearFounded,
                "isRegulated": isRegulated,
                "regulatoryAuthorities": regulatoryAuthorities,
                "name": name,
                "logo": logo,
                "website": website,
                "legalName": legalName,
                "legalStructure": legalStructure,
                "incorporationCountry": incorporationCountry,
                "businessNumber": businessNumber,
                "addressLine1": addressLine1,
                "city": city,
                "country": country,
                "description": description,
            }
    
    country: 'TravelRuleIssuer'
    website: 'TravelRuleIssuer'
    city: 'TravelRuleIssuer'
    isRegulated: 'TravelRuleIssuer'
    description: 'TravelRuleIssuer'
    businessNumber: 'TravelRuleIssuer'
    yearFounded: 'TravelRuleIssuer'
    legalName: 'TravelRuleIssuer'
    legalStructure: 'TravelRuleIssuer'
    regulatoryAuthorities: 'TravelRuleIssuer'
    name: 'TravelRuleIssuer'
    addressLine1: 'TravelRuleIssuer'
    logo: 'TravelRuleIssuer'
    incorporationCountry: 'TravelRuleIssuer'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearFounded"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRegulated"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regulatoryAuthorities"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalName"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalStructure"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incorporationCountry"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessNumber"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["yearFounded", "isRegulated", "regulatoryAuthorities", "name", "logo", "website", "legalName", "legalStructure", "incorporationCountry", "businessNumber", "addressLine1", "city", "country", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearFounded"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRegulated"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regulatoryAuthorities"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalName"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalStructure"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incorporationCountry"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessNumber"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> 'TravelRuleIssuer': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["yearFounded", "isRegulated", "regulatoryAuthorities", "name", "logo", "website", "legalName", "legalStructure", "incorporationCountry", "businessNumber", "addressLine1", "city", "country", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        country: 'TravelRuleIssuer',
        website: 'TravelRuleIssuer',
        city: 'TravelRuleIssuer',
        isRegulated: 'TravelRuleIssuer',
        description: 'TravelRuleIssuer',
        businessNumber: 'TravelRuleIssuer',
        yearFounded: 'TravelRuleIssuer',
        legalName: 'TravelRuleIssuer',
        legalStructure: 'TravelRuleIssuer',
        regulatoryAuthorities: 'TravelRuleIssuer',
        name: 'TravelRuleIssuer',
        addressLine1: 'TravelRuleIssuer',
        logo: 'TravelRuleIssuer',
        incorporationCountry: 'TravelRuleIssuer',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TravelRuleIssuers':
        return super().__new__(
            cls,
            *_args,
            country=country,
            website=website,
            city=city,
            isRegulated=isRegulated,
            description=description,
            businessNumber=businessNumber,
            yearFounded=yearFounded,
            legalName=legalName,
            legalStructure=legalStructure,
            regulatoryAuthorities=regulatoryAuthorities,
            name=name,
            addressLine1=addressLine1,
            logo=logo,
            incorporationCountry=incorporationCountry,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.travel_rule_issuer import TravelRuleIssuer
