# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class PayoutResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "instructionSet",
            "state",
            "payoutId",
            "paymentAccount",
            "status",
        }
        
        class properties:
            payoutId = schemas.StrSchema
        
            @staticmethod
            def paymentAccount() -> typing.Type['PaymentAccountResponse']:
                return PaymentAccountResponse
            createdAt = schemas.NumberSchema
        
            @staticmethod
            def state() -> typing.Type['PayoutState']:
                return PayoutState
        
            @staticmethod
            def status() -> typing.Type['PayoutStatus']:
                return PayoutStatus
            
            
            class instructionSet(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayoutInstructionResponse']:
                        return PayoutInstructionResponse
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PayoutInstructionResponse'], typing.List['PayoutInstructionResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instructionSet':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PayoutInstructionResponse':
                    return super().__getitem__(i)
            reasonOfFailure = schemas.StrSchema
        
            @staticmethod
            def initMethod() -> typing.Type['PayoutInitMethod']:
                return PayoutInitMethod
            reportUrl = schemas.StrSchema
            __annotations__ = {
                "payoutId": payoutId,
                "paymentAccount": paymentAccount,
                "createdAt": createdAt,
                "state": state,
                "status": status,
                "instructionSet": instructionSet,
                "reasonOfFailure": reasonOfFailure,
                "initMethod": initMethod,
                "reportUrl": reportUrl,
            }
    
    createdAt: MetaOapg.properties.createdAt
    instructionSet: MetaOapg.properties.instructionSet
    state: 'PayoutState'
    payoutId: MetaOapg.properties.payoutId
    paymentAccount: 'PaymentAccountResponse'
    status: 'PayoutStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payoutId"]) -> MetaOapg.properties.payoutId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentAccount"]) -> 'PaymentAccountResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'PayoutState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PayoutStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instructionSet"]) -> MetaOapg.properties.instructionSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasonOfFailure"]) -> MetaOapg.properties.reasonOfFailure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initMethod"]) -> 'PayoutInitMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportUrl"]) -> MetaOapg.properties.reportUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payoutId", "paymentAccount", "createdAt", "state", "status", "instructionSet", "reasonOfFailure", "initMethod", "reportUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payoutId"]) -> MetaOapg.properties.payoutId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentAccount"]) -> 'PaymentAccountResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'PayoutState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'PayoutStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instructionSet"]) -> MetaOapg.properties.instructionSet: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasonOfFailure"]) -> typing.Union[MetaOapg.properties.reasonOfFailure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initMethod"]) -> typing.Union['PayoutInitMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportUrl"]) -> typing.Union[MetaOapg.properties.reportUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payoutId", "paymentAccount", "createdAt", "state", "status", "instructionSet", "reasonOfFailure", "initMethod", "reportUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, float, ],
        instructionSet: typing.Union[MetaOapg.properties.instructionSet, list, tuple, ],
        state: 'PayoutState',
        payoutId: typing.Union[MetaOapg.properties.payoutId, str, ],
        paymentAccount: 'PaymentAccountResponse',
        status: 'PayoutStatus',
        reasonOfFailure: typing.Union[MetaOapg.properties.reasonOfFailure, str, schemas.Unset] = schemas.unset,
        initMethod: typing.Union['PayoutInitMethod', schemas.Unset] = schemas.unset,
        reportUrl: typing.Union[MetaOapg.properties.reportUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayoutResponse':
        return super().__new__(
            cls,
            *_args,
            createdAt=createdAt,
            instructionSet=instructionSet,
            state=state,
            payoutId=payoutId,
            paymentAccount=paymentAccount,
            status=status,
            reasonOfFailure=reasonOfFailure,
            initMethod=initMethod,
            reportUrl=reportUrl,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.payment_account_response import PaymentAccountResponse
from fireblocks_client.model.payout_init_method import PayoutInitMethod
from fireblocks_client.model.payout_instruction_response import PayoutInstructionResponse
from fireblocks_client.model.payout_state import PayoutState
from fireblocks_client.model.payout_status import PayoutStatus
