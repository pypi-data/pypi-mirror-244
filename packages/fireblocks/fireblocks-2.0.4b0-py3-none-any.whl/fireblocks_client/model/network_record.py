# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class NetworkRecord(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def source() -> typing.Type['SourceTransferPeerPathResponse']:
                return SourceTransferPeerPathResponse
        
            @staticmethod
            def destination() -> typing.Type['DestinationTransferPeerPathResponse']:
                return DestinationTransferPeerPathResponse
            txHash = schemas.StrSchema
            networkFee = schemas.StrSchema
            assetId = schemas.StrSchema
            netAmount = schemas.StrSchema
            isDropped = schemas.BoolSchema
            type = schemas.StrSchema
            destinationAddress = schemas.StrSchema
            sourceAddress = schemas.StrSchema
            amountUSD = schemas.StrSchema
            index = schemas.NumberSchema
        
            @staticmethod
            def rewardInfo() -> typing.Type['RewardInfo']:
                return RewardInfo
            __annotations__ = {
                "source": source,
                "destination": destination,
                "txHash": txHash,
                "networkFee": networkFee,
                "assetId": assetId,
                "netAmount": netAmount,
                "isDropped": isDropped,
                "type": type,
                "destinationAddress": destinationAddress,
                "sourceAddress": sourceAddress,
                "amountUSD": amountUSD,
                "index": index,
                "rewardInfo": rewardInfo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'SourceTransferPeerPathResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'DestinationTransferPeerPathResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txHash"]) -> MetaOapg.properties.txHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkFee"]) -> MetaOapg.properties.networkFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netAmount"]) -> MetaOapg.properties.netAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDropped"]) -> MetaOapg.properties.isDropped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationAddress"]) -> MetaOapg.properties.destinationAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceAddress"]) -> MetaOapg.properties.sourceAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountUSD"]) -> MetaOapg.properties.amountUSD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewardInfo"]) -> 'RewardInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "destination", "txHash", "networkFee", "assetId", "netAmount", "isDropped", "type", "destinationAddress", "sourceAddress", "amountUSD", "index", "rewardInfo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['SourceTransferPeerPathResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union['DestinationTransferPeerPathResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txHash"]) -> typing.Union[MetaOapg.properties.txHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkFee"]) -> typing.Union[MetaOapg.properties.networkFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netAmount"]) -> typing.Union[MetaOapg.properties.netAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDropped"]) -> typing.Union[MetaOapg.properties.isDropped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationAddress"]) -> typing.Union[MetaOapg.properties.destinationAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceAddress"]) -> typing.Union[MetaOapg.properties.sourceAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountUSD"]) -> typing.Union[MetaOapg.properties.amountUSD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> typing.Union[MetaOapg.properties.index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewardInfo"]) -> typing.Union['RewardInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "destination", "txHash", "networkFee", "assetId", "netAmount", "isDropped", "type", "destinationAddress", "sourceAddress", "amountUSD", "index", "rewardInfo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        source: typing.Union['SourceTransferPeerPathResponse', schemas.Unset] = schemas.unset,
        destination: typing.Union['DestinationTransferPeerPathResponse', schemas.Unset] = schemas.unset,
        txHash: typing.Union[MetaOapg.properties.txHash, str, schemas.Unset] = schemas.unset,
        networkFee: typing.Union[MetaOapg.properties.networkFee, str, schemas.Unset] = schemas.unset,
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        netAmount: typing.Union[MetaOapg.properties.netAmount, str, schemas.Unset] = schemas.unset,
        isDropped: typing.Union[MetaOapg.properties.isDropped, bool, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        destinationAddress: typing.Union[MetaOapg.properties.destinationAddress, str, schemas.Unset] = schemas.unset,
        sourceAddress: typing.Union[MetaOapg.properties.sourceAddress, str, schemas.Unset] = schemas.unset,
        amountUSD: typing.Union[MetaOapg.properties.amountUSD, str, schemas.Unset] = schemas.unset,
        index: typing.Union[MetaOapg.properties.index, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rewardInfo: typing.Union['RewardInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkRecord':
        return super().__new__(
            cls,
            *_args,
            source=source,
            destination=destination,
            txHash=txHash,
            networkFee=networkFee,
            assetId=assetId,
            netAmount=netAmount,
            isDropped=isDropped,
            type=type,
            destinationAddress=destinationAddress,
            sourceAddress=sourceAddress,
            amountUSD=amountUSD,
            index=index,
            rewardInfo=rewardInfo,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.destination_transfer_peer_path_response import DestinationTransferPeerPathResponse
from fireblocks_client.model.reward_info import RewardInfo
from fireblocks_client.model.source_transfer_peer_path_response import SourceTransferPeerPathResponse
