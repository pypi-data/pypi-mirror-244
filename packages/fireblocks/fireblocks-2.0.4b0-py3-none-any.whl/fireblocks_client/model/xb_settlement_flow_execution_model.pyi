# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class XBSettlementFlowExecutionModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "initiatedAt",
            "totalFee",
            "configId",
            "outputAmount",
            "inputAmount",
            "state",
            "flowId",
            "steps",
            "initiatedBy",
            "selectedConversionSlippage",
        }
        
        class properties:
            flowId = schemas.StrSchema
            configId = schemas.UUIDSchema
        
            @staticmethod
            def inputAmount() -> typing.Type['XBSettlementAsset']:
                return XBSettlementAsset
        
            @staticmethod
            def outputAmount() -> typing.Type['XBSettlementAsset']:
                return XBSettlementAsset
        
            @staticmethod
            def totalFee() -> typing.Type['XBSettlementAsset']:
                return XBSettlementAsset
            initiatedAt = schemas.NumberSchema
            initiatedBy = schemas.StrSchema
        
            @staticmethod
            def state() -> typing.Type['XBSettlementFlowExecutionStatus']:
                return XBSettlementFlowExecutionStatus
        
            @staticmethod
            def steps() -> typing.Type['XBSettlementFlowStepsExecutionRecord']:
                return XBSettlementFlowStepsExecutionRecord
            
            
            class selectedConversionSlippage(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "reason",
                        "basisPoints",
                    }
                    
                    class properties:
                        basisPoints = schemas.NumberSchema
                    
                        @staticmethod
                        def reason() -> typing.Type['XBSettlementFlowSelectedConversionSlippageReason']:
                            return XBSettlementFlowSelectedConversionSlippageReason
                        __annotations__ = {
                            "basisPoints": basisPoints,
                            "reason": reason,
                        }
                
                reason: 'XBSettlementFlowSelectedConversionSlippageReason'
                basisPoints: MetaOapg.properties.basisPoints
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["basisPoints"]) -> MetaOapg.properties.basisPoints: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reason"]) -> 'XBSettlementFlowSelectedConversionSlippageReason': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["basisPoints", "reason", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["basisPoints"]) -> MetaOapg.properties.basisPoints: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> 'XBSettlementFlowSelectedConversionSlippageReason': ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["basisPoints", "reason", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    reason: 'XBSettlementFlowSelectedConversionSlippageReason',
                    basisPoints: typing.Union[MetaOapg.properties.basisPoints, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'selectedConversionSlippage':
                    return super().__new__(
                        cls,
                        *_args,
                        reason=reason,
                        basisPoints=basisPoints,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "flowId": flowId,
                "configId": configId,
                "inputAmount": inputAmount,
                "outputAmount": outputAmount,
                "totalFee": totalFee,
                "initiatedAt": initiatedAt,
                "initiatedBy": initiatedBy,
                "state": state,
                "steps": steps,
                "selectedConversionSlippage": selectedConversionSlippage,
            }
    
    initiatedAt: MetaOapg.properties.initiatedAt
    totalFee: 'XBSettlementAsset'
    configId: MetaOapg.properties.configId
    outputAmount: 'XBSettlementAsset'
    inputAmount: 'XBSettlementAsset'
    state: 'XBSettlementFlowExecutionStatus'
    flowId: MetaOapg.properties.flowId
    steps: 'XBSettlementFlowStepsExecutionRecord'
    initiatedBy: MetaOapg.properties.initiatedBy
    selectedConversionSlippage: MetaOapg.properties.selectedConversionSlippage
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowId"]) -> MetaOapg.properties.flowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configId"]) -> MetaOapg.properties.configId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalFee"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiatedAt"]) -> MetaOapg.properties.initiatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiatedBy"]) -> MetaOapg.properties.initiatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'XBSettlementFlowExecutionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps"]) -> 'XBSettlementFlowStepsExecutionRecord': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectedConversionSlippage"]) -> MetaOapg.properties.selectedConversionSlippage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flowId", "configId", "inputAmount", "outputAmount", "totalFee", "initiatedAt", "initiatedBy", "state", "steps", "selectedConversionSlippage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowId"]) -> MetaOapg.properties.flowId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configId"]) -> MetaOapg.properties.configId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputAmount"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalFee"]) -> 'XBSettlementAsset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiatedAt"]) -> MetaOapg.properties.initiatedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiatedBy"]) -> MetaOapg.properties.initiatedBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'XBSettlementFlowExecutionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps"]) -> 'XBSettlementFlowStepsExecutionRecord': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectedConversionSlippage"]) -> MetaOapg.properties.selectedConversionSlippage: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flowId", "configId", "inputAmount", "outputAmount", "totalFee", "initiatedAt", "initiatedBy", "state", "steps", "selectedConversionSlippage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        initiatedAt: typing.Union[MetaOapg.properties.initiatedAt, decimal.Decimal, int, float, ],
        totalFee: 'XBSettlementAsset',
        configId: typing.Union[MetaOapg.properties.configId, str, uuid.UUID, ],
        outputAmount: 'XBSettlementAsset',
        inputAmount: 'XBSettlementAsset',
        state: 'XBSettlementFlowExecutionStatus',
        flowId: typing.Union[MetaOapg.properties.flowId, str, ],
        steps: 'XBSettlementFlowStepsExecutionRecord',
        initiatedBy: typing.Union[MetaOapg.properties.initiatedBy, str, ],
        selectedConversionSlippage: typing.Union[MetaOapg.properties.selectedConversionSlippage, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XBSettlementFlowExecutionModel':
        return super().__new__(
            cls,
            *_args,
            initiatedAt=initiatedAt,
            totalFee=totalFee,
            configId=configId,
            outputAmount=outputAmount,
            inputAmount=inputAmount,
            state=state,
            flowId=flowId,
            steps=steps,
            initiatedBy=initiatedBy,
            selectedConversionSlippage=selectedConversionSlippage,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.xb_settlement_asset import XBSettlementAsset
from fireblocks_client.model.xb_settlement_flow_execution_status import XBSettlementFlowExecutionStatus
from fireblocks_client.model.xb_settlement_flow_selected_conversion_slippage_reason import XBSettlementFlowSelectedConversionSlippageReason
from fireblocks_client.model.xb_settlement_flow_steps_execution_record import XBSettlementFlowStepsExecutionRecord
