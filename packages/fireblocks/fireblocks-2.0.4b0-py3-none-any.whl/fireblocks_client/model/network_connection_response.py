# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireblocks_client import schemas  # noqa: F401


class NetworkConnectionResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "localNetworkId",
            "remoteNetworkId",
            "id",
            "routingPolicy",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['ConfigChangeRequestStatus']:
                return ConfigChangeRequestStatus
        
            @staticmethod
            def localNetworkId() -> typing.Type['NetworkId']:
                return NetworkId
        
            @staticmethod
            def remoteNetworkId() -> typing.Type['NetworkId']:
                return NetworkId
        
            @staticmethod
            def routingPolicy() -> typing.Type['NetworkConnectionRoutingPolicy']:
                return NetworkConnectionRoutingPolicy
            
            
            class localChannel(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            NetworkChannel,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'localChannel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class remoteChannel(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            NetworkChannel,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remoteChannel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "status": status,
                "localNetworkId": localNetworkId,
                "remoteNetworkId": remoteNetworkId,
                "routingPolicy": routingPolicy,
                "localChannel": localChannel,
                "remoteChannel": remoteChannel,
            }
    
    localNetworkId: 'NetworkId'
    remoteNetworkId: 'NetworkId'
    id: MetaOapg.properties.id
    routingPolicy: 'NetworkConnectionRoutingPolicy'
    status: 'ConfigChangeRequestStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ConfigChangeRequestStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localNetworkId"]) -> 'NetworkId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteNetworkId"]) -> 'NetworkId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routingPolicy"]) -> 'NetworkConnectionRoutingPolicy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localChannel"]) -> MetaOapg.properties.localChannel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteChannel"]) -> MetaOapg.properties.remoteChannel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "localNetworkId", "remoteNetworkId", "routingPolicy", "localChannel", "remoteChannel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ConfigChangeRequestStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localNetworkId"]) -> 'NetworkId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteNetworkId"]) -> 'NetworkId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routingPolicy"]) -> 'NetworkConnectionRoutingPolicy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localChannel"]) -> typing.Union[MetaOapg.properties.localChannel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteChannel"]) -> typing.Union[MetaOapg.properties.remoteChannel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "localNetworkId", "remoteNetworkId", "routingPolicy", "localChannel", "remoteChannel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        localNetworkId: 'NetworkId',
        remoteNetworkId: 'NetworkId',
        id: typing.Union[MetaOapg.properties.id, str, ],
        routingPolicy: 'NetworkConnectionRoutingPolicy',
        status: 'ConfigChangeRequestStatus',
        localChannel: typing.Union[MetaOapg.properties.localChannel, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        remoteChannel: typing.Union[MetaOapg.properties.remoteChannel, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkConnectionResponse':
        return super().__new__(
            cls,
            *_args,
            localNetworkId=localNetworkId,
            remoteNetworkId=remoteNetworkId,
            id=id,
            routingPolicy=routingPolicy,
            status=status,
            localChannel=localChannel,
            remoteChannel=remoteChannel,
            _configuration=_configuration,
            **kwargs,
        )

from fireblocks_client.model.config_change_request_status import ConfigChangeRequestStatus
from fireblocks_client.model.network_channel import NetworkChannel
from fireblocks_client.model.network_connection_routing_policy import NetworkConnectionRoutingPolicy
from fireblocks_client.model.network_id import NetworkId
